<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test FlashVideoRenderer functionality
 *
 * @package FlashVideo
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class FlashVideoRendererTest extends GalleryTestCase {

    function FlashVideoRendererTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	list ($ret, $this->_renderer) =
	    GalleryCoreApi::newFactoryInstance('GalleryRenderer', 'FlashVideoRenderer');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $this->_item) = $this->_createRandomDataItem(
		$this->_getRootId(), 'video/x-flv', array('width' => 320, 'height' => 240));
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_item);
    }

    function testCanBeViewedInline() {
	list ($ret, $item) = GalleryCoreApi::newItemByMimeType('image/jpeg');
	if ($ret) {
	    return $ret;
	}
	$item->setMimeType('image/jpeg');
	$item->setWidth(100);
	$item->setHeight(100);
	$this->assert(!$this->_renderer->canBeViewedInline($item), 'jpeg');

	list ($ret, $item) = GalleryCoreApi::newItemByMimeType('video/mpeg');
	if ($ret) {
	    return $ret;
	}
	$item->setMimeType('video/mpeg');
	$item->setWidth(100);
	$item->setHeight(100);
	$this->assert(!$this->_renderer->canBeViewedInline($item), 'mpeg');

	list ($ret, $item) = GalleryCoreApi::newItemByMimeType('video/x-flv');
	if ($ret) {
	    return $ret;
	}
	$item->setMimeType('video/x-flv');
	$this->assert($this->_renderer->canBeViewedInline($item), 'flv no size');

	$this->assert($this->_renderer->canBeViewedInline($this->_item), 'flv item');
    }

    function testRender() {
	$html = $this->_renderer->render($this->_item, $this->_item,
					 array('fallback' => 'FALLBACK'));
	$this->assert(strpos($html, '<div id="flashvideo"') !== false, 'flash <div> placeholder');
	$this->assert(strpos($html, '.swf'), '.swf');
	$this->assert(strpos($html, 'http'), 'http');
	$this->assert(strpos($html, (string)$this->_item->getId()), 'itemId');
    }
}
?>
