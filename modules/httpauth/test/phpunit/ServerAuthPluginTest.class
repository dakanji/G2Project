<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/httpauth/classes/ServerAuthPlugin.class');

/**
 * Server auth tests.
 * @package HttpAuth
 * @subpackage PHPUnit
 * @author Jack Bates <ms419@freezone.co.uk>
 * @version $Revision: 17580 $
 */
class ServerAuthPluginTest extends GalleryTestCase {

    function ServerAuthPluginTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	/* Create test user */
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_user);
	$_SERVER['AUTH_TYPE'] = 'Test';

	$this->_plugin = new ServerAuthPlugin();

	$this->_saveSession = $gallery->_session;
	$gallery->_session = new ServerAuthPluginTestSession();
    }

    function tearDown() {
	global $gallery;
	$gallery->_session = $this->_saveSession;

	$ret = GalleryCoreApi::removeAllMapEntries('FailedLoginsMap');
	if ($ret) {
	    return $ret;
	}

	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}
    }

    function testValidUser() {
	global $gallery;
	$session =& $gallery->getSession();

	$_SERVER['REMOTE_USER'] = $this->_user->getUserName();

	list ($ret, $user) = $this->_plugin->getUser();
	if ($ret) {
	    return ($ret);
	}

	$this->assertEquals($this->_user, $user);
	$this->assert($session->regenerateWasCalled(), 'Session has not been regenerated!');
    }

    function testInvalidUser() {
	$_SERVER['REMOTE_USER'] = 'bogusUser-' . rand();

	list ($ret, $user) = $this->_plugin->getUser();
	if ($ret) {
	    return ($ret);
	}

	$this->assertEquals(null, $user);
    }
}

/**
 * Mock Session
 */
class ServerAuthPluginTestSession {
    function ServerAuthPluginTestSession() {
	$this->_regenerateWasCalled = false;
    }

    function getUserId() {
	return null;
    }

    function regenerate() {
	$this->_regenerateWasCalled = true;
    }

    function regenerateWasCalled() {
	return $this->_regenerateWasCalled;
    }
}
?>
