<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * All image functions from the GD library are implemented here.
 *
 * Every call to these functions should go through this class. Errors are handled the Gallery-way
 * (GalleryStatus) and it provides an easy way to test the Toolkit (by using an implementation with
 * pseudo-functionality instead of this class).
 *
 * @package Gd
 * @subpackage Classes
 * @author Ernesto Baschny <ernst@baschny.de>
 * @version $Revision: 17580 $
 */
class GdFunctionality {
	/**
	 * @return array GalleryStatus
	 *         string phpinfo output
	 */
	public function phpinfo($section = null) {
		ob_start();
		phpinfo($section);
		$phpinfo = ob_get_contents();
		ob_end_clean();

		return array(null, $phpinfo);
	}

	/**
	 * The tempnam method from the GalleryPlatform we will need to overwrite in our testcases
	 * @return string
	 */
	public function tempnam($tmpDir, $prefix) {
		global $gallery;
		$platform =& $gallery->getPlatform();

		return $platform->tempnam($tmpDir, $prefix);
	}

	/**
	 * The copy method from GalleryPlatform, which we need to be able to overwrite in tests
	 * @return string
	 */
	public function copy($src, $dest) {
		global $gallery;
		$platform =& $gallery->getPlatform();

		return $platform->copy($src, $dest);
	}

	/**
	 * The unlink method from GalleryPlatform, which we need to be able to overwrite in tests
	 * @return string
	 */
	public function unlink($file) {
		global $gallery;
		$platform =& $gallery->getPlatform();

		return $platform->unlink($file);
	}

	/**
	 * The filesize method from GalleryPlatform, which we need to be able to overwrite in tests
	 * @return int
	 */
	public function filesize($file) {
		global $gallery;
		$platform =& $gallery->getPlatform();

		return $platform->filesize($file);
	}

	/**
	 * Set file permissions according to preferences
	 * @param string $file file path
	 * @return boolean true on success
	 */
	public function chmod($file) {
		global $gallery;
		$platform =& $gallery->getPlatform();

		return $platform->chmod($file);
	}

	/**
	 * Just check if a function exists or not.
	 * This is here so we can substitute the function-checker routine in our phpunit testcases.
	 *
	 * @return boolean true if exists
	 */
	public function functionExists($fct) {
		return function_exists($fct);
	}

	/**
	 * Return an integer representing the known imageTypes
	 * @return int
	 */
	public function imageTypes() {
		return imagetypes();
	}

	/**
	 * Return an array of information about the currently installed GD version
	 *
	 * Requires:
	 * - PHP 4 >= 4.3.0, PHP 5
	 *
	 * @return array GalleryStatus
	 *         array the output of gd_info
	 */
	public function gd_info() {
		if (!function_exists('gd_info')) {
			return array(GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE), null);
		}
		$info = @gd_info();

		return array(null, $info);
	}

	/**
	 * Return the size (width, height) of an image file.
	 * @return array (x, y)
	 */
	public function getImageSize($filename) {
		global $gallery;
		$platform =& $gallery->getPlatform();

		return $platform->getimagesize($filename);
	}

	/**
	 * Create a new palette based image with specified width and height
	 *
	 * Requires:
	 * - any PHP
	 *
	 * @return array GalleryStatus
	 *         res GD-resource
	 */
	public function imageCreate($width, $height) {
		$res = @imagecreate($width, $height);

		if (!$res) {
			return array(
				GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION),
				null,
			);
		}

		return array(null, $res);
	}

	/**
	 * Create a new true color image with specified width and height
	 *
	 * Requires:
	 * - PHP 4 >= 4.0.6 or PHP 5
	 * - GD >= 2.0.1
	 *
	 * Danger: The imageCreateTruecolor() function is defined even if the
	 * GD library does not support it! If called in this situation, the call
	 * will generate a "Fatal error", which cannot be catched. So we have to
	 * make sure to call this method ONLY if we are sure to have GD >= 2.0.1
	 * (which at the current stage of this module will always be the case,
	 * since this is the minimal required version).
	 *
	 * @return array GalleryStatus
	 *         res GD-resource
	 */
	public function imageCreateTruecolor($width, $height) {
		if (!function_exists('imageCreateTruecolor')) {
			return array(
				GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION),
				null,
			);
		}
		$res = @imagecreatetruecolor($width, $height);

		if (!$res) {
			return array(GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE), null);
		}

		return array(null, $res);
	}

	/**
	 * Helper functionality to see if a filename is readable
	 * @return boolean
	 */
	public function isValidFile($filename) {
		global $gallery;
		$platform =& $gallery->getPlatform();

		if (!$platform->file_exists($filename)
			|| !$platform->is_file($filename)
			|| !$platform->is_readable($filename)
		) {
			return false;
		}

		return true;
	}

	/**
	 * Check if a resource that is based on $filename is valid
	 *
	 * @return array GalleryStatus
	 *         resource GD resource
	 */
	public function checkResource($res, $filename) {
		if (!$res) {
			if (!$this->isValidFile($filename)) {
				return array(
					GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_PLATFORM_FAILURE),
					null,
				);
			}

			return array(
				GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_FILE_TYPE),
				null,
			);
		}

		return array(null, $res);
	}

	/**
	 * Create a new image from GIF file or URL.
	 *
	 * Requires
	 * - any PHP version
	 * - GD with GIF support
	 *
	 * @return array GalleryStatus
	 *         res GD-resource
	 */
	public function imageCreateFromGif($filename) {
		if (!function_exists('imageCreateFromGif')) {
			return array(
				GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION),
				null,
			);
		}
		$res                  = @imagecreatefromgif($filename);
		list($ret, $resource) = $this->checkResource($res, $filename);

		if ($ret) {
			return array($ret, null);
		}

		return array(null, $resource);
	}

	/**
	 * Create a new image from JPEG file or URL.
	 *
	 * Requires:
	 * - any PHP >= 3.0.16
	 * - GD >= 1.8 (for JPEG support)
	 *
	 * @return array GalleryStatus
	 *         res GD-resource
	 */
	public function imageCreateFromJpeg($filename) {
		$res = @imagecreatefromjpeg($filename);

		return $this->checkResource($res, $filename);
	}

	/**
	 * Create a new image from PNG file or URL.
	 *
	 * Requires:
	 * - any PHP >= 3.0.13
	 * - GD (with PNG support)
	 *
	 * @return array GalleryStatus
	 *         res GD-resource
	 */
	public function imageCreateFromPng($filename) {
		$res = @imagecreatefrompng($filename);

		return $this->checkResource($res, $filename);
	}

	/**
	 * Create a new image from WBMP (wap-bmp) file or URL.
	 *
	 * Requires:
	 * - PHP 4 >= 4.0.1 or PHP 5
	 * - GD >= 1.8 (for WBMP support)
	 *
	 * @return array GalleryStatus
	 *         res GD-resource
	 */
	public function imageCreateFromWbmp($filename) {
		$res = @imagecreatefromwbmp($filename);

		return $this->checkResource($res, $filename);
	}

	/**
	 * Create a new image from XBM file or URL.
	 *
	 * Requires:
	 * - PHP 4 >= 4.0.1 or PHP 5
	 * - GD
	 *
	 * @return array GalleryStatus
	 *         res GD-resource
	 */
	public function imageCreateFromXbm($filename) {
		$res = @imagecreatefromxbm($filename);

		return $this->checkResource($res, $filename);
	}

	/**
	 * Create a new image from XPM file or URL.
	 *
	 * Requires:
	 * - PHP 4 >= 4.0.1 or PHP 5
	 * - GD
	 *
	 * @return array GalleryStatus
	 *         res GD-resource
	 */
	public function imageCreateFromXpm($filename) {
		$res = @imageCreateFromXpm($filename);

		return $this->checkResource($res, $filename);
	}

	/**
	 * Output GIF image to file.
	 *
	 * Requires:
	 * - any PHP
	 * - GD with GIF support
	 *
	 * @return GalleryStatus
	 */
	public function imageGif($res, $filename) {
		if (!function_exists('imageGif')) {
			return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION);
		}
		$result = @imagegif($res, $filename);

		if ($result) {
			return null;
		}

		return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE);
	}

	/**
	 * Output JPEG image to file.
	 *
	 * Requires:
	 * - any PHP >= 3.0.16
	 * - GD >= 1.8
	 *
	 * @return GalleryStatus
	 */
	public function imageJpeg($res, $filename, $quality = 75) {
		if (!function_exists('imageJpeg')) {
			return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION);
		}
		$result = @imagejpeg($res, $filename, $quality);

		if ($result) {
			return null;
		}

		return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE);
	}

	/**
	 * Output PNG image to file.
	 *
	 * Requires:
	 * - any PHP 3>= 3.0.13
	 * - GD
	 *
	 * @return GalleryStatus
	 */
	public function imagePng($res, $filename) {
		if (!function_exists('imagePng')) {
			return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION);
		}
		$result = @imagepng($res, $filename);

		if ($result) {
			return null;
		}

		return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE);
	}

	/**
	 * Output WBMP image to file.
	 *
	 * Requires:
	 * - PHP 3>= 3.0.15 or PHP 4 >= 4.0.1 or PHP 5
	 * - GD >= 1.8 (for WBMP support)
	 *
	 * @return GalleryStatus
	 */
	public function imageWbmp($res, $filename) {
		if (!function_exists('imageWbmp')) {
			return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION);
		}
		$result = @imagewbmp($res, $filename);

		if ($result) {
			return null;
		}

		return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE);
	}

	/**
	 * Output XBM image to file.
	 *
	 * Requires:
	 * - PHP 5
	 *
	 * @return GalleryStatus
	 */
	public function imageXbm($res, $filename) {
		if (!function_exists('imageXbm')) {
			return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION);
		}
		$result = @imagexbm($res, $filename);

		if ($result) {
			return null;
		}

		return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE);
	}

	/**
	 * Copy and resize part of an image with resampling
	 *
	 * Requires:
	 * - PHP 4 >= 4.0.6 or PHP 5
	 * - GD >= 2.0.1
	 *
	 * @return GalleryStatus
	 */
	public function imageCopyResampled(
		$dstRes,
		$srcRes,
		$dstX,
		$dstY,
		$srcX,
		$srcY,
		$dstW,
		$dstH,
		$srcW,
		$srcH
	) {
		if (!function_exists('imageCopyResampled')) {
			return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION);
		}
		$result = @imagecopyresampled(
			$dstRes,
			$srcRes,
			$dstX,
			$dstY,
			$srcX,
			$srcY,
			$dstW,
			$dstH,
			$srcW,
			$srcH
		);

		if ($result) {
			return null;
		}

		return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE);
	}

	/**
	 * Copy and resize part of an image
	 *
	 * Requires:
	 * - any PHP
	 *
	 * @return GalleryStatus
	 */
	public function imageCopyResized(
		$dstRes,
		$srcRes,
		$dstX,
		$dstY,
		$srcX,
		$srcY,
		$dstW,
		$dstH,
		$srcW,
		$srcH
	) {
		$result = @imagecopyresized(
			$dstRes,
			$srcRes,
			$dstX,
			$dstY,
			$srcX,
			$srcY,
			$dstW,
			$dstH,
			$srcW,
			$srcH
		);

		if ($result) {
			return null;
		}

		return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE);
	}

	/**
	 * Copy and merge part of an image
	 *
	 * Requires:
	 * - PHP 4 >= 4.0.1 or PHP 5
	 *
	 * @return GalleryStatus
	 */
	public function imageCopyMerge($dstRes, $srcRes, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH, $pct) {
		$result = @imagecopymerge($dstRes, $srcRes, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH, $pct);

		if ($result) {
			return null;
		}

		return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE);
	}

	/**
	 * Copy part of an image
	 *
	 * Requires:
	 * - any PHP >= 3.0.6
	 *
	 * @return GalleryStatus
	 */
	public function imageCopy($dstRes, $srcRes, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH) {
		$result = @imagecopy($dstRes, $srcRes, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH);

		if ($result) {
			return null;
		}

		return GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE);
	}

	/**
	 * Get image width
	 *
	 * @return int the width of the image
	 */
	public function imageSx($res) {
		return array(null, @imagesx($res));
	}

	/**
	 * Get image height
	 *
	 * @return int the height of the image
	 */
	public function imageSy($res) {
		return array(null, @imagesy($res));
	}

	/**
	 * Copy and merge part of an image
	 *
	 * Requires:
	 * - PHP 4 >= 4.3.0 or PHP 5
	 *
	 * @return array GalleryStatus
	 *         resource new gd resource
	 */
	public function imageRotate($srcRes, $angle, $bgdColor) {
		if (!function_exists('imageRotate')) {
			return array(
				GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION),
				null,
			);
		}
		$res = @imagerotate($srcRes, $angle, $bgdColor);

		if ($res) {
			return array(null, $res);
		}

		return array(GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE), null);
	}

	/**
	 * Destroy an image
	 * @param object $res image resource
	 */
	public function imagedestroy($res) {
		@imagedestroy($res);
	}

	/**
	 * Set the flag to save full alpha channel information (as opposed to single-color transparency)
	 * when saving PNG images
	 *
	 * Requires:
	 * - PHP 4 >= 4.3.2 or PHP 5
	 *
	 * @param resource $res
	 * @return array GalleryStatus
	 *               bool true on success, false on failure
	 */
	public function imagesavealpha($res, $saveflag) {
		if (!function_exists('imagesavealpha')) {
			return array(
				GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION),
				null,
			);
		}

		return array(null, @imagesavealpha($res, $saveflag));
	}

	/**
	 * Set the blending mode for an image
	 *
	 * @param resource $res
	 * @param bool $blendmode
	 * @return bool true on success, false on failure
	 */
	public function imagealphablending($res, $blendmode) {
		return @imagealphablending($res, $blendmode);
	}

	/**
	 * Allocate a color for an image.
	 *
	 * Requires:
	 * - PHP 4 >= 4.3.2 or PHP 5
	 *
	 * @param resource $res
	 * @param int $red
	 * @param int $green
	 * @param int $blue
	 * @param int $alpha
	 * @return array GalleryStatus
	 *               int a color identifier, false on failure
	 */
	public function imagecolorallocatealpha($res, $red, $green, $blue, $alpha) {
		if (!function_exists('imagecolorallocatealpha')) {
			return array(
				GalleryCoreApi::error(ERROR_TOOLKIT_FAILURE | ERROR_UNSUPPORTED_OPERATION),
				null,
			);
		}

		return array(null, @imagecolorallocatealpha($res, $red, $green, $blue, $alpha));
	}

	/**
	 * Allocate a color for an image.
	 *
	 * @param resource $res
	 * @param int $red
	 * @param int $green
	 * @param int $blue
	 * @return int a color identifier, false on failure
	 */
	public function imagecolorallocate($res, $red, $green, $blue) {
		return @imagecolorallocate($res, $red, $green, $blue);
	}

	/**
	 * Draw a filled rectangle spanned by 2 points.
	 *
	 * @param resource $res
	 * @param int $x1 x coordinate of point 1
	 * @param int $y1 y coordinate of point 1
	 * @param int $x2 x coordinate of point 2
	 * @param int $y2 y coordinate of point 2
	 * @return bool true on success, false on failure
	 */
	public function imagefilledrectangle($res, $x1, $y1, $x2, $y2, $color) {
		return @imagefilledrectangle($res, $x1, $y1, $x2, $y2, $color);
	}

	/**
	 * Get / set the transparent color.
	 *
	 * @param resource $res
	 * @param int $color (optional) A color identifier
	 * @return The identifier of the new (or current, if none is specified) transparent color.
	 */
	public function imagecolortransparent($res, $color = null) {
		if ($color !== null) {
			return @imagecolortransparent($res, $color);
		}

		return @imagecolortransparent($res);
	}

	/**
	 * Convert a true color image to a palette image.
	 * @param resource $res
	 * @param bool $dither
	 * @param int $ncolors
	 * @return true on success, false on failure
	 */
	public function imagetruecolortopalette($res, $dither, $ncolors) {
		return @imagetruecolortopalette($res, $dither, $ncolors);
	}

	/**
	 * Get the index of the color of a pixel.
	 * @param resource $res
	 * @param int $x
	 * @param int $y
	 * @return int The index of the color
	 */
	public function imagecolorat($res, $x, $y) {
		return @imagecolorat($res, $x, $y);
	}

	/**
	 * set the color of a pixel.
	 * @param resource $res
	 * @param int $x
	 * @param int $y
	 * @param int $color A color identifier
	 * @return bool true on success, false on failure
	 */
	public function imagesetpixel($res, $x, $y, $color) {
		return @imagesetpixel($res, $x, $y, $color);
	}

	/**
	 * Get the colors for an index.
	 * @param resource $res
	 * @param int $index
	 * @return array('red' => int, 'green' => int, 'blue' => int, 'alpha' => int)
	 */
	public function imagecolorsforindex($res, $index) {
		return @imagecolorsforindex($res, $index);
	}
}
