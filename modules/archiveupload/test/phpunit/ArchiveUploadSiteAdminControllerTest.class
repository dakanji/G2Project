<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * ArchiveUpload controller tests
 * @package ArchiveUpload
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class ArchiveUploadSiteAdminControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'archiveupload.ArchiveUploadSiteAdmin');
	}

	public function setUp($x1 = null) {
		global $gallery;
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$ret = $this->_markPluginParametersForCleanup('module', 'archiveupload');

		if ($ret) {
			return $ret;
		}

		$gallery->_platform = new ArchiveUploadSiteAdminControllerTestPlatform();
	}

	public function testSaveGoodPath() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[unzipPath]', '/validPath/unzip');
		GalleryUtilities::putRequestVariable('form[removeMeta]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'archiveupload.ArchiveUploadSiteAdmin',
				),
				'status' => array(
					'saved' => 1,
				),
				'error' => array(),
			),
			$results
		);

		// Verify the settings went in properly
		list($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'archiveupload');

		if ($ret) {
			return $ret;
		}
		$this->assertEquals('/validPath/unzip', $params['unzipPath'], 'unzipPath');
		$this->assertEquals('1', $params['removeMeta'], 'removeMeta');
	}

	public function testSaveIncompletePath() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[unzipPath]', '/incompletePath/');
		GalleryUtilities::putRequestVariable('form[removeMeta]', 0);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'archiveupload.ArchiveUploadSiteAdmin',
				),
				'status' => array(
					'saved' => 1,
				),
				'error' => array(),
			),
			$results
		);

		// Verify the settings went in properly
		list($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'archiveupload');

		if ($ret) {
			return $ret;
		}
		$this->assertEquals('/incompletePath/unzip', $params['unzipPath'], 'unzipPath');
		$this->assertEquals('0', $params['removeMeta'], 'removeMeta');
	}

	public function testReset() {
		GalleryUtilities::putRequestVariable('form[action][reset]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'archiveupload.ArchiveUploadSiteAdmin',
				),
				'status' => array(),
				'error'  => array(),
			),
			$results
		);
	}

	public function testCancel() {
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'core.AdminPlugins',
				),
				'status' => array(),
				'error'  => array(),
			),
			$results
		);
	}

	public function testSaveTestErrorPath() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[unzipPath]', '/validPathBadBinary/unzip');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'archiveupload.ArchiveUploadSiteAdmin',
				),
				'status' => array(),
				'error'  => array('form[error][unzipPath][exec]'),
			),
			$results
		);
	}

	public function testSaveBadPath() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[unzipPath]', '/invalidPath/unzip');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'archiveupload.ArchiveUploadSiteAdmin',
				),
				'status' => array(),
				'error'  => array('form[error][unzipPath][badPath]'),
			),
			$results
		);
	}

	public function testNotExecutablePath() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[unzipPath]', '/notExecutablePath/unzip');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'archiveupload.ArchiveUploadSiteAdmin',
				),
				'status' => array(),
				'error'  => array('form[error][unzipPath][notExecutable]'),
			),
			$results
		);
	}

	public function testSaveMissingPath() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[unzipPath]', '');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'archiveupload.ArchiveUploadSiteAdmin',
				),
				'status' => array(),
				'error'  => array('form[error][unzipPath][missing]'),
			),
			$results
		);
	}
}

/**
 * Test platform for this test
 *
 * @package ArchiveUpload
 * @subpackage PHPUnit
 */
class ArchiveUploadSiteAdminControllerTestPlatform {
	public function getDirectorySeparator() {
		return '/';
	}

	public function file_exists($path) {
		switch ($path) {
			case '/validPath/unzip':
			case '/validPathBadBinary/unzip':
			case '/notExecutablePath/unzip':
			case '/incompletePath/':
			case '/incompletePath/unzip':
				return true;
		}

		return false;
	}

	public function is_dir($dir) {
		switch ($dir) {
			case '/validPath/':
			case '/validPathBadBinary/':
			case '/incompletePath/':
				return true;
		}

		return false;
	}

	public function is_file($path) {
		switch ($path) {
			case '/validPath/unzip':
			case '/validPathBadBinary/unzip':
			case '/notExecutablePath/unzip':
			case '/incompletePath/unzip':
				return true;
		}

		return false;
	}

	public function is_executable($path) {
		switch ($path) {
			case '/validPath/unzip':
			case '/validPathBadBinary/unzip':
			case '/incompletePath/unzip':
				return true;
		}

		return false;
	}

	public function unlink($args) {
		// do nothing
	}

	public function isRestrictedByOpenBaseDir($path) {
		return false;
	}

	public function exec($args) {
		switch ($args[0][0]) {
			case '/validPath/unzip':
			case '/incompletePath/unzip':
				return array(
					1,
					array(
						' Length   Method    Size  Ratio   Date   Time   CRC-32    Name',
						'--------  ------  ------- -----   ----   ----   ------    ----',
						'       5  Stored        5   0%  01-25-05 11:46  3bb935c6  test.txt',
					),
					array(),
				);

			default:
				return array(0, array(), array());
		}
	}
}
