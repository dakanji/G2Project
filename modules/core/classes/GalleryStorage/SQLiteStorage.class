<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/classes/GalleryStorage.class');

/**
 * SQLite extension of the GalleryStorage class.
 * This object implements the hooks for saving and restoring objects in an SQLite database.
 *
 * @package GalleryCore
 * @subpackage Storage
 * @author Brian Kirchoff <briankircho@gmail.com>
 * @version $Revision: 17580 $
 */
class SQLiteStorage extends GalleryStorage {

    function __construct($config) {
	$this->SQLiteStorage($config);
    }

    function SQLiteStorage($config) {
	$this->GalleryStorage($config);
	/**
	 * SQLite supports transactions, but they seem to hang on some pages and some select
	 * statements seem to hang too.
	 * @todo Research these issues and see if we can enable transactions for SQLite too.
	 */
	$this->_isTransactional = false;
    }

    /**
     * Return the type of this database
     * @return string
     */
    function getType() {
	return 'sqlite';
    }

    /**
     * @see GalleryStorage::removeAllMapEntries
     */
    function removeAllMapEntries($mapName, $useNonTransactionalConnection=false) {
	$extras =& $this->_getExtras();
	/* SQLite does not support TRUNCATE */
	return $extras->removeAllMapEntries($mapName, $useNonTransactionalConnection, false);
    }

    /**
     * @see GalleryStorage::getFunctionsSql
     */
    function getFunctionSql($functionName, $args) {
	static $has64bitRandomValues;

	switch ($functionName) {
	case 'CONCAT':
	    $sql = implode(' || ', $args);
	    break;

	case 'BITAND':
	    $sql = 'lower(' . $args[0] . ' & ' . $args[1] . ')';
	    break;

	case 'BIT_OR':
	    /*
	     * By default don't use BIT_OR aggregate, but OR together values in PHP.
	     */
	    return array(GalleryCoreApi::error(ERROR_UNSUPPORTED_OPERATION), null);
	    break;

	case 'AS':
	    $sql = '';
	    break;

	case 'SUBSTRING':
	    if (count($args) == 2) {
		$args[2] = 'LENGTH(' . $args[0] . ') - ' . $args[1] . ' + 1';
	    }
	    $sql = sprintf('SUBSTR(%s)', implode(', ', $args));
	    break;

	case 'RAND':
	    $sql = sprintf('RANDOM(%s)', empty($args) ? '' : $args[0]);
	    break;

	case 'RANDOM_INTEGER':
	    /* If the DB returns bigints, divide by 2^32 to get numbers in the desired range */
	    if (!isset($has64bitRandomValues) && $this->_db) {
		$sqliteVersion = $this->_db->GetOne('SELECT sqlite_version(*)');
		$has64bitRandomValues = version_compare('3.3.5', $sqliteVersion, '<=');
	    }
	    /*
	     * Go from -2^63..2^63-1 to a floating point number 0.0..1.0 and then scale it to the
	     * desired range. Also avoids the problem of 2's complement that abs(-2^63) won't go
	     * into the range of positive signed 64bit integers (same for 32bit).
	     */
	    $divisor = empty($has64bitRandomValues) ? '2147483648' : '9223372036854775808';
	    $sql = "CAST((abs(RANDOM()/$divisor)*2147483647) AS INTEGER)";
	    break;

	case 'LIMIT':
	    $sql = $args[1] . ' LIMIT ' . $args[0];
	    break;

	case 'CASE':
	    $sql = array();
	    while (count($args) > 1) {
		$sql[] = 'WHEN ' . array_shift($args) . ' THEN ' . array_shift($args);
	    }
	    $sql = 'CASE ' . implode(' ', $sql) . ' ELSE ' . $args[0] . ' END';
	    break;

	case 'LIKE':
	    $sql = $args[0] . ' LIKE ' . $args[1];
	    break;

	case 'MULTI_INSERT':
	    /*
	     * 0 - table name
	     * 1 - array of column names
	     * 2 - number of rows
	     */
	    $markers = GalleryUtilities::makeMarkers(sizeof($args[1]));
	    $rowList = array_fill(0, $args[2], 'SELECT ' . $markers);
	    $sql = 'INSERT INTO ' . $args[0] . ' (';
	    $sql .= implode(', ', $args[1]);
	    $sql .= ') ' . implode(' UNION ALL ', $rowList);
	    break;

	case 'AVG':
	    $sql = sprintf('AVG(%s)', $args[0]);
	    break;

	default:
	    return array(GalleryCoreApi::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__,
					       $functionName . ' ' . implode(' ', $args)), null);
	}

	return array(null, $sql);
    }

    /**
     * Get database version.
     * @return string version
     */
    function getVersion() {
	if ($this->_db) {
	    return $this->getType() . ' ' . $this->_db->GetOne('SELECT sqlite_version(*)');
	} else {
	    return $this->getType();
	}
    }

    /**
     * @see GalleryStorage::encodeBlob
     */
    function encodeBlob($blob) {
	return base64_encode($blob);
    }

    /**
     * @see GalleryStorage::decodeBlob
     */
    function decodeBlob($blob) {
	return base64_decode($blob);
    }

    /**
     * @see GalleryStorage::getOptimizeStatements
     */
    function _getOptimizeStatements() {
	return array('VACUUM `%s`;', 'ANALYZE `%s`;');
    }
}
?>
