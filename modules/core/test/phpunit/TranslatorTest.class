<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test Translator functionality.
 * Note: This file contains UTF-8 characters!
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17609 $
 */
class TranslatorTest extends GalleryTestCase {

    function TranslatorTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	list ($ret, $this->_locale) = $gallery->getActiveLocale();
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_markPluginParametersForCleanup('module', 'core');
	if ($ret) {
	    return $ret;
	}
	/* Disable browser check, set default lang != hardcoded lang, set dir perms */
	foreach (array('default.language' => 'fr_FR', 'language.useBrowserPref' => '0',
		       'permissions.directory' => '755') as $param => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'core', $param, $value);
	    if ($ret) {
		return $ret;
	    }
	    list ($ret, $actual) =
		GalleryCoreApi::getPluginParameter('module', 'core', $param);
	    if ($ret) {
		return $ret;
	    }
	    $this->assertEquals($value, $actual, $param);
	}
    }

    function tearDown() {
	global $gallery;
	$ret = $gallery->setActiveLocale($this->_locale);
	if ($ret) {
	    return $ret;
	}

	/* Init a new translator so that we reset our locale */
	$translator = new GalleryTranslator();
	$translator->init($this->_locale);

	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}
    }

    function testGetLocaleFromRequest() {
	global $gallery;
	$origLang = getenv('LANG');

	foreach (array('language.useBrowserPref' => '1')
		 as $param => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'core', $param, $value);
	    if ($ret) {
		return $ret;
	    }
	    list ($ret, $actual) =
		GalleryCoreApi::getPluginParameter('module', 'core', $param);
	    if ($ret) {
		return $ret;
	    }
	    $this->assertEquals($value, $actual, $param);
	}

	/* Init with a null language code and a valid accept language */
	$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'de_DE';
	$translator = new GalleryTranslator();
	list ($ret, $locale) = $translator->init();
	if ($ret) {
	    return $ret;
	}
	if (function_exists('dgettext')) {
	    $this->assertEquals('de_DE', getenv('LANG'), 'null init, valid language');
	} else {
	    $this->assertEquals($origLang, getenv('LANG'), 'null init, lang unchanged');
	}
	$this->assertEquals('de_DE', $locale, 'returned language code');

	/* Init with a null language code and a valid accept language/country */
	$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'pt_BR';
	$translator = new GalleryTranslator();
	$translator->init();
	if (function_exists('dgettext')) {
	    $this->assertEquals('pt_BR', getenv('LANG'), 'null init, valid language/country');
	} else {
	    $this->assertEquals($origLang, getenv('LANG'), 'null init, lang unchanged 2');
	}

	/* Invalid accept language/country, fall back to default */
	$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'xx_YY';
	$this->assertEquals(null, $translator->getLocaleFromRequest(), 'invalid locale');

	/* Invalid,valid accept language */
	$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'xx,no';
	$this->assertEquals('no_NO', $translator->getLocaleFromRequest(),
			    'invalid, valid language');

	/* Init with a real language code, thus browser pref has no meaning */
	$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'en_US';
	$translator = new GalleryTranslator();
	$translator->init('no_NO');
	if (function_exists('dgettext')) {
	    $this->assertEquals('no_NO', getenv('LANG'), 'valid init');
	} else {
	    $this->assertEquals($origLang, getenv('LANG'), 'valid init, lang unchanged');
	}
    }

    /* Use the Gallery::initTranslator method and make sure the activeLocale has changed  */
    function testGetLocaleFromRequest2() {
	global $gallery;
	$origLang = getenv('LANG');

	/*
	 * Remove the active language from the session, since it has precedence over the browser's
	 * accepted languages header
	 */
	$session =& $gallery->getSession();
	$session->remove('core.language');

	foreach (array('language.useBrowserPref' => '1')
		 as $param => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'core', $param, $value);
	    if ($ret) {
		return $ret;
	    }
	    list ($ret, $actual) =
		GalleryCoreApi::getPluginParameter('module', 'core', $param);
	    if ($ret) {
		return $ret;
	    }
	    $this->assertEquals($value, $actual, $param);
	}

	/* Init with a null language code and a valid accept language */
	$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'de';
	$gallery->_translator = null;
	$ret = $gallery->initTranslator();
	if ($ret) {
	    return $ret;
	}
	if (function_exists('dgettext')) {
	    $this->assertEquals('de_DE', getenv('LANG'), 'null init, valid language');
	} else {
	    $this->assertEquals($origLang, getenv('LANG'), 'null init, lang unchanged');
	}
	/* Verify that the activeLocale was changed */
	list ($ret, $langCode) = $gallery->getActiveLocale();
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals('de_DE', $langCode, 'active language code');
    }

    /*
     * The translator should init to the site-wide default language if session/request defines no
     * preference.  Also check GalleryTranslator::getActiveLocale.
     */
    function testInitToDefaultLanguage() {
	global $gallery;
	$session =& $gallery->getSession();
	$session->remove('core.language');

	/* Default language is set to fr_FR, browser check is off */
	$gallery->_translator = null;
	$ret = $gallery->initTranslator();
	if ($ret) {
	    return $ret;
	}
	list ($ret, $langCode) = $gallery->getActiveLocale();
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals('fr_FR', $langCode, 'from $gallery');
	$translator =& $gallery->getTranslator();
	$this->assertEquals('fr_FR', $translator->getActiveLocale(), 'from $translator');
    }

    /* If we init without database support, fallback to en_US */
    function testInitToHardcodedDefaultLanguage() {
	global $gallery;
	$session =& $gallery->getSession();
	$session->remove('core.language');
	$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'de';

	$gallery->_translator = null;
	$ret = $gallery->initTranslator(true);
	if ($ret) {
	    return $ret;
	}
	list ($ret, $langCode) = $gallery->getActiveLocale();
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals('en_US', $langCode);
    }

    /* If the session defines an active language, use it */
    function testInitToActiveLanguage() {
	global $gallery;

	$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'de_DE';
	$ret = $gallery->setActiveLocale('fr_FR');
	if ($ret) {
	    return $ret;
	}

	$gallery->_translator = null;
	$ret = $gallery->initTranslator();
	if ($ret) {
	    return $ret;
	}
	list ($ret, $langCode) = $gallery->getActiveLocale();
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals('fr_FR', $langCode);
    }

    function testInitWithoutDatabaseWithActiveLanguage() {
	global $gallery;

	$_SERVER['HTTP_ACCEPT_LANGUAGE'] = 'de_DE';
	$ret = $gallery->setActiveLocale('fr_FR');
	if ($ret) {
	    return $ret;
	}

	$gallery->_translator = null;
	$ret = $gallery->initTranslator(true);
	if ($ret) {
	    return $ret;
	}
	list ($ret, $langCode) = $gallery->getActiveLocale();
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals('fr_FR', $langCode);
    }

    function testTranslateSingular() {
	global $gallery;

	$domain = 'modules_core';
	$translator = new GalleryTranslator();
	$translator->init('es_AR');

	/* Singular text data */
	list ($ret, $results) =
	    $translator->translateDomain($domain, array('text' => 'Description'));
	if ($ret) {
	    return $ret;
	}
	if ($translator->canTranslate()) {
	    $this->assertEquals('Descripci&oacute;n', $results);
	} else {
	    $this->assertEquals('Description', $results);
	}

	/* Test something with some non-ascii in the result */
	$translator->init('fr_FR');
	list ($ret, $results) =
	    $translator->translateDomain($domain, array('text' => 'Create'));
	if ($ret) {
	    return $ret;
	}
	if ($translator->canTranslate()) {
	    $this->assertEquals('CrÃ©er', $results);
	} else {
	    $this->assertEquals('Create', $results);
	}
    }

    function testTranslatePlural() {
	global $gallery;

	$domain = 'modules_core';
	$translator = new GalleryTranslator();
	$translator->init('es_AR');

	/* Plural text data, count=1 */
	list ($ret, $results) =
	    $translator->translateDomain($domain,
					 array('one' => '%d user matches your filter',
					       'many' => '%d users match your filter',
					       'count' => 1,
					       'arg1' => 1));
	if ($ret) {
	    return $ret;
	}
	if ($translator->canTranslate()) {
	    $this->assertEquals('1 usuario coincide con su filtro', $results);
	} else {
	    $this->assertEquals('1 user matches your filter', $results);
	}

	/* Plural text data, count=2 (plural) */
	list ($ret, $results) =
	    $translator->translateDomain($domain,
					 array('one' => '%d user matches your filter',
					       'many' => '%d users match your filter',
					       'count' => 2,
					       'arg1' => 2));
	if ($ret) {
	    return $ret;
	}
	if ($translator->canTranslate()) {
	    if ($translator->canTranslatePlural()) {
		$this->assertEquals('2 usuarios coinciden con su filtro', $results);
	    } else {
		$this->assertEquals('2 usuario coincide con su filtro', $results);
	    }
	} else {
	    $this->assertEquals('2 users match your filter', $results);
	}
    }

    function testTranslateCharset() {
	global $gallery;

	$domain = 'modules_core';

	$translator = new GalleryTranslator();
	$translator->init('pt_BR');

	/* Singular text data */
	list ($ret, $results) =
	    $translator->translateDomain($domain, array('text' => 'Album'));
	if ($ret) {
	    return $ret;
	}
	if ($translator->canTranslate()) {
	    $this->assertEquals("\xC3\x81lbum", $results);
	} else {
	    $this->assertEquals('Album', $results);
	}
    }

    function testComment() {
	$translator = new GalleryTranslator();
	list ($ret, $locale) = $translator->init('en_US');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $text) = $translator->translateDomain('modules_core',
		array('text' => 'test <!-- old style hint, no longer removed -->',
		      'hint' => 'this is a hint to assist translators'));
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals('test <!-- old style hint, no longer removed -->', $text);
    }

    function testApiChange() {
	/* Core API 7.10 now allows simple string param, and 'args' array insead of 'arg1', etc */
	$translator = new GalleryTranslator();
	list ($ret, $locale) = $translator->init('en_US');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $text) = $translator->translateDomain('modules_core', 'Test');
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals('Test', $text);

	list ($ret, $text) = $translator->translateDomain('modules_core',
		array('text' => 'Test %s Test %s', 'args' => array('foo', 'bar')));
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals('Test foo Test bar', $text);
    }

    function testInstallTranslationsForPluginMoFilesInPoDirectory() {
	global $gallery;
	$platform = new UnitTestPlatform();

	$gallery->setConfig('data.gallery.locale', '/g2data/locale/');
	$modulePath = GalleryCoreApi::getCodeBasePath('modules/TranslatorTest/');
	$poPath = "${modulePath}po/";
	$platform->setReply('glob', array("${poPath}*.mo", null), array("${poPath}aa.mo"));
	$platform->setReply('file_exists', array('/g2data/locale/aa/LC_MESSAGES/'), true);
	$platform->setReply('is_dir', array('/g2data/locale/aa/LC_MESSAGES/'), true);
	$platform->setReply(
	    'copy',
	    array("${poPath}aa.mo", '/g2data/locale/aa/LC_MESSAGES/modules_TranslatorTest.mo'),
	    true);
	$gallery->setPlatform($platform);

	$ret = GalleryCoreApi::installTranslationsForPlugin('module', 'TranslatorTest');
	if ($ret) {
	    return $ret;
	}

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testInstallTranslationsForPluginMoFilesInLocaleDirectory() {
	global $gallery;
	$platform = new UnitTestPlatform();

	$gallery->setConfig('data.gallery.locale', '/g2data/locale/');
	$modulePath = GalleryCoreApi::getCodeBasePath('modules/TranslatorTest/');
	$poPath = "${modulePath}po/";
	$platform->setReply('glob', array("${poPath}*.mo", null), array());
	$platform->setReply('glob',
			    array("${modulePath}locale/*/LC_MESSAGES/*.mo", null),
			    array("${modulePath}locale/aa/LC_MESSAGES/aa.mo"));
	$platform->setReply('file_exists', array('/g2data/locale/aa/LC_MESSAGES/'), true);
	$platform->setReply('is_dir', array('/g2data/locale/aa/LC_MESSAGES/'), true);
	$platform->setReply(
	    'copy',
	    array("${modulePath}locale/aa/LC_MESSAGES/aa.mo",
		  '/g2data/locale/aa/LC_MESSAGES/modules_TranslatorTest.mo'),
	    true);
	$gallery->setPlatform($platform);

	$ret = GalleryCoreApi::installTranslationsForPlugin('module', 'TranslatorTest');
	if ($ret) {
	    return $ret;
	}

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testInstallTranslationsForPluginCreateDirectory() {
	global $gallery;
	$platform = new UnitTestPlatform();

	$gallery->setConfig('data.gallery.locale', '/g2data/locale/');
	$modulePath = GalleryCoreApi::getCodeBasePath('modules/TranslatorTest/');
	$poPath = "${modulePath}po/";
	$platform->setReply('glob', array("${poPath}*.mo", null), array("${poPath}aa.mo"));

	/* This next block is what GalleryUtilities::guaranteeDirExists requires */
	$platform->setReply('file_exists', array('/g2data/locale/aa/LC_MESSAGES/'), false);
	$platform->setReply('file_exists', array('/g2data/locale/aa/LC_MESSAGES/'), false);
	$platform->setReply('file_exists', array('/g2data/locale/aa'), false);
	$platform->setReply('file_exists', array('/g2data/locale'), false);
	$platform->setReply('file_exists', array('/g2data'), true);
	$platform->setReply('is_dir', array('/g2data'), true);
	$platform->setReply('mkdir', array('/g2data/locale', 755), true);
	$platform->setReply('mkdir', array('/g2data/locale/aa', 755), true);
	$platform->setReply('mkdir', array('/g2data/locale/aa/LC_MESSAGES/', 755), true);

	$platform->setReply(
	    'copy',
	    array($poPath . 'aa.mo', '/g2data/locale/aa/LC_MESSAGES/modules_TranslatorTest.mo'),
	    true);
	$gallery->setPlatform($platform);

	$ret = GalleryCoreApi::installTranslationsForPlugin('module', 'TranslatorTest');
	if ($ret) {
	    return $ret;
	}

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testRemoveTranslationsForPlugin() {
	global $gallery;
	$platform = new UnitTestPlatform();

	$gallery->setConfig('data.gallery.locale', '/g2data/locale/');
	$base = GalleryCoreApi::getCodeBasePath();
	$platform->setReply(
	    'glob',
	    array('/g2data/locale/*/LC_MESSAGES/modules_TranslatorTest.mo', null),
	    array('/g2data/locale/aa/LC_MESSAGES/modules_TranslatorTest.mo'));
	$platform->setReply(
	    'unlink',
	    array('/g2data/locale/aa/LC_MESSAGES/modules_TranslatorTest.mo'),
	    true);
	$gallery->setPlatform($platform);

	$ret = GalleryCoreApi::removeTranslationsForPlugin('module', 'TranslatorTest');
	if ($ret) {
	    return $ret;
	}

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testInstallTranslationsForLocale() {
	global $gallery;
	$platform = new UnitTestPlatform();

	$gallery->setConfig('data.gallery.locale', '/g2data/locale/');
	$codeBase = GalleryCoreApi::getCodeBasePath();
	$platform->setReply('glob', array("${codeBase}modules/*/po", null),
			    array("${codeBase}modules/test/po"));
	$platform->setReply('file_exists',
		array('/g2data/locale/wx_YZ/LC_MESSAGES/modules_test.mo'), false);
	$platform->setReply('file_exists',
		array("${codeBase}modules/test/po/wx_YZ.mo"), false);
	$platform->setReply('file_exists',
		array('/g2data/locale/wx/LC_MESSAGES/modules_test.mo'), false);
	$platform->setReply('file_exists',
		array("${codeBase}modules/test/po/wx.mo"), true);

	/* This next block is what GalleryUtilities::guaranteeDirExists requires */
	$platform->setReply('file_exists', array('/g2data/locale/wx/LC_MESSAGES/'), false);
	$platform->setReply('file_exists', array('/g2data/locale/wx/LC_MESSAGES/'), false);
	$platform->setReply('file_exists', array('/g2data/locale/wx'), false);
	$platform->setReply('file_exists', array('/g2data/locale'), true);
	$platform->setReply('is_dir', array('/g2data/locale'), true);
	$platform->setReply('mkdir', array('/g2data/locale/wx', 755), true);
	$platform->setReply('mkdir', array('/g2data/locale/wx/LC_MESSAGES/', 755), true);

	$platform->setReply('copy',
		array("${codeBase}modules/test/po/wx.mo",
		      '/g2data/locale/wx/LC_MESSAGES/modules_test.mo'),
		true);

	$platform->setReply('glob', array("${codeBase}themes/*/po", null),
			    array("${codeBase}themes/matrix/po"));
	$platform->setReply('file_exists',
		array('/g2data/locale/wx_YZ/LC_MESSAGES/themes_matrix.mo'), false);
	$platform->setReply('file_exists',
		array("${codeBase}themes/matrix/po/wx_YZ.mo"), false);
	$platform->setReply('file_exists',
		array('/g2data/locale/wx/LC_MESSAGES/themes_matrix.mo'), true);

	$gallery->setPlatform($platform);

	$ret = GalleryCoreApi::installTranslationsForLocale('wx_YZ');
	if ($ret) {
	    return $ret;
	}

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testInstallTranslationsForLocaleNoParam() {
	global $gallery;
	$platform = new UnitTestPlatform();
	$translator =& $gallery->getTranslator();

	$gallery->setConfig('data.gallery.locale', '/g2data/locale/');
	$codeBase = GalleryCoreApi::getCodeBasePath();
	$locale = $translator->getActiveLocale();
	if ($locale != 'en_US') {
	    $language = substr($locale, 0, 2);
	    $platform->setReply('glob', array("${codeBase}modules/*/po", null),
				array("${codeBase}modules/test/po"));
	    $platform->setReply('file_exists',
		    array("/g2data/locale/$locale/LC_MESSAGES/modules_test.mo"), true);
	    $platform->setReply('file_exists',
		    array("/g2data/locale/$language/LC_MESSAGES/modules_test.mo"), true);
	    $platform->setReply('glob', array("${codeBase}themes/*/po", null), array());
	}

	$gallery->setPlatform($platform);

	$ret = GalleryCoreApi::installTranslationsForLocale();
	if ($ret) {
	    return $ret;
	}

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testInstallTranslationsForLocaleEnUS() {
	global $gallery;
	$platform = new UnitTestPlatform();
	$gallery->setPlatform($platform);

	$ret = GalleryCoreApi::installTranslationsForLocale('en_US');
	if ($ret) {
	    return $ret;
	}

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testGetLocaleFromLocale() {
	global $gallery;
	$translator =& $gallery->getTranslator();

	$this->assertEquals(array(null, 'en'), $translator->getLocaleFromId('en_US'), 
	    'en_US');
	$this->assertEquals(array(null, 'en_GB'), $translator->getLocaleFromId('en_GB'), 
	    'en_GB');
    }

    function testGetLocaleFromLocaleChinese() {
	global $gallery;
	$translator =& $gallery->getTranslator();

	$this->assertEquals(array(null, 'zh_CN'), $translator->getLocaleFromId('zh_CN'), 
	    'zh_CN');
	$this->assertEquals(array(null, 'zh_TW'), $translator->getLocaleFromId('zh_TW'), 
	    'zh_TW');
    }

    function testGetLanguageAndCountryFromLocale() {
	global $gallery;
	$translator =& $gallery->getTranslator();

	$this->assertEquals(array(null, 'en', 'US'), 
	    $translator->getLanguageAndCountryFromLocale('en'), 'en_US');
	$this->assertEquals(array(null, 'en', 'GB'), 
	    $translator->getLanguageAndCountryFromLocale('en_GB'), 'en_GB');
    }
}
?>
