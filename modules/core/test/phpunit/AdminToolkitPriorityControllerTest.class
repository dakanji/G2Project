<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * AdminToolkitPriority controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class AdminToolkitPriorityControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'core.AdminToolkitPriority');
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::registerToolkitOperation(
			'TestToolkitPriority',
			array('test/type'),
			'test-operation',
			array(),
			'test-description',
			'test/outputType',
			30
		);

		if ($ret) {
			return $ret;
		}
		$this->_markToolkitForCleanup('TestToolkitPriority');

		$ret = GalleryCoreApi::registerToolkitOperation(
			'TestToolkitPriority2',
			array('test/type'),
			'test-operation',
			array(),
			'test-description',
			'test/outputType',
			27
		);

		if ($ret) {
			return $ret;
		}
		$this->_markToolkitForCleanup('TestToolkitPriority2');
	}

	public function testReset() {
		GalleryUtilities::putRequestVariable('form[action][reset]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'return'   => 0,
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'core.AdminToolkitPriority',
				),
				'status' => array(),
				'error'  => array(),
			),
			$results
		);
	}

	public function testSave() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[priority][27]', 'TestToolkitPriority');
		GalleryUtilities::putRequestVariable('form[priority][30]', 'TestToolkitPriority2');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'return'   => 0,
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'core.AdminToolkitPriority',
				),
				'status' => array(
					'saved' => 1,
				),
				'error' => array(),
			),
			$results
		);

		list($ret, $list) = GalleryCoreApi::getRedundantToolkitPriorities();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(count($list) >= 2, 'count');
		$this->assertEquals(27, $list['TestToolkitPriority'], 'TestToolkitPriority');
		$this->assertEquals(30, $list['TestToolkitPriority2'], 'TestToolkitPriority2');
	}
}

/**
 * Mock toolkit
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class TestToolkitPriority {
}

/**
 * Mock toolkit
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class TestToolkitPriority2 {
}
