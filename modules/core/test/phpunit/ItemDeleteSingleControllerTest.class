<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/ItemDeleteSingle.inc');

/**
 * ItemDeleteSingle Controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Felix Rabinovich <felix@rabinovich.org>
 * @version $Revision: 17580 $
 */
class ItemDeleteSingleControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'core.ItemDeleteSingle');
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		// Create an album to hold all of the test items
		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_album);
	}

	/**
	 * Create a random item and verify that we can delete it and stay on the same page
	 */
	public function testDeleteItem() {
		global $gallery;

		// Create a random item
		list($ret, $item) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		// Use valid inputs - we are deleting a photo in an album view
		GalleryUtilities::putRequestVariable('itemId', $item->getId());
		GalleryUtilities::putRequestVariable('pageId', $this->_album->getId());

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$results = GalleryUtilities::strArrToIntArr($results);
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'core.ShowItem',
					'itemId' => $this->_album->getId(),
				),
				'status' => array(),
				'error'  => array(),
			),
			$results,
			'Delete Item'
		);

		// Make sure the item is actually gone
		$ret = $this->_verifyMissing($item->getId());

		if ($ret) {
			return $ret;
		}
	}

	/**
	 * Create a random item and verify that we can delete it and move to the parent page
	 */
	public function testDeletePageItem() {
		// Create a random item
		list($ret, $item) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		// Use valid inputs - we are deleting an item that owns the page
		GalleryUtilities::putRequestVariable('itemId', $item->getId());
		GalleryUtilities::putRequestVariable('pageId', $item->getId());

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'core.ShowItem',
					'itemId' => $this->_album->getId(),
				),
				'status' => array(),
				'error'  => array(),
			),
			$results
		);

		// Make sure the item is actually gone
		$ret = $this->_verifyMissing($item->getId());

		if ($ret) {
			return $ret;
		}
	}

	/**
	 * Create a random album and verify that we can delete it.
	 */
	public function testDeleteAlbum() {
		global $gallery;

		// Create a random sub album
		list($ret, $album) = $this->_createRandomAlbum($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		// Use valid inputs - we are deleting an album that owns the page
		GalleryUtilities::putRequestVariable('itemId', $album->getId());
		GalleryUtilities::putRequestVariable('pageId', $album->getId());

		// Perform the request and verify that we succeeded
		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'   => 'core.ShowItem',
					'itemId' => $this->_album->getId(),
				),
				'status' => array(),
				'error'  => array(),
			),
			$results
		);

		// Make sure the album is actually gone
		$ret = $this->_verifyMissing($album->getId());

		if ($ret) {
			return $ret;
		}
	}

	/**
	 * Verify that we can't delete items without the right permissions
	 */
	public function testDeleteItemWithoutPermission() {
		global $gallery;

		list($ret, $item) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::removeItemPermissions($item->getId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$item->getId(),
			$gallery->getActiveUserId(),
			'core.view'
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $item->getId());

		// Perform the request and verify that we failed
		$results = $this->handleRequest(ERROR_PERMISSION_DENIED | GALLERY_ERROR);

		// make sure it's still there
		list($ret, $item) = $item->refresh();

		if ($ret) {
			return $ret;
		}
	}

	/**
	 * Test deleting the root album. We should get a bad parameter error
	 */
	public function testDeleteRootAlbum() {
		global $gallery;

		// Use invalid inputs
		GalleryUtilities::putRequestVariable('itemId', $this->_getRootId());

		// Perform the request and verify that we failed
		$results = $this->handleRequest(ERROR_BAD_PARAMETER | GALLERY_ERROR);
	}

	/**
	 * Test deleting a random item that doesn't exist.  We should get a
	 * permission denied (since the permission check happens before we even
	 * verify that it's a valid item to prevent information leakage)
	 */
	public function testDeleteBogusItem() {
		// Use invalid inputs
		GalleryUtilities::putRequestVariable('itemId', 1234567890);

		// Perform the request and verify that we failed
		$results = $this->handleRequest(ERROR_MISSING_OBJECT);
	}
}
