<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test Map functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class MapTest extends GalleryTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function testAddNull() {
		// Ensure addMapEntry() method will accept null input values..

		$name = 'test-' . mt_rand();
		$ret  = GalleryCoreApi::addMapEntry(
			'GalleryToolkitOperationMap',
			array(
				'name'           => $name,
				'parametersCrc'  => 'test',
				'outputMimeType' => 'test',
			)
		);
		$this->assertTrue($ret->getErrorCode() & ERROR_BAD_PARAMETER, 'expect error for missing key');

		if ($ret && !($ret->getErrorCode() & ERROR_BAD_PARAMETER)) {
			return $ret;
		}

		$ret = GalleryCoreApi::addMapEntry(
			'GalleryToolkitOperationMap',
			array(
				'name'           => $name,
				'parametersCrc'  => 'test',
				'outputMimeType' => 'test',
				'description'    => null,
			)
		);
		$this->assertTrue(!$ret, 'should succeed with null value');

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::removeMapEntry(
			'GalleryToolkitOperationMap',
			array(
				'name' => $name,
			)
		);

		if ($ret) {
			return $ret;
		}
	}

	public function testUpdateNull() {
		// Ensure updateMapEntry() method will accept null input values..
		$name = 'test-' . mt_rand();
		$ret  = GalleryCoreApi::addMapEntry(
			'GalleryToolkitOperationMap',
			array(
				'name'           => $name,
				'parametersCrc'  => 'test',
				'outputMimeType' => 'test',
				'description'    => 'test',
			)
		);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::updateMapEntry(
			'GalleryToolkitOperationMap',
			array(
				'name'           => $name,
				'outputMimeType' => 'test',
			),
			array(
				'description' => null,
			)
		);
		$this->assertTrue(!$ret, 'should succeed setting null value');

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::updateMapEntry(
			'GalleryToolkitOperationMap',
			array(
				'name'        => $name,
				'description' => null,
			),
			array(
				'parametersCrc' => 'changed',
			)
		);
		$this->assertTrue(!$ret, 'should succeed matching null value');

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::removeMapEntry(
			'GalleryToolkitOperationMap',
			array(
				'name' => $name,
			)
		);

		if ($ret) {
			return $ret;
		}
	}
}
