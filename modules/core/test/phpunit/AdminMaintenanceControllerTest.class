<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/AdminMaintenance.inc');

/**
 * AdminMaintenance controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class AdminMaintenanceControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'core.AdminMaintenance');
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		$path = 'modules/core/test/phpunit/AdminMaintenanceControllerTest.class';
		$ret  = GalleryCoreApi::registerFactoryImplementation(
			'MaintenanceTask',
			'AdminMaintenanceControllerTestTaskSuccess',
			'AdminMaintenanceControllerTestTaskSuccess',
			$path,
			'coreTest',
			null
		);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::registerFactoryImplementation(
			'MaintenanceTask',
			'AdminMaintenanceControllerTestTaskProgressBar',
			'AdminMaintenanceControllerTestTaskProgressBar',
			$path,
			'coreTest',
			null
		);

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::registerFactoryImplementation(
			'MaintenanceTask',
			'AdminMaintenanceControllerTestTaskFail',
			'AdminMaintenanceControllerTestTaskFail',
			$path,
			'coreTest',
			null
		);

		if ($ret) {
			return $ret;
		}
		$this->_markFactoryModuleForCleanup('coreTest');
	}

	public function tearDown() {
		foreach (array(
			'AdminMaintenanceControllerTestTaskFail',
			'AdminMaintenanceControllerTestTaskSuccess',
			'AdminMaintenanceControllerTestTaskProgressBar',
		) as $taskId) {
			$ret = GalleryCoreApi::removeMapEntry(
				'GalleryMaintenanceMap',
				array(
					'taskId' => $taskId,
				)
			);

			if ($ret) {
				// Don't return early here, give the loop a chance to try to clear all tasks
				$this->failWithStatus($ret);
			}
		}

		$ret = parent::tearDown();

		if ($ret) {
			$this->failWithStatus($ret);
		}
	}

	public function testRunTaskSuccess() {
		GalleryUtilities::putRequestVariable('form[action][runTask]', 1);
		GalleryUtilities::putRequestVariable('taskId', 'AdminMaintenanceControllerTestTaskSuccess');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'core.AdminMaintenance',
				),
				'status' => array(
					'run' => array(
						'taskId'  => 'AdminMaintenanceControllerTestTaskSuccess',
						'success' => true,
					),
				),
				'error' => array(),
			),
			$results
		);

		list($ret, $info) = MaintenanceHelper_simple::fetchLastRun('AdminMaintenanceControllerTestTaskSuccess');

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($info['runId'] > 0);
		$this->assertTrue($info['timestamp'] > time() - 2);  // assert that it's recent
		$this->assertTrue($info['success']);
		$this->assertEquals(array('success details'), $info['details']);
	}

	public function testRunTaskProgressBar() {
		global $gallery;
		GalleryUtilities::putRequestVariable('form[action][runTask]', 1);
		GalleryUtilities::putRequestVariable(
			'taskId',
			'AdminMaintenanceControllerTestTaskProgressBar'
		);

		$mockAdapter               = new MockTemplateAdapter();
		$gallery->_templateAdapter =& $mockAdapter;
		$mockUrlGenerator          = new AdminMaintenanceControllerTestUrlGenerator();
		$gallery->_urlGenerator    =& $mockUrlGenerator;

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'core.ProgressBar',
				),
				'status' => array(),
				'error'  => array(),
			),
			$results,
			'Run Progress Bar - Main'
		);

		// Assert that we have 1 callback in the queue
		$this->assertEquals(
			1,
			$mockAdapter->getCallbackCount(),
			'Run Progress Bar - One Callback in Queue'
		);

		// Run the tasks
		$ret = $mockAdapter->runCallbacks();

		if ($ret) {
			return $ret;
		}

		// Assert that we saw what we expected
		$this->assertEquals(
			array(
				'0',
				'50',
				'100',
				'complete:view=core.SiteAdmin,subView=core.AdminMaintenance',
			),
			$mockAdapter->getProgressBarDump(),
			'Run Progress Bar - Correct Display'
		);

		list($ret, $info) = MaintenanceHelper_simple::fetchLastRun('AdminMaintenanceControllerTestTaskProgressBar');

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($info['runId'] > 0);
		$this->assertTrue($info['timestamp'] > time() - 2);  // assert that it's recent
		$this->assertTrue($info['success']);
		$this->assertEquals(array('success details'), $info['details']);
	}

	public function testRunTaskProgressBarFail() {
		global $gallery;
		GalleryUtilities::putRequestVariable('form[action][runTask]', 1);
		GalleryUtilities::putRequestVariable(
			'taskId',
			'AdminMaintenanceControllerTestTaskProgressBar'
		);
		GalleryUtilities::putRequestVariable('forceTaskToFail', 1);

		$mockAdapter               = new MockTemplateAdapter();
		$gallery->_templateAdapter =& $mockAdapter;
		$mockUrlGenerator          = new AdminMaintenanceControllerTestUrlGenerator();
		$gallery->_urlGenerator    =& $mockUrlGenerator;

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'core.ProgressBar',
				),
				'status' => array(),
				'error'  => array(),
			),
			$results,
			'Progress Bar Fail - Main'
		);

		// Assert that we have 1 callback in the queue
		$this->assertEquals(
			1,
			$mockAdapter->getCallbackCount(),
			'Progress Bar Fail - One Callback in Queue'
		);

		// Run the tasks
		$ret = $mockAdapter->runCallbacks();

		if ($ret) {
			return $ret;
		}

		// Assert that we saw what we expected
		$this->assertEquals(
			array(
				'0',
				'50',
				'100',
				'complete:view=core.SiteAdmin,subView=core.AdminMaintenance',
			),
			$mockAdapter->getProgressBarDump(),
			'Progress Bar Fail - Correct Display'
		);

		list($ret, $info) = MaintenanceHelper_simple::fetchLastRun(
			'AdminMaintenanceControllerTestTaskProgressBar'
		);

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($info['runId'] > 0);
		$this->assertTrue($info['timestamp'] > time() - 2);  // assert that it's recent
		$this->assertTrue(!$info['success']);
		$this->assertEquals(array('fail details'), $info['details']);
	}

	public function testRunTaskProgressBarError() {
		global $gallery;
		GalleryUtilities::putRequestVariable('form[action][runTask]', 1);
		GalleryUtilities::putRequestVariable(
			'taskId',
			'AdminMaintenanceControllerTestTaskProgressBar'
		);
		GalleryUtilities::putRequestVariable('forceTaskToError', 1);

		$mockAdapter               = new MockTemplateAdapter();
		$gallery->_templateAdapter =& $mockAdapter;
		$mockUrlGenerator          = new AdminMaintenanceControllerTestUrlGenerator();
		$gallery->_urlGenerator    =& $mockUrlGenerator;

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view' => 'core.ProgressBar',
				),
				'status' => array(),
				'error'  => array(),
			),
			$results,
			'Progress Bar Error - Main'
		);

		// Assert that we have 1 callback in the queue
		$this->assertEquals(
			1,
			$mockAdapter->getCallbackCount(),
			'Progress Bar Error - One Callback in Queue'
		);

		// Run the tasks
		$ret = $mockAdapter->runCallbacks();

		if ($ret) {
			if ($ret->getErrorCode() & ERROR_UNKNOWN) {
				// This is what we expected
			} else {
				return $ret;
			}
		} else {
			$this->assertFalse(true, 'The task did not fail');
		}

		// Assert that we saw what we expected
		$this->assertEquals(
			array('0', '50', 'error'),
			$mockAdapter->getProgressBarDump()
		);

		list($ret, $info) = MaintenanceHelper_simple::fetchLastRun('AdminMaintenanceControllerTestTaskProgressBar');

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($info['runId'] > 0);
		$this->assertTrue($info['timestamp'] > time() - 2);  // assert that it's recent
		$this->assertTrue(!$info['success']);
		$this->assertTrue(strstr($info['details'], 'ERROR_UNKNOWN'));
	}

	public function testRunTaskFail() {
		GalleryUtilities::putRequestVariable('form[action][runTask]', 1);
		GalleryUtilities::putRequestVariable('taskId', 'AdminMaintenanceControllerTestTaskFail');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.SiteAdmin',
					'subView' => 'core.AdminMaintenance',
				),
				'status' => array(
					'run' => array(
						'taskId'  => 'AdminMaintenanceControllerTestTaskFail',
						'success' => false,
					),
				),
				'error' => array(),
			),
			$results
		);

		list($ret, $info) = MaintenanceHelper_simple::fetchLastRun('AdminMaintenanceControllerTestTaskFail');

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($info['runId'] > 0);
		$this->assertTrue($info['timestamp'] > time() - 2);  // assert that it's recent
		$this->assertTrue(!$info['success']);
		$this->assertEquals(array('fail details'), $info['details']);
	}
}

class AdminMaintenanceControllerTestTaskSuccess extends MaintenanceTask {
	public function getInfo() {
		return array(
			'title'       => 'AdminMaintenanceControllerTestTaskSuccess title',
			'description' => 'AdminMaintenanceControllerTestTaskSuccess description',
			'l10Domain'   => 'modules_core',
		);
	}

	public function run() {
		return array(null, true, array('success details'));
	}
}

class AdminMaintenanceControllerTestTaskProgressBar extends MaintenanceTask {
	public function getInfo() {
		return array(
			'title'       => 'AdminMaintenanceControllerTestTaskProgressBar title',
			'description' => 'AdminMaintenanceControllerTestTaskProgressBar description',
			'l10Domain'   => 'modules_core',
		);
	}

	public function run() {
		global $gallery;
		$templateAdapter =& $gallery->getTemplateAdapter();

		$success = !GalleryUtilities::getRequestVariables('forceTaskToFail');

		$templateAdapter->updateProgressBar('ignored', 'ignored', 0);
		$templateAdapter->updateProgressBar('ignored', 'ignored', 50);

		if (GalleryUtilities::getRequestVariables('forceTaskToError')) {
			return array(GalleryCoreApi::error(ERROR_UNKNOWN), null, null);
		}

		$templateAdapter->updateProgressBar('ignored', 'ignored', 100);

		return array(
			null,
			$success,
			array(($success ? 'success' : 'fail') . ' details'),
		);
	}

	public function requiresProgressBar() {
		return true;
	}
}

class AdminMaintenanceControllerTestTaskFail extends MaintenanceTask {
	public function getInfo() {
		return array(
			'title'       => 'AdminMaintenanceControllerTestTaskFail title',
			'description' => 'AdminMaintenanceControllerTestTaskFail description',
			'l10Domain'   => 'modules_core',
		);
	}

	public function run() {
		return array(null, false, array('fail details'));
	}
}

class AdminMaintenanceControllerTestUrlGenerator {
	public function generateUrl($params = array(), $options = array()) {
		$buf = array();

		foreach ($params as $key => $value) {
			$buf[] = "$key=$value";
		}

		return implode(',', $buf);
	}
}
