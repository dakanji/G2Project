<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * UserChangePassword controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17627 $
 */
class UserChangePasswordControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'core.UserChangePassword');
	}

	public function setUp($x1 = null) {
		global $gallery;
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_user) = $this->_createUser(
			array(
				'hashedPassword' => GalleryUtilities::md5Salt('TestPassword'),
			)
		);

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_user);

		$gallery->setActiveUser($this->_user);
	}

	public function testCancel() {
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserPreferences',
				),
				'status' => array(),
				'error'  => array(),
			),
			$results
		);
	}

	public function testUndo() {
		GalleryUtilities::putRequestVariable('form[action][undo]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserChangePassword',
				),
				'status' => array(),
				'error'  => array(),
			),
			$results
		);
	}

	public function testChangePassword() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[currentPassword]', 'TestPassword');
		GalleryUtilities::putRequestVariable('form[password1]', 'newPassword');
		GalleryUtilities::putRequestVariable('form[password2]', 'newPassword');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserChangePassword',
				),
				'status' => array(
					'changedPassword' => 1,
				),
				'error' => array(),
			),
			$results
		);

		// Load back the user object and make sure the data got saved
		list($ret, $this->_user) = $this->_user->refresh();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($this->_user->isCorrectPassword('newPassword'));
	}

	public function testPasswordWithEntity() {
		global $gallery;
		list($ret, $user) = $this->_createRandomUser(null, 'pass&word');

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($user);
		$gallery->setActiveUser($user);

		// Old and new password has a HTML entity
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[currentPassword]', 'pass&word');
		GalleryUtilities::putRequestVariable('form[password1]', 'new<Password"');
		GalleryUtilities::putRequestVariable('form[password2]', 'new<Password"');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserChangePassword',
				),
				'status' => array(
					'changedPassword' => 1,
				),
				'error' => array(),
			),
			$results
		);

		// Load back the user object and make sure the data got saved
		list($ret, $user) = $user->refresh();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($user->isCorrectPassword('new<Password"'));
	}

	public function testEditPasswordMismatch() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[currentPassword]', 'TestPassword');
		GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
		GalleryUtilities::putRequestVariable('form[email]', 'email');
		GalleryUtilities::putRequestVariable('form[password1]', 'a');
		GalleryUtilities::putRequestVariable('form[password2]', 'b');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserChangePassword',
				),
				'status' => array(),
				'error'  => array('form[error][password2][mismatch]'),
			),
			$results
		);
	}

	public function testEditPasswordWrongCurrentPassword() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[currentPassword]', 'WRONG!');
		GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
		GalleryUtilities::putRequestVariable('form[email]', 'email');
		GalleryUtilities::putRequestVariable('form[password1]', 'a');
		GalleryUtilities::putRequestVariable('form[password2]', 'a');

		$ret = $this->_registerEventListener('Gallery::FailedLogin');

		if ($ret) {
			return $ret;
		}

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserChangePassword',
				),
				'status' => array(),
				'error'  => array('form[error][currentPassword][incorrect]'),
			),
			$results
		);

		// Load back the user object and make sure the pass is unchanged
		list($ret, $this->_user) = $this->_user->refresh();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($this->_user->isCorrectPassword('TestPassword'));

		// Verify our event got posted
		$this->assertEventFired(
			'Gallery::FailedLogin',
			null,
			array(
				'userName' => $this->_user->getUserName(),
			)
		);
	}

	public function testEditPasswordMissingCurrentPassword() {
		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[currentPassword]', '');
		GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
		GalleryUtilities::putRequestVariable('form[email]', 'email');
		GalleryUtilities::putRequestVariable('form[password1]', 'a');
		GalleryUtilities::putRequestVariable('form[password2]', 'a');

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.UserAdmin',
					'subView' => 'core.UserChangePassword',
				),
				'status' => array(),
				'error'  => array('form[error][currentPassword][missing]'),
			),
			$results
		);

		// Load back the user object and make sure the pass is unchanged
		list($ret, $this->_user) = $this->_user->refresh();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue($this->_user->isCorrectPassword('TestPassword'));
	}

	public function testChangeGuestPassword() {
		global $gallery;
		$gallery->setConfig('anonymousUserId', $this->_user->getId());

		GalleryUtilities::putRequestVariable('form[action][save]', 1);
		GalleryUtilities::putRequestVariable('form[currentPassword]', 'TestPassword');
		GalleryUtilities::putRequestVariable('form[password1]', 'newPassword');
		GalleryUtilities::putRequestVariable('form[password2]', 'newPassword');

		$this->handleRequest(ERROR_PERMISSION_DENIED);
	}
}
