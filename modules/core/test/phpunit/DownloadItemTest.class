<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test DownloadItem functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class DownloadItemTest extends GalleryTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		global $gallery;
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_item) = $this->_createRandomDataItem($this->_getRootId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_item);

		list($ret, $this->_view) = GalleryView::doStatic()->loadView('core.DownloadItem');

		if ($ret) {
			return $ret;
		}
		$this->_userId   = $gallery->getActiveUserId();
		$gallery->_phpVm = new DownloadItemTestPhpVm();
	}

	public function _download() {
		set_error_handler('DownloadItemTest_error_handler');
		ob_start();
		$ret    = $this->_view->renderImmediate(array(), array());
		$output = ob_get_contents();
		ob_end_clean();

		return array($ret, $output);
	}

	public function testNoItemId() {
		list($ret, $output) = $this->_download();
		$this->assertTrue($ret && $ret->getErrorCode() & ERROR_BAD_PARAMETER, 'expected error');
	}

	public function testMaliciousFilename() {
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		GalleryUtilities::putRequestVariable('fileName', 'voodoo');

		list($ret, $output) = $this->_download();

		if ($ret) {
			$this->assertTrue($ret->getErrorCode() & ERROR_MISSING_OBJECT, 'expected error 1');

			if (!($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
				return $ret;
			}
		} else {
			$this->fail('expected error 1, got no error');
		}

		// Now add the required permissions to see the item
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.view'
		);

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.viewSource'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $output) = $this->_download();

		if ($ret) {
			$this->assertTrue($ret->getErrorCode() & ERROR_BAD_PARAMETER, 'expected error 2');

			if (!($ret->getErrorCode() & ERROR_BAD_PARAMETER)) {
				return $ret;
			}
		} else {
			$this->fail('expected error 2, got no error');
		}
	}

	public function testItemPermission() {
		// Item needs core.viewSource
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.view'
		);

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.viewResizes'
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		list($ret, $output) = $this->_download();
		$this->assertTrue($ret && $ret->getErrorCode() & ERROR_PERMISSION_DENIED, 'expected error');

		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.viewSource'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $output) = $this->_download();
		$this->assertTrue(!$ret, 'expected success');
	}

	public function testPreferredPermission() {
		// Preferred needs core.viewSource
		list($ret, $derivative) = $this->_createDerivative(
			$this->_item,
			$this->_item->getId(),
			DERIVATIVE_TYPE_IMAGE_PREFERRED
		);

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.view'
		);

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.viewResizes'
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $derivative->getId());
		list($ret, $output) = $this->_download();
		$this->assertTrue($ret && $ret->getErrorCode() & ERROR_PERMISSION_DENIED, 'expected error');

		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.viewSource'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $output) = $this->_download();
		$this->assertTrue(!$ret, 'expected success');
	}

	public function testResizePermission() {
		// Resize needs core.viewResizes
		list($ret, $derivative) = $this->_createDerivative(
			$this->_item,
			$this->_item->getId(),
			DERIVATIVE_TYPE_IMAGE_RESIZE
		);

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.view'
		);

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.viewSource'
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $derivative->getId());
		list($ret, $output) = $this->_download();
		$this->assertTrue($ret && $ret->getErrorCode() & ERROR_PERMISSION_DENIED, 'expected error');

		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.viewResizes'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $output) = $this->_download();
		$this->assertTrue(!$ret, 'expected success');
	}

	public function testThumbnailPermission() {
		// Thumbnail needs core.view
		list($ret, $derivative) = $this->_createDerivative(
			$this->_item,
			$this->_item->getId(),
			DERIVATIVE_TYPE_IMAGE_THUMBNAIL
		);

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.viewResizes'
		);

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.viewSource'
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $derivative->getId());
		list($ret, $output) = $this->_download();
		$this->assertTrue($ret && $ret->getErrorCode() & ERROR_MISSING_OBJECT, 'expected error');

		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.view'
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $output) = $this->_download();
		$this->assertTrue(!$ret, 'expected success');
	}

	public function testPrintService() {
		// Flag in session allows print service to bypass viewResizes/viewSource for set of ids
		global $gallery;
		$session =& $gallery->getSession();
		$session->put('core.isPrintService', array(2, $this->_item->getId()));

		// Still need core.view
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		list($ret, $output) = $this->_download();
		$this->assertTrue($ret && $ret->getErrorCode() & ERROR_MISSING_OBJECT, 'expected error 1');

		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$this->_userId,
			'core.view'
		);

		if ($ret) {
			return $ret;
		}

		$session->put('core.isPrintService', array(2, 5));
		list($ret, $output) = $this->_download();
		$this->assertTrue($ret && $ret->getErrorCode() & ERROR_PERMISSION_DENIED, 'expected error 2');

		$session->put('core.isPrintService', array(2, $this->_item->getId(), 5));
		list($ret, $output) = $this->_download();
		$this->assertTrue(!$ret, 'expected success');
	}

	public function testDownloadBogusEntityFailsWithErrorMissingObject() {
		// GalleryUser doesn't implement the required interface (fetchPath, getMimeType)
		GalleryUtilities::putRequestVariable('itemId', $this->_userId);

		list($ret, $output) = $this->_download();

		if ($ret) {
			$this->assertTrue($ret->getErrorCode() & ERROR_MISSING_OBJECT, 'expected error');

			if (!($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
				return $ret;
			}
		} else {
			$this->fail('expected error, got none');
		}
	}

	public function testDownloadEntityWithAssociatedPermission() {
		/*
		 * Create a GalleryEntity that has permissions associated with it directly instead of
		 * through an association with an item (like WatermarkImage or ThumbnailImage).
		 */
		$entity            = new DownloadItemTestEntity();
		$entity->className = 'DownloadItemTestEntity';
		$ret               = $entity->create();

		if ($ret) {
			return $ret;
		}
		$entity->className = 'GalleryEntity';
		$ret               = $entity->save();

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($entity);
		$cacheKey = 'GalleryEntityHelper::loadEntitiesById(' . $entity->getId() . ')';
		GalleryDataCache::put($cacheKey, $entity);

		GalleryUtilities::putRequestVariable('itemId', $entity->getId());

		// Execute the test and verify that we fail
		list($ret, $output) = $this->_download();

		if ($ret) {
			/*
			 * We don't know what permission to check for arbitrary entities. Avoid information
			 * disclosure by treating such bogus requests as if the entity didn't exist.
			 */
			$this->assertTrue($ret->getErrorCode() & ERROR_MISSING_OBJECT, 'expected error');

			if (!($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
				return $ret;
			}
		} else {
			$this->fail('expected error, got none');
		}

		// Now associate the entity directly with a permission
		$ret = GalleryCoreApi::addUserPermission($entity->getId(), $this->_userId, 'core.all');

		if ($ret) {
			return $ret;
		}

		// Execute the test and verify that we succeed
		list($ret, $output) = $this->_download();

		if ($ret) {
			return $ret;
		}
	}
}

/**
 * Test PhpVm to ignore header() calls
 */
class DownloadItemTestPhpVm extends GalleryPhpVm {
	public function header($string, $replace = null) {
	}
}

class DownloadItemTestChildEntity extends GalleryChildEntity {
	public function getMimeType() {
		return 'image/jpeg';
	}

	public function fetchPath() {
		return array(null, __FILE__);
	}
}

class DownloadItemTestEntity extends GalleryEntity {
	public $className;

	public function getMimeType() {
		return 'image/jpeg';
	}

	public function fetchPath() {
		return array(null, __FILE__);
	}

	public function getClassName() {
		return $this->className;
	}
}

function DownloadItemTest_error_handler($errorNumber, $errorString, $file, $line, $context) {
	if ($errorNumber == 2048) {
		return; // E_STRICT
	}

	if (error_reporting() == 0 && strpos($errorString, 'apacheSetenvBroken') !== false) {
		return;
	}

	// Else call our default error_handler
	return PHPUnit_error_handler($errorNumber, $errorString, $file, $line, $context);
}
