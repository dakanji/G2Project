<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test ShowItem view
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class ShowItemTest extends GalleryTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_album);

		list($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId());

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_view) = GalleryView::doStatic()->loadView('core.ShowItem');

		if ($ret) {
			return $ret;
		}

		GalleryCoreApi::requireOnce('modules/core/classes/GalleryTemplate.class');
		$this->_template = new GalleryTemplate(GalleryCoreApi::getCodeBasePath());
	}

	public function _testViewCount($itemId) {
		list($ret, $count) = GalleryCoreApi::fetchItemViewCount($itemId);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(0, $count, 'count before');

		GalleryUtilities::putRequestVariable('itemId', $itemId);
		list($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);

		if ($ret) {
			return $ret;
		}

		$match = 'themes/' . $theme->getId() . '/templates';
		$this->assertEquals(
			substr($result['body'], 0, strlen($match)),
			$match,
			'template should be inside a theme'
		);

		list($ret, $count) = GalleryCoreApi::fetchItemViewCount($itemId);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(1, $count, 'count after');
	}

	public function testViewCountAlbum() {
		$this->_testViewCount($this->_album->getId());
	}

	public function testViewCountItem() {
		/*
		 * If we change view-count back to counting data items on core.DownloadItem
		 * instead of ShowItem then this test will need to be updated.
		 */
		$this->_testViewCount($this->_item->getId());
	}

	public function testAlbumSourcePermission() {
		// Verify viewing album contents requires ?? permission
		/*
		 * We briefly put code in place to require core.viewSource to view album contents..
		 * This allows setting permissions such that guests can see an album thumbnail but
		 * must login to view the album itself.  However, albums with core.viewSource would
		 * then pass on that permission to newly added items and many people only allow
		 * resizes to be viewed.. so we rolled back this code in ShowItem.inc rev 1.70.
		 * TODO: update this unit test when this functionality is restored, perhaps with
		 * a new core.viewAlbum permission?
		 */
		global $gallery;
		$ret = GalleryCoreApi::removeItemPermissions($this->_album->getId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_album->getId(),
			$gallery->getActiveUserId(),
			'core.view',
			false
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
		list($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);

		if ($ret) {
			return $ret;
		}

		/* Desired result:
		$this->assertEquals(
			array('redirect' => array('view' => 'core.ShowItem', 'itemId' => $this->_getRootId())),
			$result);
		*/
		// Current result:
		$this->assertTrue(isset($result['body']));
	}

	public function testItemSourcePermission() {
		// Verify data item does not require core.viewSource permission
		global $gallery;
		$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_item->getId(),
			$gallery->getActiveUserId(),
			'core.view',
			false
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
		list($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);

		if ($ret) {
			return $ret;
		}

		$match = 'themes/' . $theme->getId() . '/templates';
		$this->assertEquals(
			substr($result['body'], 0, strlen($match)),
			$match,
			'template should be inside a theme'
		);
	}

	public function testUseAlbumThemeForDefaultAlbum() {
		global $gallery;

		list($ret, $album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($album);

		$gallery->setConfig('defaultAlbumId', $album->getId());
		GalleryUtilities::removeRequestVariable('itemId');

		// Assign our test theme
		list($ret, $lockId) = GalleryCoreApi::acquireWriteLock($album->getId());

		if ($ret) {
			return $ret;
		}

		// Use a dummy theme.
		$album->setTheme('showItemTest');
		$ret = $album->save();

		if ($ret) {
			return $ret;
		}

		$ret = GalleryCoreApi::releaseLocks($lockId);

		if ($ret) {
			return $ret;
		}

		// Execute the test.
		list($ret, $view) = GalleryView::doStatic()->loadView('core.ShowItem');

		if ($ret) {
			return $ret;
		}
		list($ret, $theme, $params, $item) = $view->loadThemeAndParameters();

		if ($ret) {
			return $ret;
		}

		// Verify
		$this->assertEquals($album->getId(), $item->getId(), 'itemId');
		$this->assertEquals('showItemTest', $theme->getId(), 'theme');
	}
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryTheme.class');

/**
 * Test theme
 */
class ShowItemTestTheme extends GalleryTheme {
	public function __construct() {
		$this->setId('showItemTest');
	}

	public function isActive() {
		return array(null, true);
	}
}
