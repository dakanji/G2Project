<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * ItemReorder controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class ItemReorderControllerTest extends GalleryControllerTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName, 'core.ItemReorder');
	}

	public function setUp($x1 = null) {
		global $gallery;

		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_parentAlbum) = $this->_createRandomAlbum(
			$this->_getRootId(),
			array(
				'orderBy' => 'orderWeight',
			)
		);

		if ($ret) {
			return $ret;
		}

		$this->_markForCleanup($this->_parentAlbum);

		$ret = GalleryCoreApi::addUserPermission(
			$this->_parentAlbum->getId(),
			$gallery->getActiveUserId(),
			'core.all'
		);

		if ($ret) {
			return $ret;
		}

		for ($i = 0; $i < 5; $i++) {
			list($ret, $this->_child[$i]) = $this->_createRandomDataItem($this->_parentAlbum->getId());

			if ($ret) {
				return $ret;
			}

			$ret = GalleryCoreApi::setItemOrderWeight($this->_child[$i]->getId(), $i * 1000);

			if ($ret) {
				return $ret;
			}
		}
	}

	public function testCancel() {
		GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'return' => true,
				),
				'status' => array(),
				'error'  => array(),
			),
			$results
		);
	}

	public function testReorderItemsBefore() {
		GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
		GalleryUtilities::putRequestVariable('form[selectedId]', $this->_child[1]->getId());
		GalleryUtilities::putRequestVariable('form[placement]', 'before');
		GalleryUtilities::putRequestVariable('form[targetId]', $this->_child[4]->getId());
		GalleryUtilities::putRequestVariable('form[action][reorder]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemReorder',
					'itemId'  => $this->_parentAlbum->getId(),
				),
				'status' => array(
					'saved' => 1,
				),
				'error' => array(),
			),
			$results
		);

		list($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_parentAlbum);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$this->_child[0]->getId(),
				$this->_child[2]->getId(),
				$this->_child[3]->getId(),
				$this->_child[1]->getId(),
				$this->_child[4]->getId(),
			),
			$childIds
		);
	}

	public function testReorderItemsBefore2() {
		GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
		GalleryUtilities::putRequestVariable('form[selectedId]', $this->_child[3]->getId());
		GalleryUtilities::putRequestVariable('form[placement]', 'before');
		GalleryUtilities::putRequestVariable('form[targetId]', $this->_child[0]->getId());
		GalleryUtilities::putRequestVariable('form[action][reorder]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemReorder',
					'itemId'  => $this->_parentAlbum->getId(),
				),
				'status' => array(
					'saved' => 1,
				),
				'error' => array(),
			),
			$results
		);

		list($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_parentAlbum);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$this->_child[3]->getId(),
				$this->_child[0]->getId(),
				$this->_child[1]->getId(),
				$this->_child[2]->getId(),
				$this->_child[4]->getId(),
			),
			$childIds
		);
	}

	public function testReorderItemsAfter() {
		GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
		GalleryUtilities::putRequestVariable('form[selectedId]', $this->_child[3]->getId());
		GalleryUtilities::putRequestVariable('form[placement]', 'after');
		GalleryUtilities::putRequestVariable('form[targetId]', $this->_child[0]->getId());
		GalleryUtilities::putRequestVariable('form[action][reorder]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemReorder',
					'itemId'  => $this->_parentAlbum->getId(),
				),
				'status' => array(
					'saved' => 1,
				),
				'error' => array(),
			),
			$results
		);

		list($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_parentAlbum);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$this->_child[0]->getId(),
				$this->_child[3]->getId(),
				$this->_child[1]->getId(),
				$this->_child[2]->getId(),
				$this->_child[4]->getId(),
			),
			$childIds
		);
	}

	public function testReorderItemsAfter2() {
		GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
		GalleryUtilities::putRequestVariable('form[selectedId]', $this->_child[0]->getId());
		GalleryUtilities::putRequestVariable('form[placement]', 'after');
		GalleryUtilities::putRequestVariable('form[targetId]', $this->_child[4]->getId());
		GalleryUtilities::putRequestVariable('form[action][reorder]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemReorder',
					'itemId'  => $this->_parentAlbum->getId(),
				),
				'status' => array(
					'saved' => 1,
				),
				'error' => array(),
			),
			$results
		);

		list($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_parentAlbum);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$this->_child[1]->getId(),
				$this->_child[2]->getId(),
				$this->_child[3]->getId(),
				$this->_child[4]->getId(),
				$this->_child[0]->getId(),
			),
			$childIds
		);
	}

	public function testReorderItemsWithoutPermissions() {
		global $gallery;

		$ret = GalleryCoreApi::removeItemPermissions($this->_parentAlbum->getId());

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::addUserPermission(
			$this->_parentAlbum->getId(),
			$gallery->getActiveUserId(),
			'core.view'
		);

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
		GalleryUtilities::putRequestVariable('form[selectedId]', $this->_child[3]->getId());
		GalleryUtilities::putRequestVariable('form[afterId]', $this->_child[0]->getId());
		GalleryUtilities::putRequestVariable('form[action][reorder]', 1);

		$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
	}

	public function testReorderItemsMissingSelection() {
		GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
		GalleryUtilities::putRequestVariable('form[targetId]', $this->_child[4]->getId());
		GalleryUtilities::putRequestVariable('form[action][reorder]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemReorder',
				),
				'status' => array(),
				'error'  => array('form[error][selectedId][missing]'),
			),
			$results
		);
	}

	public function testReorderItemsMissingTarget() {
		GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
		GalleryUtilities::putRequestVariable('form[selectedId]', $this->_child[3]->getId());
		GalleryUtilities::putRequestVariable('form[action][reorder]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'delegate' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemReorder',
				),
				'status' => array(),
				'error'  => array('form[error][targetId][missing]'),
			),
			$results
		);
	}

	public function testReorderItemsWithBogusId() {
		GalleryUtilities::putRequestVariable('itemId', 12345678);

		$results = $this->handleRequest(ERROR_MISSING_OBJECT);
	}

	public function testReorderItemsForceRebalance() {
		// Pack 'em in tight
		for ($i = 0; $i < 5; $i++) {
			$ret = GalleryCoreApi::setItemOrderWeight($this->_child[$i]->getId(), $i);

			if ($ret) {
				return $ret;
			}
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
		GalleryUtilities::putRequestVariable('form[selectedId]', $this->_child[1]->getId());
		GalleryUtilities::putRequestVariable('form[placement]', 'after');
		GalleryUtilities::putRequestVariable('form[targetId]', $this->_child[3]->getId());
		GalleryUtilities::putRequestVariable('form[action][reorder]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemReorder',
					'itemId'  => $this->_parentAlbum->getId(),
				),
				'status' => array(
					'saved' => 1,
				),
				'error' => array(),
			),
			$results
		);

		list($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_parentAlbum);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$this->_child[0]->getId(),
				$this->_child[2]->getId(),
				$this->_child[3]->getId(),
				$this->_child[1]->getId(),
				$this->_child[4]->getId(),
			),
			$childIds
		);
	}

	public function testReorderItemsForceRebalance2() {
		// Pack 'em in tight
		for ($i = 0; $i < 5; $i++) {
			$ret = GalleryCoreApi::setItemOrderWeight($this->_child[$i]->getId(), $i);

			if ($ret) {
				return $ret;
			}
		}

		GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
		GalleryUtilities::putRequestVariable('form[selectedId]', $this->_child[4]->getId());
		GalleryUtilities::putRequestVariable('form[placement]', 'before');
		GalleryUtilities::putRequestVariable('form[targetId]', $this->_child[1]->getId());
		GalleryUtilities::putRequestVariable('form[action][reorder]', 1);

		$results = $this->handleRequest();
		$this->assertEquals(
			array(
				'redirect' => array(
					'view'    => 'core.ItemAdmin',
					'subView' => 'core.ItemReorder',
					'itemId'  => $this->_parentAlbum->getId(),
				),
				'status' => array(
					'saved' => 1,
				),
				'error' => array(),
			),
			$results
		);

		list($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_parentAlbum);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				$this->_child[0]->getId(),
				$this->_child[4]->getId(),
				$this->_child[1]->getId(),
				$this->_child[2]->getId(),
				$this->_child[3]->getId(),
			),
			$childIds
		);
	}
}
