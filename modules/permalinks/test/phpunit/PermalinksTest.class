<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/permalinks/classes/PermalinksMapHelper.class');

/**
 * Test Permalinks functionality
 *
 * @package Permalinks
 * @subpackage PHPUnit
 * @author Pierre-Luc Paour
 * @version $Revision: 17580 $
 */
class PermalinksTest extends GalleryTestCase {

    var $_aliasNamesToDelete;

    function PermalinksTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	$this->_aliasNamesToDelete = array();

	$ret = $this->_markPluginParametersForCleanup('module', 'permalinks');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId(),
		'image/test', array(), __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    return $ret;
	}
	$this->_item->setMimeType('image/gif');

	$ret =
	    PermalinksMapHelper::createAlias('testAlias', $this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	$this->_aliasNamesToDelete[] = 'testAlias';

	$ret =
	    PermalinksMapHelper::createAlias('testAlias1', $this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	$this->_aliasNamesToDelete[] = 'testAlias1';
    }

    function tearDown() {
	foreach ($this->_aliasNamesToDelete as $name) {
	    $ret = PermalinksMapHelper::deleteAlias($name);
	    if ($ret) {
		return $ret;
	    }
	}

	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}
    }

    function testFetchItemIdForAlias() {
	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias('testAlias');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_item->getId(), (int) $destId);

	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias('testAlias1');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_album->getId(), (int) $destId);
    }

    function testFetchAliasesForItem() {
	list ($ret, $aliases) = PermalinksMapHelper::fetchAliasesForItem($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array('testAlias'), $aliases);

	list ($ret, $aliases) = PermalinksMapHelper::fetchAliasesForItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array('testAlias1'), $aliases);
    }


    function testCollision() {
	$ret = PermalinksMapHelper::createAlias('testAlias', $this->_item->getId());

	/* we expect an error */
	if (!$ret) {
	    return $this->assert(false, 'Expected an error');
	}
	$this->assert($ret->getErrorCode() & ERROR_COLLISION,
	    'No collision reported, but expected one');
    }

    function testDeleteAlias() {
	/* delete */
	$ret = PermalinksMapHelper::deleteAlias('testAlias');
	if ($ret) {
	    return $ret;
	}

	$ret = PermalinksMapHelper::deleteAlias('testAlias1');
	if ($ret) {
	    return $ret;
	}

	/* test fetching by alias */
	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias('testAlias');
	if ($ret) {
	    return $ret;
	}

	$this->assert(empty($destId));

	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias('testAlias1');
	if ($ret) {
	    return $ret;
	}

	$this->assert(empty($destId));

	/* test fetching by item */
	list ($ret, $aliases) = PermalinksMapHelper::fetchAliasesForItem($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array(), $aliases);

	list ($ret, $aliases) = PermalinksMapHelper::fetchAliasesForItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array(), $aliases);
    }

    function testListener() {
	/* The event listener is deactivated during unit tests, register it */
	GalleryCoreApi::registerEventListener('GalleryEntity::delete', new PermalinksModule());
	GalleryCoreApi::registerEventListener('GalleryEntity::save', new PermalinksModule());

	GalleryCoreApi::setPluginParameter('module', 'permalinks', 'autoPermalink', 1);

	/* create album, this creates a permalink */
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = $this->_createRandomDataItem(
	    $album->getId(), 'image/test', array(), __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    return $ret;
	}
	$item->setMimeType('image/gif');

	$ret = PermalinksMapHelper::createAlias('testAlias2', $item->getId());
	if ($ret) {
	    return $ret;
	}

	/* test autogenerated alias for album */
	list ($ret, $aliasesAlbum) = PermalinksMapHelper::fetchAliasesForItem($album->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array($album->pathComponent), $aliasesAlbum);

	/* Delete album: deletes sub-item and aliases */
	$ret = GalleryCoreApi::deleteEntityById($album->getId(), 'GalleryAlbumItem');
	if ($ret) {
	    return $ret;
	}

	/* test */
	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias('testAlias2');
	if ($ret) {
	    return $ret;
	}

	$this->assert(empty($destId), "1. Destid not empty ($destId)");

	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias($aliasesAlbum[0]);
	if ($ret) {
	    return $ret;
	}

	$this->assert(empty($destId), "2. Destid not empty ($destId)");
    }

    function testListenerCollision() {
	/* The event listener is deactivated during unit tests, register it */
	GalleryCoreApi::registerEventListener('GalleryEntity::save', new PermalinksModule());

	GalleryCoreApi::setPluginParameter('module', 'permalinks', 'autoPermalink', 1);

	/* create album, this creates a permalink */
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($album);

	$this->_aliasNamesToDelete[] = $album->pathComponent;

	/* test autogenerated alias for album */
	list ($ret, $aliasesAlbum) = PermalinksMapHelper::fetchAliasesForItem($album->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array($album->pathComponent), $aliasesAlbum);

	/* create another album with the same name, this creates a permalink */
	list ($ret, $album1) = $this->_createRandomAlbum($album->getId());
	if ($ret) {
	    return $ret;
	}

	/* test the alias still points to the first album */
	list ($ret, $aliasesAlbum) = PermalinksMapHelper::fetchAliasesForItem($album->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array($album->pathComponent), $aliasesAlbum);
    }
}
?>
