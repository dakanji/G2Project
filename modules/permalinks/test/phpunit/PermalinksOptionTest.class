<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/permalinks/classes/PermalinksMapHelper.class');

/**
* PermalinksOption item edit tests
*
* @package Permalinks
* @subpackage PHPUnit
* @author Pierre-Luc Paour <paour@users.sf.net>
* @version $Revision: 17580 $
*/
class PermalinksOptionTest extends ItemEditOptionTestCase {

    var $_aliasNamesToDelete;

    function PermalinksOptionTest($methodName) {
	$this->ItemEditOptionTestCase($methodName, 'permalinks', 'PermalinksOption');
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	$ret = $this->_markPluginParametersForCleanup('module', 'permalinks');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = $this->_createRandomDataItem($this->_getRootId(), 'image/test',
		array(), __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    return $ret;
	}
	$item->setMimeType('image/gif');

	list ($ret, $item1) = $this->_createRandomDataItem($this->_getRootId(), 'image/test',
		array(), __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    return $ret;
	}
	$item1->setMimeType('image/gif');

	$this->_item = $item;
	$this->_item1 = $item1;
	$this->_markForCleanup($this->_item);
	$this->_markForCleanup($this->_item1);
    }

    function tearDown() {
	if (!empty($this->_aliasNamesToDelete)) {
	    foreach ($this->_aliasNamesToDelete as $name) {
		$ret =
		    PermalinksMapHelper::deleteAlias($name);
		if ($ret) {
		    return $ret;
		}
	    }
	}

	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}
    }

    function testPermalinksOptionCreate() {
	$form['PermalinksOption']['aliasName'] = 'newAlias';

	$result = $this->_handleRequestAfterEdit($form, $this->_item);

	$this->_aliasNamesToDelete[] = 'newAlias';

	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias('newAlias');
	$this->assertEquals($this->_item->getId(), $destId);
    }

    function testPermalinksOptionCollision() {
	/*
	 * Collisions cause foreign key constraints in Postgres which invalidates the transaction.
	 * That's hard to recover from.  Don't run this test on Postgres for now.
	 *
	 * TODO: Use a mock database for this test
	 */
	global $gallery;
	$storage = $gallery->getStorage();
	if ($storage->getType() == 'postgres') {
	    return;
	}

	$form['PermalinksOption']['aliasName'] = 'newAlias';

	$result = $this->_handleRequestAfterEdit($form, $this->_item1);

	$this->_aliasNamesToDelete[] = 'newAlias';

	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias('newAlias');
	$this->assertEquals($this->_item1->getId(), $destId);

	/* now test a collision, this generates an error with some DB drivers, that's OK */
	$result = $this->_handleRequestAfterEdit($form, $this->_item);
	$this->assertEquals(array(array('form[error][PermalinksOption][exists]'), array()),
		$result);

	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias('newAlias');
	$this->assertEquals($this->_item1->getId(), $destId);
    }

    function testPermalinksOptionDelete() {
	$form['PermalinksOption']['aliasName'] = 'newAlias';

	$result = $this->_handleRequestAfterEdit($form, $this->_item);

	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias('newAlias');
	$this->assertEquals($this->_item->getId(), $destId);

	/* now delete it */
	unset($form['PermalinksOption']['aliasName']);
	$form['PermalinksOption']['delete']['newAlias'] = 'on';

	$result = $this->_handleRequestAfterEdit($form, $this->_item);

	list ($ret, $destId) = PermalinksMapHelper::fetchItemIdForAlias('newAlias');
	$this->assert(empty($destId));
    }
}
?>
