<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/password/classes/PasswordHelper.class');

/**
 * PasswordOption tests - adding and removing passwords on items and albums.
 * Also tests PasswordInterface.
 *
 * @package Password
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @author Jess Martin <jmartin@cs.unc.edu>
 * @version $Revision: 17657 $
 */
class PasswordOptionTest extends ItemEditOptionTestCase {

    function PasswordOptionTest($methodName) {
	$this->ItemEditOptionTestCase($methodName, 'password', 'PasswordOption');
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	$this->_registerEventListener('GalleryEntity::save', new PasswordModule());

	list ($ret, $this->_coreParams) =
	    GalleryCoreApi::fetchAllPluginParameters('module', 'core');
	if ($ret) {
	    return $ret;
	}
	list ($ret, $this->_topAlbum, $this->_topItems) =
	    $this->_createSubAlbumWithItems($this->_getRootId(), true);
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_topAlbum);

	list ($ret, $this->_subAlbum, $this->_subItems) =
	    $this->_createSubAlbumWithItems($this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}

	list ($ret, $this->_hidden) = GalleryCoreApi::newFactoryInstance('HiddenInterface_1_0');
	if ($ret) {
	    return $ret;
	}
    }

    function _createSubAlbumWithItems($parentId, $top=false) {
	list ($ret, $album) = $this->_createRandomAlbum($parentId);
	if ($ret) {
	    return array($ret, null, null);
	}

	if ($top) {
	    /* Setup permissions */
	    $albumId = $album->getId();
	    $ret = GalleryCoreApi::removeItemPermissions($albumId);
	    if ($ret) {
		return array($ret, null, null);
	    }
	    $ret = GalleryCoreApi::addGroupPermission(
		    $albumId, $this->_coreParams['id.adminGroup'], 'core.all');
	    if ($ret) {
		return array($ret, null, null);
	    }
	    $ret = GalleryCoreApi::addUserPermission(
		    $albumId, $this->_coreParams['id.anonymousUser'], 'core.edit');
	    if ($ret) {
		return array($ret, null, null);
	    }
	    $ret = GalleryCoreApi::addUserPermission(
		    $albumId, $this->_coreParams['id.anonymousUser'], 'core.changePermissions');
	    if ($ret) {
		return array($ret, null, null);
	    }
	    $ret = GalleryCoreApi::addGroupPermission(
		    $albumId, $this->_coreParams['id.everybodyGroup'], 'core.viewAll');
	    if ($ret) {
		return array($ret, null, null);
	    }
	} else {
	    /* No public viewSource permission in subalbum */
	    $ret = GalleryCoreApi::removeGroupPermission(
		    $album->getId(), $this->_coreParams['id.everybodyGroup'], 'core.viewSource');
	    if ($ret) {
		return array($ret, null, null);
	    }
	}

	$items = array();
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $items[$i]) = $this->_createRandomDataItem($album->getId());
	    if ($ret) {
		return array($ret, null, null);
	    }
	}

	return array(null, $album, $items);
    }

    function _fetchViewPermissions($itemId) {
	list ($ret, $permissions) = GalleryCoreApi::fetchAllPermissionsForItem($itemId, true);
	if ($ret) {
	    return ($ret);
	}
	$result = array();
	foreach ($permissions as $permission) {
	    if (strncmp($permission['permission'], 'core.view', 9)) {
		continue;
	    }
	    if (isset($permission['entityId'])) {
		$result['entity-' . $permission['entityId']][] = $permission['permission'];
	    } else if (isset($permission['userId'])) {
		$result['user-' . $permission['userId']][] = $permission['permission'];
	    } else if (isset($permission['groupId']) &&
		       $permission['groupId'] != $this->_coreParams['id.adminGroup']) {
		$result['group-' . $permission['groupId']][] = $permission['permission'];
	    }
	}
	ksort($result);
	foreach (array_keys($result) as $key) {
	    sort($result[$key]);
	}
	return $result;
    }

    function _assertPassword(&$item, $protectedBy, $messagePrefix,
			     $viewSource=true, $parentProtect=0, $hidden=0, $password=null) {
	list ($ret, $item) = $item->refresh();
	if ($ret) {
	    return $ret;
	}
	$itemId = $item->getId();
	$everybodyId = 'group-' . $this->_coreParams['id.everybodyGroup'];
	list ($ret, $hash) =
	    GalleryCoreApi::getPluginParameter('module', 'password', 'password', $itemId);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals($itemId == $protectedBy, !empty($hash),
			    $messagePrefix . ' has password');
	if ($password) {
	    $this->assert(GalleryUtilities::isCorrectPassword($password, $hash), 'hashed password');
	}
	$this->assertEquals($itemId == $protectedBy,
			    $item->hasOnLoadHandler('Password'), $messagePrefix . ' onLoadHander');

	$result = $this->_fetchViewPermissions($itemId);
	$expected = array();
	if ($parentProtect) {
	    $expected['entity-' . $parentProtect] = array('core.view');
	}
	$expected[ $protectedBy ? 'entity-' . $protectedBy : $everybodyId ] =
	    $viewSource ? ($hidden ? array('core.viewResizes', 'core.viewSource')
				   : array('core.viewAll'))
			: ($hidden ? array('core.viewResizes')
				   : array('core.view', 'core.viewResizes'));
	if ($itemId == $protectedBy && !$parentProtect) {
	    $expected[$everybodyId] = array('core.view');
	}
	$this->assertEquals($expected, $result, $messagePrefix . ' permissions');
    }

    function _moveItem(&$item, $newParentId) {
	list ($ret, $lockIds[]) = GalleryCoreApi::acquireWriteLock($item->getId());
	if ($ret) {
	    return $ret;
	}
	list ($ret, $lockIds[]) =
	    GalleryCoreApi::acquireReadLock(array($item->getParentId(), $newParentId));
	if ($ret) {
	    return $ret;
	}
	$ret = $item->move($newParentId);
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}
	$ret = $item->save();
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}
	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret) {
	    return $ret;
	}
	return null;
    }


    function testPasswordMismatch() {
	$form['PasswordOption']['password1'] = 'abc';
	$form['PasswordOption']['password2'] = 'abd';
	$result = $this->_handleRequestAfterEdit($form, $this->_topItems[1]);
	$this->assertEquals(array(array('form[error][PasswordOption][mismatch]'), array()),
			    $result);

	$ret = $this->_assertPassword($this->_topItems[1], false, 'item:');
	if ($ret) {
	    return $ret;
	}
    }

    function testPasswordItem() {
	GalleryUtilities::putRequestVariable('form[PasswordOption][password1]', 'abc');
	GalleryUtilities::putRequestVariable('form[PasswordOption][password2]', 'abc');
	$form = GalleryUtilities::getFormVariables('form');
	$result = $this->_handleRequestAfterEdit($form, $this->_topItems[1]);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topItems[1], $this->_topItems[1]->getId(),
				      'viewSource item:');
	if ($ret) {
	    return $ret;
	}

	$result = $this->_handleRequestAfterEdit($form, $this->_subItems[1]);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_subItems[1], $this->_subItems[1]->getId(),
				      'viewResizes item:', false, 0, 0, 'abc');
	if ($ret) {
	    return $ret;
	}

	GalleryDataCache::reset();
	$form['PasswordOption'] = array('remove' => 1);
	$result = $this->_handleRequestAfterEdit($form, $this->_topItems[1]);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topItems[1], false, 'unpw viewSource:');
	if ($ret) {
	    return $ret;
	}

	$result = $this->_handleRequestAfterEdit($form, $this->_subItems[1]);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_subItems[1], false, 'unpw viewResizes:', false);
	if ($ret) {
	    return $ret;
	}
    }

    function testPermission() {
	$ret = GalleryCoreApi::removeUserPermission($this->_topItems[1]->getId(),
		$this->_coreParams['id.anonymousUser'], 'core.changePermissions');
	if ($ret) {
	    return $ret;
	}

	$this->_becomeGuestUser();

	/* Permissions ok for topItems[0] */
	$form['PasswordOption']['password1'] = $form['PasswordOption']['password2'] = 'abc';
	$result = $this->_handleRequestAfterEdit($form, $this->_topItems[0]);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topItems[0], $this->_topItems[0]->getId(), 'item0:');
	if ($ret) {
	    return $ret;
	}

	/* No core.changePermissions permission for topItems[1] */
	$result = $this->_handleRequestAfterEdit($form, $this->_topItems[1],
						 ERROR_PERMISSION_DENIED);

	$ret = $this->_assertPassword($this->_topItems[1], false, 'item1:');
	if ($ret) {
	    return $ret;
	}
    }

    function testPasswordAlbum() {
	global $gallery;
	$mockAdapter = new MockTemplateAdapter();
	$gallery->_templateAdapter =& $mockAdapter;

	$albumId = $this->_topAlbum->getId();
	GalleryUtilities::putRequestVariable('form[PasswordOption][password1]', 'ab"d>');
	GalleryUtilities::putRequestVariable('form[PasswordOption][password2]', 'ab"d>');
	$form = GalleryUtilities::getFormVariables('form');
	$result = $this->_handleRequestAfterEdit($form, $this->_topAlbum);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topAlbum, $albumId, 'pw album:', true, 0, 0, 'ab"d>');
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, $albumId, 'pw subalbum:', false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_topItems[$i], $albumId, "pw item$i:");
	    if ($ret) {
		return $ret;
	    }
	    $ret = $this->_assertPassword($this->_subItems[$i], $albumId, "pw subitem$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
	$progress = $mockAdapter->getProgressBarDump();
	$this->assert(count($progress) > 3, 'progress bar: ' . print_r($progress, true));
	$mockAdapter = new MockTemplateAdapter();
	$gallery->_templateAdapter =& $mockAdapter;

	GalleryDataCache::reset();
	$form['PasswordOption']['remove'] = 1;
	$result = $this->_handleRequestAfterEdit($form, $this->_topAlbum);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topAlbum, false, 'unpw album:');
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, false, 'unpw subalbum:', false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_topItems[$i], false, "unpw item$i:");
	    if ($ret) {
		return $ret;
	    }
	    $ret = $this->_assertPassword($this->_subItems[$i], false, "unpw subitem$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
	$progress = $mockAdapter->getProgressBarDump();
	$this->assert(count($progress) > 3, 'progress bar: ' . print_r($progress, true));
    }

    function testPasswordAlbumWithPasswordItem() {
	global $gallery;
	$mockAdapter = new MockTemplateAdapter();
	$gallery->_templateAdapter =& $mockAdapter;

	$ret = PasswordHelper::setPassword($this->_subItems[0], 'abc');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subItems[0], $this->_subItems[0]->getId(),
				      'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$form['PasswordOption']['password1'] = $form['PasswordOption']['password2'] = 'xyz';
	$result = $this->_handleRequestAfterEdit($form, $this->_subAlbum);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(),
				      'pw album:', false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i],
		    $i ? $this->_subAlbum->getId() : $this->_subItems[0]->getId(),
		    "pw item$i:", false, $i ? 0 : $this->_subAlbum->getId());
	    if ($ret) {
		return $ret;
	    }
	}

	GalleryDataCache::reset();
	$form['PasswordOption']['remove'] = 1;
	$result = $this->_handleRequestAfterEdit($form, $this->_subAlbum);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_subAlbum, false, 'unpw album:', false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i],
		    $i ? false : $this->_subItems[0]->getId(), "item$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testPasswordAlbumWithPasswordAlbum() {
	global $gallery;
	$mockAdapter = new MockTemplateAdapter();
	$gallery->_templateAdapter =& $mockAdapter;

	$ret = PasswordHelper::setPassword($this->_subAlbum, 'abc');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(), 'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$form['PasswordOption']['password1'] = $form['PasswordOption']['password2'] = '123';
	$result = $this->_handleRequestAfterEdit($form, $this->_topAlbum);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topAlbum, $this->_topAlbum->getId(), 'pw album:');
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(),
				      'pw subalbum:', false, $this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_topItems[$i], $this->_topAlbum->getId(),
					  "pw item$i:");
	    if ($ret) {
		return $ret;
	    }
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_subAlbum->getId(),
					  "pw subitem$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}

	GalleryDataCache::reset();
	$form['PasswordOption']['remove'] = 1;
	$result = $this->_handleRequestAfterEdit($form, $this->_topAlbum);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topAlbum, false, 'unpw album:');
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(),
				      'subalbum:', false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_topItems[$i], false, "unpw item$i:");
	    if ($ret) {
		return $ret;
	    }
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_subAlbum->getId(),
					  "subitem$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testPasswordItemInPasswordAlbum() {
	$ret = PasswordHelper::setPassword($this->_topAlbum, 'abc');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_topItems[1], $this->_topAlbum->getId(), 'setup:');
	if ($ret) {
	    return $ret;
	}

	$form['PasswordOption']['password1'] = $form['PasswordOption']['password2'] = 'ab!';
	$result = $this->_handleRequestAfterEdit($form, $this->_topItems[1]);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topItems[1], $this->_topItems[1]->getId(),
				      'item:', true, $this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryDataCache::reset();
	$form = array('PasswordOption' => array('remove' => 1));
	$result = $this->_handleRequestAfterEdit($form, $this->_topItems[1]);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topItems[1], $this->_topAlbum->getId(), 'unpw:');
	if ($ret) {
	    return $ret;
	}
    }

    function testPasswordAlbumInPasswordAlbum() {
	global $gallery;
	$mockAdapter = new MockTemplateAdapter();
	$gallery->_templateAdapter =& $mockAdapter;

	$ret = PasswordHelper::setPassword($this->_topAlbum, 'abc');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subAlbum, $this->_topAlbum->getId(), 'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$form['PasswordOption']['password1'] = $form['PasswordOption']['password2'] = '123';
	$result = $this->_handleRequestAfterEdit($form, $this->_subAlbum);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topAlbum, $this->_topAlbum->getId(), 'pw album:');
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(), 'pw subalbum:',
				      false, $this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_topItems[$i], $this->_topAlbum->getId(),
					  "pw item$i:");
	    if ($ret) {
		return $ret;
	    }
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_subAlbum->getId(),
					  "pw subitem$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}

	GalleryDataCache::reset();
	$form['PasswordOption']['remove'] = 1;
	$result = $this->_handleRequestAfterEdit($form, $this->_subAlbum);
	$this->assertEquals(array(array(), array()), $result);

	$ret = $this->_assertPassword($this->_topAlbum, $this->_topAlbum->getId(), 'unpw album:');
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, $this->_topAlbum->getId(),
				      'unpw subalbum:', false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_topItems[$i], $this->_topAlbum->getId(),
					  "unpw item$i:");
	    if ($ret) {
		return $ret;
	    }
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_topAlbum->getId(),
					  "unpw subitem$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testAddItemToPasswordAlbum() {
	$ret = PasswordHelper::setPassword($this->_topAlbum, '123');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_topAlbum, $this->_topAlbum->getId(), 'setup:');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = $this->_createRandomDataItem($this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($item, $this->_topAlbum->getId(), 'item:');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = $this->_createRandomDataItem($this->_subAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($item, $this->_topAlbum->getId(), 'deep item:', false);
	if ($ret) {
	    return $ret;
	}
    }

    function testMoveItemIntoPasswordAlbum() {
	$ret = PasswordHelper::setPassword($this->_subAlbum, 'p{|w');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(), 'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_moveItem($this->_topItems[2], $this->_subAlbum->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_topItems[2], $this->_subAlbum->getId(), 'item:');
	if ($ret) {
	    return $ret;
	}
    }

    function testMoveItemDeepIntoPasswordAlbum() {
	list ($ret, $album) = $this->_createRandomAlbum($this->_subAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addGroupPermission(
		$album->getId(), $this->_coreParams['id.everybodyGroup'], 'core.viewSource');
	if ($ret) {
	    return $ret;
	}
	list ($ret, $subAlbum) = $this->_createRandomAlbum($album->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = PasswordHelper::setPassword($this->_subAlbum, '(*)');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($subAlbum, $this->_subAlbum->getId(), 'setup:');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_moveItem($this->_topItems[2], $subAlbum->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_topItems[2], $this->_subAlbum->getId(), 'item:');
	if ($ret) {
	    return $ret;
	}
    }

    function testMoveItemOutOfPasswordAlbum() {
	$ret = PasswordHelper::setPassword($this->_subAlbum, '%^&#');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subItems[2], $this->_subAlbum->getId(),
				      'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_moveItem($this->_subItems[2], $this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_subItems[2], false, 'item:', false);
	if ($ret) {
	    return $ret;
	}
    }

    function testMoveItemBetweenPasswordAlbums() {
	list ($ret, $album) = $this->_createRandomAlbum($this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = PasswordHelper::setPassword($album, 'abc');
	if ($ret) {
	    return $ret;
	}
	$ret = PasswordHelper::setPassword($this->_subAlbum, '123');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subItems[2], $this->_subAlbum->getId(),
				      'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_moveItem($this->_subItems[2], $album->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_subItems[2], $album->getId(), 'item:', false);
	if ($ret) {
	    return $ret;
	}
    }

    function testMoveAlbumIntoPasswordAlbum() {
	list ($ret, $album) = $this->_createRandomAlbum($this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = PasswordHelper::setPassword($album, 'abc');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($album, $album->getId(), 'setup:');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_moveItem($this->_subAlbum, $album->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_subAlbum, $album->getId(), 'album:', false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], $album->getId(), "item$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testMoveAlbumOutOfPasswordAlbum() {
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($album);
	$ret = PasswordHelper::setPassword($this->_topAlbum, '123');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subAlbum, $this->_topAlbum->getId(), 'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_moveItem($this->_subAlbum, $album->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_subAlbum, false, 'album:', false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], false, "item$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testMoveAlbumBetweenPasswordAlbums() {
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($album);
	$ret = PasswordHelper::setPassword($album, 'abc');
	if ($ret) {
	    return $ret;
	}
	$ret = PasswordHelper::setPassword($this->_topAlbum, '123');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subItems[1], $this->_topAlbum->getId(),
				      'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_moveItem($this->_subAlbum, $album->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_subAlbum, $album->getId(), 'album:', false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], $album->getId(), "item$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testMovePasswordItemIntoPasswordAlbum() {
	$ret = PasswordHelper::setPassword($this->_topItems[1], 'abc');
	if ($ret) {
	    return $ret;
	}
	$ret = PasswordHelper::setPassword($this->_subAlbum, '123');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();

	$ret = $this->_moveItem($this->_topItems[1], $this->_subAlbum->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_topItems[1], $this->_topItems[1]->getId(), 'item:',
				      true, $this->_subAlbum->getId());
	if ($ret) {
	    return $ret;
	}
    }

    function testMovePasswordAlbumIntoPasswordAlbum() {
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($album);
	$ret = PasswordHelper::setPassword($album, 'abc');
	if ($ret) {
	    return $ret;
	}
	$ret = PasswordHelper::setPassword($this->_subAlbum, '123');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subItems[1], $this->_subAlbum->getId(),
				      'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_moveItem($this->_subAlbum, $album->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(), 'album:',
				      false, $album->getId());
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_subAlbum->getId(),
					  "item$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testPasswordInterface() {
	list ($ret, $interface) = GalleryCoreApi::newFactoryInstance('PasswordInterface_1_0');
	if ($ret) {
	    return $ret;
	}
	if (isset($interface)) {
	    $ret = $interface->setPassword($this->_topItems[1], '@abc123');
	    if ($ret) {
		return $ret;
	    }
	    $ret = $this->_assertPassword($this->_topItems[1], $this->_topItems[1]->getId(),
					  'item:');
	    if ($ret) {
		return $ret;
	    }
	    list ($ret, $hasPassword) = $interface->hasPassword($this->_topItems[1]);
	    if ($ret) {
		return $ret;
	    }
	    $this->assert($hasPassword, 'hasPassword item');
	    list ($ret, $hasPassword) = $interface->hasPassword($this->_topItems[2]);
	    if ($ret) {
		return $ret;
	    }
	    $this->assert(!$hasPassword, 'hasPassword other item');
	    $ret = $interface->setPassword($this->_subAlbum, ')=pw=(');
	    if ($ret) {
		return $ret;
	    }
	    $ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(),
					  'album:', false);
	    if ($ret) {
		return $ret;
	    }
	    list ($ret, $hasPassword) = $interface->hasPassword($this->_subAlbum);
	    if ($ret) {
		return $ret;
	    }
	    $this->assert($hasPassword, 'hasPassword album');
	    $ret = $interface->removePassword($this->_topItems[1]);
	    if ($ret) {
		return $ret;
	    }
	    list ($ret, $hasPassword) = $interface->hasPassword($this->_topItems[1]);
	    if ($ret) {
		return $ret;
	    }
	    $this->assert(!$hasPassword, 'hasPassword after remove');
	} else {
	    $this->assert(false, 'failed to create factory instance');
	}
    }

    /*** Test interactions with Hidden items ***/

    function testHideAlbumWithPasswordAlbum() {
	if (!isset($this->_hidden)) {
	    /* Hidden module not active; skip test */
	    return;
	}
	$ret = PasswordHelper::setPassword($this->_subAlbum, 'abc');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(), 'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_hidden->hideItem($this->_topAlbum);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(), 'album:',
				      false, $this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_subAlbum->getId(),
					  "item$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}

	GalleryDataCache::reset();
	$ret = $this->_hidden->unHideItem($this->_topAlbum);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(), 'un album:',
				      false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_subAlbum->getId(),
					  "un item$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testPasswordAlbumInHiddenAlbum() {
	if (!isset($this->_hidden)) {
	    /* Hidden module not active; skip test */
	    return;
	}
	$ret = $this->_hidden->hideItem($this->_topAlbum);
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$permissions[] = $this->_fetchViewPermissions($this->_subAlbum->getId());
	for ($i = 0; $i < 3; $i++) {
	    $permissions[] = $this->_fetchViewPermissions($this->_subItems[$i]->getId());
	}

	$ret = PasswordHelper::setPassword($this->_subAlbum, 'abc');
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(), 'album:',
				      false, $this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_subAlbum->getId(),
					  "item$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}

	GalleryDataCache::reset();
	$ret = PasswordHelper::removePassword($this->_subAlbum);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals($permissions[0],
			    $this->_fetchViewPermissions($this->_subAlbum->getId()), 'unpw album');
	for ($i = 0; $i < 3; $i++) {
	    $this->assertEquals($permissions[$i+1],
				$this->_fetchViewPermissions($this->_subItems[$i]->getId()),
				"unpw item$i");
	}
    }

    function testPasswordAlbumWithHiddenAlbum() {
	if (!isset($this->_hidden)) {
	    /* Hidden module not active; skip test */
	    return;
	}
	$ret = $this->_hidden->hideItem($this->_subAlbum);
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$permissions[] = $this->_fetchViewPermissions($this->_subAlbum->getId());
	for ($i = 0; $i < 3; $i++) {
	    $permissions[] = $this->_fetchViewPermissions($this->_subItems[$i]->getId());
	}

	$ret = PasswordHelper::setPassword($this->_topAlbum, 'abc');
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, $this->_topAlbum->getId(), 'album:',
				      false, $this->_subAlbum->getId(), true);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_topAlbum->getId(),
					  "item$i:", false, $this->_subAlbum->getId(), true);
	    if ($ret) {
		return $ret;
	    }
	}

	GalleryDataCache::reset();
	$ret = PasswordHelper::removePassword($this->_topAlbum);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals($permissions[0],
			    $this->_fetchViewPermissions($this->_subAlbum->getId()), 'unpw album');
	for ($i = 0; $i < 3; $i++) {
	    $this->assertEquals($permissions[$i+1],
				$this->_fetchViewPermissions($this->_subItems[$i]->getId()),
				"unpw item$i");
	}
    }

    function testHideAlbumInPasswordAlbum() {
	if (!isset($this->_hidden)) {
	    /* Hidden module not active; skip test */
	    return;
	}
	$ret = PasswordHelper::setPassword($this->_topAlbum, 'abc');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_subAlbum, $this->_topAlbum->getId(), 'setup:', false);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_hidden->hideItem($this->_subAlbum);
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, $this->_topAlbum->getId(), 'album:',
				      false, $this->_subAlbum->getId(), true);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_topAlbum->getId(),
					  "item$i:", false, $this->_subAlbum->getId(), true);
	    if ($ret) {
		return $ret;
	    }
	}

	GalleryDataCache::reset();
	$ret = $this->_hidden->unHideItem($this->_subAlbum);
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, $this->_topAlbum->getId(),
				      'un album:', false);
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_topAlbum->getId(),
					  "un item$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testHidePasswordAlbum() {
	if (!isset($this->_hidden)) {
	    /* Hidden module not active; skip test */
	    return;
	}
	$ret = PasswordHelper::setPassword($this->_topAlbum, 'abc');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$ret = $this->_assertPassword($this->_topAlbum, $this->_topAlbum->getId(), 'setup:');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_hidden->hideItem($this->_topAlbum);
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_topAlbum, $this->_topAlbum->getId(), 'album:',
				      true, $this->_topAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_topItems[$i], $this->_topAlbum->getId(),
					  "item$i:");
	    if ($ret) {
		return $ret;
	    }
	}

	GalleryDataCache::reset();
	$ret = $this->_hidden->unHideItem($this->_topAlbum);
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_topAlbum, $this->_topAlbum->getId(), 'un album:');
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_topItems[$i], $this->_topAlbum->getId(),
					  "un item$i:");
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testPasswordHiddenAlbum() {
	if (!isset($this->_hidden)) {
	    /* Hidden module not active; skip test */
	    return;
	}
	$ret = $this->_hidden->hideItem($this->_subAlbum);
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$permissions[] = $this->_fetchViewPermissions($this->_subAlbum->getId());
	for ($i = 0; $i < 3; $i++) {
	    $permissions[] = $this->_fetchViewPermissions($this->_subItems[$i]->getId());
	}

	$ret = PasswordHelper::setPassword($this->_subAlbum, 'abc');
	if ($ret) {
	    return $ret;
	}
	$ret = $this->_assertPassword($this->_subAlbum, $this->_subAlbum->getId(), 'album:',
				      false, $this->_subAlbum->getId());
	if ($ret) {
	    return $ret;
	}
	for ($i = 0; $i < 3; $i++) {
	    $ret = $this->_assertPassword($this->_subItems[$i], $this->_subAlbum->getId(),
					  "item$i:", false);
	    if ($ret) {
		return $ret;
	    }
	}

	GalleryDataCache::reset();
	$ret = PasswordHelper::removePassword($this->_subAlbum);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals($permissions[0],
			    $this->_fetchViewPermissions($this->_subAlbum->getId()), 'unpw album');
	for ($i = 0; $i < 3; $i++) {
	    $this->assertEquals($permissions[$i+1],
				$this->_fetchViewPermissions($this->_subItems[$i]->getId()),
				"unpw item$i");
	}
    }

    function testIsAppropriateMissingPermission() {
	$item = $this->_topAlbum;
	$ret = GalleryCoreApi::removeUserPermission(
	    $item->getId(), $this->_coreParams['id.anonymousUser'], 'core.changePermissions');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::removeGroupPermission(
	    $item->getId(), $this->_coreParams['id.adminGroup'], 'core.changePermissions');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $isAppropriate) = $this->_option->isAppropriate($item, null);
	if ($ret) {
	    return $ret;
	}
	$this->assert(!$isAppropriate);
    }

    function testIsAppropriateAlbumItem() {
	list ($ret, $isAppropriate) = $this->_option->isAppropriate($this->_topAlbum, null);
	if ($ret) {
	    return $ret;
	}
	$this->assert($isAppropriate);
    }

    function testIsAppropriateNonAlbumItem() {
	list ($ret, $isAppropriate) = $this->_option->isAppropriate($this->_subItems[0], null);
	if ($ret) {
	    return $ret;
	}
	$this->assert(!$isAppropriate);
    }

    function testIsAppropriateNonAlbumItemWithPassword() {
	$item = $this->_subItems[0];
	$ret = PasswordHelper::setPassword($item, '123');
	if ($ret) {
	    return $ret;
	}
	list ($ret, $isAppropriate) = $this->_option->isAppropriate($item, null);
	if ($ret) {
	    return $ret;
	}
	$this->assert($isAppropriate);
    }
}
?>
