<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/password/classes/PasswordHelper.class');
GalleryCoreApi::requireOnce('modules/core/classes/GalleryValidationPlugin.class');

/**
 * PasswordEntry controller tests.
 * Also tests onLoad handler.
 *
 * @package Password
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class PasswordEntryControllerTest extends GalleryControllerTestCase {

    function PasswordEntryControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'password.PasswordEntry');
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_item);

	$ret = PasswordHelper::setPassword($this->_item, 'abc123');
	if ($ret) {
	    return $ret;
	}

	$this->_session =& $gallery->getSession();
	$this->_saveSessionPerms = $this->_session->get(GALLERY_PERMISSION_SESSION_KEY);
	$this->_session->put(GALLERY_PERMISSION_SESSION_KEY, array());

	/* Disable all validation plugins by default */
	$this->_controller->_pluginInstances = array();
    }

    function tearDown() {
	global $gallery;
	$session =& $gallery->getSession();
	if (isset($this->_saveSessionPerms)) {
	    $session->put(GALLERY_PERMISSION_SESSION_KEY, $this->_saveSessionPerms);
	} else {
	    $session->remove(GALLERY_PERMISSION_SESSION_KEY);
	}
	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}
    }

    function testCorrectPassword() {
	GalleryUtilities::putRequestVariable('form[action][password]', 1);
	GalleryUtilities::putRequestVariable('form[itemId]', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[password]', 'abc123');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_item->getId()),
				  'status' => array(),
				  'error' => array()),
			    $results);
	$this->assertEquals(array($this->_item->getId()),
			    $this->_session->get(GALLERY_PERMISSION_SESSION_KEY));
    }

    function testEntityPassword() {
	$ret = PasswordHelper::setPassword($this->_item, '<pass&word');
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('form[action][password]', 1);
	GalleryUtilities::putRequestVariable('form[itemId]', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[password]', '<pass&word');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_item->getId()),
				  'status' => array(),
				  'error' => array()),
			    $results);
	$this->assertEquals(array($this->_item->getId()),
			    $this->_session->get(GALLERY_PERMISSION_SESSION_KEY));
    }

    function testWrongPassword() {
	GalleryUtilities::putRequestVariable('form[action][password]', 1);
	GalleryUtilities::putRequestVariable('form[itemId]', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[password]', 'xyz456');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'password.PasswordEntry'),
				  'status' => array(),
				  'error' => array('form[error][incorrectPassword]')),
			    $results);
	$this->assertEquals(array(), $this->_session->get(GALLERY_PERMISSION_SESSION_KEY));
    }

    function testInvalidItem() {
	/* Return incorrectPassword error for invalid itemId */
	GalleryUtilities::putRequestVariable('form[action][password]', 1);
	GalleryUtilities::putRequestVariable('form[itemId]', $this->_item->getId() + 666);
	GalleryUtilities::putRequestVariable('form[password]', 'any password');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'password.PasswordEntry'),
				  'status' => array(),
				  'error' => array('form[error][incorrectPassword]')),
			    $results);
	$this->assertEquals(array(), $this->_session->get(GALLERY_PERMISSION_SESSION_KEY));
    }

    function testNonPasswordItem() {
	/* Return incorrectPassword error for item with no password set */
	list ($ret, $item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($item);

	GalleryUtilities::putRequestVariable('form[action][password]', 1);
	GalleryUtilities::putRequestVariable('form[itemId]', $item->getId());
	GalleryUtilities::putRequestVariable('form[password]', 'any password');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'password.PasswordEntry'),
				  'status' => array(),
				  'error' => array('form[error][incorrectPassword]')),
			    $results);
	$this->assertEquals(array(), $this->_session->get(GALLERY_PERMISSION_SESSION_KEY));
    }

    function testPermission() {
	/* Return incorrectPassword error for item with no core.view permission */
	list ($ret, $everybodyId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::removeGroupPermission(
		$this->_item->getId(), $everybodyId, 'core.view');
	if ($ret) {
	    return $ret;
	}

	$this->_becomeGuestUser();
	GalleryUtilities::putRequestVariable('form[action][password]', 1);
	GalleryUtilities::putRequestVariable('form[itemId]', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[password]', 'abc123');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'password.PasswordEntry'),
				  'status' => array(),
				  'error' => array('form[error][incorrectPassword]')),
			    $results);
	$this->assertEquals(array(), $this->_session->get(GALLERY_PERMISSION_SESSION_KEY));
    }

    function testAlsoHidden() {
	list ($ret, $hiddenInterface) = GalleryCoreApi::newFactoryInstance('HiddenInterface_1_0');
	if ($ret) {
	    return $ret;
	}
	if (!isset($hiddenInterface)) {
	    return;
	}
	$ret = $hiddenInterface->hideItem($this->_item);
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();

	$this->_becomeGuestUser();
	GalleryUtilities::putRequestVariable('form[action][password]', 1);
	GalleryUtilities::putRequestVariable('form[itemId]', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[password]', 'abc123');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_item->getId()),
				  'status' => array(),
				  'error' => array()),
			    $results);
	$this->assertEquals(array($this->_item->getId()),
			    $this->_session->get(GALLERY_PERMISSION_SESSION_KEY));
    }

    function testOnLoad() {
	global $gallery;
	$urlGenerator =& $gallery->getUrlGenerator();
	$gallery->_phpVm = new PasswordEntryPhpVm($this);
	$this->_calls = array();

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'password');
	if ($ret) {
	    return $ret;
	}

	/* No redirect if we already have viewResizes/viewSource, as admin does */
	$ret = $module->onLoad($this->_item, false);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array(), $this->_calls, 'calls for admin');

	$this->_becomeGuestUser();
	GalleryUtilities::putRequestVariable('view', 'core.ShowItem');
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());

	$ret = $module->onLoad($this->_item, false);
	if ($ret) {
	    return $ret;
	}

	$redirect = $urlGenerator->generateUrl(
		array('view' => 'password.PasswordEntry', 'itemId' => $this->_item->getId()),
		array('forceFullUrl' => true, 'htmlEntities' => false));
	$this->assertEquals(array("header Location: $redirect", 'exit'),
			    $this->_calls, 'redirect');

	/* No redirect if no core.view permission */
	list ($ret, $everybodyId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::removeGroupPermission(
		$this->_item->getId(), $everybodyId, 'core.view');
	if ($ret) {
	    return $ret;
	}
	GalleryDataCache::reset();
	$this->_calls = array();

	$ret = $module->onLoad($this->_item, false);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array(), $this->_calls, 'calls for no permission');

	/* DO redirect even if no core.view if the item is also hidden */
	list ($ret, $hiddenInterface) = GalleryCoreApi::newFactoryInstance('HiddenInterface_1_0');
	if ($ret) {
	    return $ret;
	}
	if (isset($hiddenInterface)) {
	    $ret = $hiddenInterface->hideItem($this->_item);
	    if ($ret) {
		return $ret;
	    }
	    GalleryDataCache::reset();

	    $ret = $module->onLoad($this->_item, false);
	    if ($ret) {
		return $ret;
	    }
	    $this->assertEquals(array("header Location: $redirect", 'exit'),
				$this->_calls, 'password+hidden');
	}
    }

    function testOnLoadNoPersistentSession() {
	global $gallery;
	$backup = $gallery->_session;
	/* Make sure the redirect has no sessionId in it */
	GalleryUtilities::removeRequestVariable(SESSION_ID_PARAMETER);
	unset($_COOKIE[SESSION_ID_PARAMETER]);
	unset($_SERVER['HTTP_COOKIE']);
	$session = new GallerySession();
	$ret = $session->init();
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(false, $session->isUsingCookies(), 'isUsingCookies');
	$this->assertEquals(SESSION_TEMP_ID, $session->getId(), 'temp session id');

	$gallery->_phpVm = $phpVm = new PasswordEntryPhpVm($this);
	$this->_calls = array();

	$gallery->_session = $session;

	$this->_becomeGuestUser();
	GalleryUtilities::putRequestVariable('view', 'core.ShowItem');
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());

	/* Execute the test */
	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'password');
	if ($ret) {
	    return $ret;
	}
	$ret = $module->onLoad($this->_item, false);
	if ($ret) {
	    return $ret;
	}

	/* Verify results */
	$urlGenerator =& $gallery->getUrlGenerator();
	$baseUrl = $urlGenerator->getCurrentUrlDir();
	$redirect = $baseUrl . 'main.php?g2_view=password.PasswordEntry&g2_itemId=' .
			$this->_item->getId();
	$this->assertEquals(array("header Location: $redirect", 'exit'),
			    $this->_calls, 'redirect');

	$gallery->_session = $backup;
    }

    function testPlugins1() {
	/* Wrong password and plugin error.. plugin error should abort password check */
	GalleryUtilities::putRequestVariable('form[action][password]', 1);
	GalleryUtilities::putRequestVariable('form[itemId]', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[password]', 'wrong-password');

	$ret = $this->_markPluginParametersForCleanup('module', 'password');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'password', 'validation.level', 'HIGH');
	if ($ret) {
	    return $ret;
	}

	$plugin = new PasswordEntryControllerTestPlugin();
	$plugin->setErrors(array('form[error][PasswordEntryControllerTestPlugin][anError]'));
	$plugin->setContinue(false);
	$this->_controller->_pluginInstances = array($plugin);

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'password.PasswordEntry'),
		  'status' => array(),
		  'error' => array('form[error][PasswordEntryControllerTestPlugin][anError]')),
	    $results);
    }

    function testPlugins2() {
	/* Wrong password but plugin ok.. should get error from password check */
	GalleryUtilities::putRequestVariable('form[action][password]', 1);
	GalleryUtilities::putRequestVariable('form[itemId]', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[password]', 'wrong-password');

	$ret = $this->_markPluginParametersForCleanup('module', 'password');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'password', 'validation.level', 'HIGH');
	if ($ret) {
	    return $ret;
	}

	$plugin = new PasswordEntryControllerTestPlugin();
	$plugin->setErrors(array());
	$plugin->setContinue(true);
	$this->_controller->_pluginInstances = array($plugin);

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'password.PasswordEntry'),
		  'status' => array(),
		  'error' => array('form[error][incorrectPassword]')),
	    $results);
    }

    function testValidationPluginOff() {
	GalleryUtilities::putRequestVariable('form[action][password]', 1);
	GalleryUtilities::putRequestVariable('form[itemId]', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[password]', 'wrong-password');

	$ret = $this->_markPluginParametersForCleanup('module', 'password');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'password', 'validation.level', 'OFF');
	if ($ret) {
	    return $ret;
	}

	$plugin = new PasswordEntryControllerTestPlugin();
	$plugin->setErrors(array('form[error][PasswordEntryControllerTestPlugin][anError]'));
	$plugin->setContinue(false);
	$this->_controller->_pluginInstances = array($plugin);

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'password.PasswordEntry'),
		  'status' => array(),
		  'error' => array('form[error][incorrectPassword]')),
	    $results);
    }
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryPhpVm.class');

/**
 * PhpVm for onLoad tests
 */
class PasswordEntryPhpVm extends GalleryPhpVm {
    function PasswordEntryPhpVm(&$test) {
	$this->_test =& $test;
    }

    function header($header) {
	$this->_test->_calls[] = 'header ' . $header;
    }

    function exit_($status=null) {
	$this->_test->_calls[] = 'exit';
    }
}

/**
 * Mock ValidationPlugin
 */
class PasswordEntryControllerTestPlugin extends GalleryValidationPlugin {
    function setContinue($continue) {
	$this->_continue = $continue;
    }

    function setErrors($errors) {
	$this->_errors = $errors;
    }

    function performValidation(&$form, $options=array()) {
	return array(null, $this->_errors, $this->_continue);
    }
}
?>
