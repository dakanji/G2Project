<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test RatingAlbum view
 *
 * @package Rating
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class RatingAlbumTest extends GalleryTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		global $gallery;
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}
		GalleryCoreApi::requireOnce('modules/rating/classes/RatingHelper.class');

		list($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_album);

		for ($i = 1; $i <= 3; $i++) {
			list($ret, $this->_items[$i]) = $this->_createRandomDataItem($this->_album->getId());

			if ($ret) {
				return $ret;
			}
			list($ret) = RatingHelper::rateItem(
				$this->_items[$i]->getId(),
				5 - $i,
				$gallery->getActiveUserId()
			);

			if ($ret) {
				return $ret;
			}
		}

		list($ret, $this->_view) = GalleryView::doStatic()->loadView('rating.RatingAlbum');

		if ($ret) {
			return $ret;
		}

		GalleryCoreApi::requireOnce('modules/core/classes/GalleryTemplate.class');
		$this->_template = new GalleryTemplate(dirname(dirname(dirname(dirname(__DIR__)))));

		$ret = $this->_markPluginParametersForCleanup('module', 'rating');

		if ($ret) {
			return $ret;
		}

		foreach (array(
			'minLimit' => '2.25',
			'orderBy'  => 'RatingSortOrder',
		) as $key => $value) {
			$ret = GalleryCoreApi::setPluginParameter('module', 'rating', $key, $value);

			if ($ret) {
				return $ret;
			}
		}
	}

	public function testLoadThemeAndSettingsForAlbum() {
		$ret = GalleryCoreApi::setPluginParameter('module', 'rating', 'description', 'test desc');

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('limit', '4');

		list($ret, $theme, $params, $item) = $this->_view->loadThemeAndParameters();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(GalleryUtilities::isA($theme, 'GalleryTheme'), 'theme');
		$this->assertTrue(is_array($params), 'theme settings');
		$this->assertTrue(GalleryUtilities::isA($item, 'GalleryDynamicAlbum'), 'item');
		$this->assertTrue(!isset($item->parent), 'item parent');
		$this->assertEquals('test desc', $item->getDescription(), 'description');
	}

	public function testLoadThemeAndSettingsForItem() {
		$ret = GalleryCoreApi::setPluginParameter('module', 'rating', 'description', 'test desc');

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('limit', '3.6');
		GalleryUtilities::putRequestVariable('itemId', $this->_items[1]->getId());

		list($ret, $theme, $params, $item) = $this->_view->loadThemeAndParameters();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(GalleryUtilities::isA($theme, 'GalleryTheme'), 'theme');
		$this->assertTrue(is_array($params), 'theme settings');
		$this->assertTrue(GalleryUtilities::isA($item, 'GalleryDataItem'), 'item');
		$this->assertTrue(isset($item->parent), 'item parent');
		$this->assertTrue(GalleryUtilities::isA($item->parent, 'GalleryDynamicAlbum'), 'parent type');
		$this->assertEquals(
			array('RatingAlbumView', 'getChildIds'),
			$item->parent->getChildrenFunction,
			'get children function'
		);
	}

	public function testLoadTemplateForAlbum() {
		global $gallery;
		$theme                 =& $this->_template->getVariableByReference('theme');
		$theme['actingUserId'] = $gallery->getActiveUserId();

		GalleryUtilities::putRequestVariable('limit', '3.45');

		$form               = array();
		list($ret, $result) = $this->_view->loadTemplate($this->_template, $form);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'view'  => 'rating.RatingAlbum',
				'limit' => '3.45',
			),
			$theme['pageUrl'],
			'page url'
		);
		$this->assertTrue(in_array($this->_items[1]->getId(), $theme['allChildIds']), 'item 1');
		$this->assertTrue(!in_array($this->_items[2]->getId(), $theme['allChildIds']), 'item 2');
		$this->assertTrue(!in_array($this->_items[3]->getId(), $theme['allChildIds']), 'item 3');
	}

	public function testLoadTemplateForItem() {
		list($ret, $count) = GalleryCoreApi::fetchItemViewCount($this->_items[2]->getId());

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(0, $count, 'count before');

		GalleryUtilities::putRequestVariable('limit', '3');
		GalleryUtilities::putRequestVariable('itemId', $this->_items[2]->getId());

		$form               = array();
		list($ret, $result) = $this->_view->loadTemplate($this->_template, $form);

		if ($ret) {
			return $ret;
		}

		$theme =& $this->_template->getVariableByReference('theme');
		$this->assertEquals(
			array(
				'view'  => 'rating.RatingAlbum',
				'limit' => '3',
			),
			$theme['pageUrl'],
			'page url'
		);

		list($ret, $count) = GalleryCoreApi::fetchItemViewCount($this->_items[2]->getId());

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(1, $count, 'count after');
	}

	public function testLoadTemplateForItemNoPermission() {
		$ret = GalleryCoreApi::removeItemPermissions($this->_items[1]->getId());

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('limit', '4');
		GalleryUtilities::putRequestVariable('itemId', $this->_items[1]->getId());

		// ShowItem handling used to redirect to root album; now returns permission error

		$form               = array();
		list($ret, $result) = $this->_view->loadTemplate($this->_template, $form);

		if ($ret) {
			$this->assertTrue($ret->getErrorCode() & ERROR_MISSING_OBJECT, 'wrong error code');

			if (!($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
				return $ret;
			}
		} else {
			$this->fail('expected error');
		}
	}

	public function testLimitTooLow() {
		GalleryUtilities::putRequestVariable('limit', '1.5');

		$form               = array();
		list($ret, $result) = $this->_view->loadTemplate($this->_template, $form);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'redirect' => array(
					'view'  => 'rating.RatingAlbum',
					'limit' => '2.25',
				),
			),
			$result,
			'redirect'
		);
	}
}
