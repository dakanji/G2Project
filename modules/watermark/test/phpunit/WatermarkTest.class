<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/watermark/classes/WatermarkHelper.class');
GalleryCoreApi::requireOnce('modules/watermark/classes/WatermarkImage.class');

/**
 * Test WatermarkHelper functionality
 * @package Watermark
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class WatermarkTest extends GalleryTestCase {

    function WatermarkTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	$this->_registerEventListener('GalleryEntity::delete', new WatermarkModule());

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_user) = $this->_createUser();
	if ($ret) {
	    return $ret;
	}
	$this->_saveUser = $gallery->getActiveUser();
	$gallery->setActiveUser($this->_user);

	/* Create a watermark */
	$watermark = new WatermarkImage();
	$ret = $watermark->create(__FILE__, 'test/file', 'phpunit_' . rand() . '.gif');
	if ($ret) {
	    return $ret;
	}

	$ret = $watermark->save();
	if ($ret) {
	    return $ret;
	}

	$this->_watermark = $watermark;
	$this->_markForCleanup($this->_user);
    }

    function testFetchWatermarks1() {
	/* We never gave permission to our test watermark, so it shouldn't show up */
	list ($ret, $watermarks) = WatermarkHelper::fetchWatermarks();
	if ($ret) {
	    return $ret;
	}

	$this->assert(!isset($watermarks[$this->_watermark->getId()]),
		      'Watermark appears when it shouldn\'t');
    }

    function testFetchWatermarks2() {
	global $gallery;

	/* Give permission for us to see the watermark */
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_watermark->getId(), $gallery->getActiveUserId(), 'core.all');
	if ($ret) {
	    return $ret;
	}
	list ($ret, $watermarks) = WatermarkHelper::fetchWatermarks();
	if ($ret) {
	    return $ret;
	}

	$this->assert(isset($watermarks[$this->_watermark->getId()]),
		      'Watermark doesn\'t appear when it should');
	$this->assertEquals($this->_watermark, $watermarks[$this->_watermark->getId()]);
    }

    function testFetchWatermarksByOwnerId1() {
	global $gallery;

	list ($ret, $watermarkIds) =
	    WatermarkHelper::fetchWatermarkIdsByOwnerId($gallery->getActiveUserId());
	if ($ret) {
	    return $ret;
	}

	$this->assert(in_array($this->_watermark->getId(), $watermarkIds),
		      'Watermark doesn\'t appear when it should');
    }

    function testFetchWatermarksByOwnerId2() {
	/* Use a random/bogus user id */
	list ($ret, $watermarkIds) = WatermarkHelper::fetchWatermarkIdsByOwnerId(1234567);
	if ($ret) {
	    return $ret;
	}

	$this->assert(!in_array($this->_watermark->getId(), $watermarkIds),
		      'Watermark appears when it shouldn\'t');
    }

    function testWatermarkItem() {
	/* Create an item to watermark */
	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId(), 'test/file');
	if ($ret) {
	    return $ret;
	}

	/* Give it some derivatives */
	list ($ret, $preferred) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED, 'rotate|90');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $thumbnail) = $this->_createDerivative(
	    $item, $preferred->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
	    'crop|10,10,30,40;scale|200');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $resize) = $this->_createDerivative($item, $preferred->getId(),
							DERIVATIVE_TYPE_IMAGE_RESIZE, 'scale|500');
	if ($ret) {
	    return $ret;
	}

	/* Apply the watermark */
	$ret = WatermarkHelper::watermarkItem($this->_watermark, $item, '1.1', '2.2',
					      array(DERIVATIVE_TYPE_IMAGE_PREFERRED => true,
						    DERIVATIVE_TYPE_IMAGE_THUMBNAIL => true,
						    DERIVATIVE_TYPE_IMAGE_RESIZE => true));
	if ($ret) {
	    return $ret;
	}

	/* Verify that it went properly */
	$filter =
	    sprintf('composite|plugins_data/modules/watermark/%s,test/file,0,0,manual,1.100,2.200',
		    $this->_watermark->getFileName());
	foreach (array($preferred, $resize, $thumbnail) as $derivative) {
	    list ($ret, $derivative) = $derivative->refresh();
	    if ($ret) {
		return $ret;
	    }
	    $this->assertEquals($filter, $derivative->getPostFilterOperations());
	}
    }

    function testReplaceWatermark() {
	/* Create an item to watermark */
	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId(), 'test/file');
	if ($ret) {
	    return $ret;
	}

	/* Give it a thumbnail with a watermark */
	list ($ret, $thumbnail) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL, 'rotate|90',
	    'test/file', array('postFilterOperations' => 'composite|plugins_data/modules/' .
			       'watermark/foo,test/file,0,0,manual,9,8'));
	if ($ret) {
	    return $ret;
	}

	/* Apply a second watermark */
	$ret = WatermarkHelper::watermarkItem($this->_watermark, $item, '1.1', '2.2',
					      array(DERIVATIVE_TYPE_IMAGE_PREFERRED => false,
						    DERIVATIVE_TYPE_IMAGE_THUMBNAIL => true,
						    DERIVATIVE_TYPE_IMAGE_RESIZE => false));
	if ($ret) {
	    return $ret;
	}

	/* Verify that it went properly */
	$filter =
	    sprintf('composite|plugins_data/modules/watermark/%s,test/file,0,0,manual,1.100,2.200',
		    $this->_watermark->getFileName());

	list ($ret, $thumbnail) = $thumbnail->refresh();
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals($filter, $thumbnail->getPostFilterOperations());
    }

    function testWatermarkItemCreatedPreferred() {
	/* Create an item to watermark */
	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId(), 'test/file');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $thumbnail) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL, 'crop|10,10,30,40;scale|200');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $resize) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE, 'scale|500');
	if ($ret) {
	    return $ret;
	}

	/* Apply the watermark */
	$ret = WatermarkHelper::watermarkItem($this->_watermark, $item, '1.1', '2.2',
					      array(DERIVATIVE_TYPE_IMAGE_PREFERRED => true,
						    DERIVATIVE_TYPE_IMAGE_THUMBNAIL => true,
						    DERIVATIVE_TYPE_IMAGE_RESIZE => true));
	if ($ret) {
	    return $ret;
	}

	/* Verify that we have a preferred now */
	$filter =
	    sprintf('composite|plugins_data/modules/watermark/%s,test/file,0,0,manual,1.100,2.200',
		    $this->_watermark->getFileName());
	list ($ret, $table) = GalleryCoreApi::fetchPreferredsByItemIds(array($item->getId()));
	if ($ret) {
	    return $ret;
	}

	if (!empty($table[$item->getId()])) {
	    $preferred = $table[$item->getId()];
	    $this->assertEquals($filter, $preferred->getPostFilterOperations());

	    /* Verify that the thumb/resizes are remapped to the preferred */
	    foreach (array($resize, $thumbnail) as $derivative) {
		list ($ret, $derivative) = $derivative->refresh();
		if ($ret) {
		    return $ret;
		}
		$this->assertEquals($preferred->getId(), $derivative->getDerivativeSourceId());
	    }
	} else {
	    $this->assert(false, 'missing preferred');
	}
    }

    function testWatermarkItemDeletePreferred() {
	/* Create an item to watermark */
	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId(), 'test/file');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $preferred) = $this->_createDerivative($item, $item->getId(),
							   DERIVATIVE_TYPE_IMAGE_PREFERRED, '');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $thumbnail) = $this->_createDerivative(
	    $item, $preferred->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
	    'crop|10,10,30,40;scale|200');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $resize) = $this->_createDerivative($item, $preferred->getId(),
							DERIVATIVE_TYPE_IMAGE_RESIZE, 'scale|500');
	if ($ret) {
	    return $ret;
	}

	/* Apply the watermark */
	$ret = WatermarkHelper::watermarkItem($this->_watermark, $item, '1.1', '2.2',
					      array(DERIVATIVE_TYPE_IMAGE_PREFERRED => false,
						    DERIVATIVE_TYPE_IMAGE_THUMBNAIL => true,
						    DERIVATIVE_TYPE_IMAGE_RESIZE => true));
	if ($ret) {
	    return $ret;
	}

	/* Verify that we have a preferred now */
	$filter =
	    sprintf('composite|plugins_data/modules/watermark/%s,test/file,0,0,manual,1.100,2.200',
		    $this->_watermark->getFileName());
	list ($ret, $table) = GalleryCoreApi::fetchPreferredsByItemIds(array($item->getId()));
	if ($ret) {
	    return $ret;
	}

	$this->assert(empty($table[$item->getId()]), 'preferred is not gone!');

	/* Verify that the thumb/resizes are remapped to the source id */
	foreach (array($resize, $thumbnail) as $derivative) {
	    list ($ret, $derivative) = $derivative->refresh();
	    if ($ret) {
		return $ret;
	    }
	    $this->assertEquals($item->getId(), $derivative->getDerivativeSourceId());
	}
    }
}
?>
