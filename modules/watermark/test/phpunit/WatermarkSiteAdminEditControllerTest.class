<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/watermark/classes/WatermarkImage.class');

/**
 * WatermarkSiteAdminEdit controller tests
 * @package Watermark
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17580 $
 */
class WatermarkSiteAdminEditControllerTest extends GalleryControllerTestCase {

    function WatermarkSiteAdminEditControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'watermark.WatermarkSiteAdminEdit');
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	$this->_registerEventListener('GalleryEntity::delete', new WatermarkModule());

	/* Create a watermark */
	$watermark = new WatermarkImage();
	$ret = $watermark->create(__FILE__, 'test/file', 'phpunit_' . rand() . '.gif');
	if ($ret) {
	    return $ret;
	}

	$ret = $watermark->save();
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($watermark);

	$ret = GalleryCoreApi::addUserPermission(
	    $watermark->getId(), $gallery->getActiveUserId(), 'core.all');
	if ($ret) {
	    return $ret;
	}

	$this->_watermark = $watermark;
    }

    function testEditWatermarkEverything() {
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[watermarkName]', 'foo bar');
	GalleryUtilities::putRequestVariable('form[xPercentage]', '25.51');
	GalleryUtilities::putRequestVariable('form[yPercentage]', '50.12');
	GalleryUtilities::putRequestVariable('form[whichDerivative][preferred]', 'on');
	GalleryUtilities::putRequestVariable('form[whichDerivative][resizes]', 'on');
	GalleryUtilities::putRequestVariable('form[whichDerivative][thumbnail]', 'on');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'watermark.WatermarkSiteAdmin'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	/* Verify the watermark */
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('foo bar', $this->_watermark->getName());
	$this->assertEquals('25.51', $this->_watermark->getXPercentage());
	$this->assertEquals('50.12', $this->_watermark->getYPercentage());
	$this->assert($this->_watermark->getApplyToPreferred(), 'missing preferred');
	$this->assert($this->_watermark->getApplyToResizes(), 'missing resizes');
	$this->assert($this->_watermark->getApplyToThumbnail(), 'missing thumbnail');
    }

    function testEditWatermarkThumbnailOnly() {
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[watermarkName]', 'foo bar');
	GalleryUtilities::putRequestVariable('form[xPercentage]', '25.51');
	GalleryUtilities::putRequestVariable('form[yPercentage]', '50.12');
	GalleryUtilities::putRequestVariable('form[whichDerivative][thumbnail]', 'on');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'watermark.WatermarkSiteAdmin'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	/* Verify the watermark */
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('foo bar', $this->_watermark->getName());
	$this->assertEquals('25.51', $this->_watermark->getXPercentage());
	$this->assertEquals('50.12', $this->_watermark->getYPercentage());
	$this->assert(!$this->_watermark->getApplyToPreferred(), 'shouldn\'t have preferred');
	$this->assert(!$this->_watermark->getApplyToResizes(), 'shouldn\'t have resizes');
	$this->assert($this->_watermark->getApplyToThumbnail(), 'missing thumbnail');
    }

    function testEditMissingEverything() {
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array(
				      'view' => 'core.SiteAdmin',
				      'subView' => 'watermark.WatermarkSiteAdminEdit'),
				  'status' => array(),
				  'error' => array('form[error][watermarkName][missing]',
						   'form[error][whichDerivative][missing]')),
			    $results);

	/* Verify the watermark */
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(1, $this->_watermark->getSerialNumber());
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'watermark.WatermarkSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	/* Verify the watermark */
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(1, $this->_watermark->getSerialNumber());
    }

    function testBadCoordinates() {
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[watermarkName]', 'foo bar');
	GalleryUtilities::putRequestVariable('form[xPercentage]', '101.51');
	GalleryUtilities::putRequestVariable('form[yPercentage]', '-5.12');
	GalleryUtilities::putRequestVariable('form[whichDerivative][thumbnail]', 'on');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'watermark.WatermarkSiteAdmin'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	/* Verify the watermark */
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('100', $this->_watermark->getXPercentage());
	$this->assertEquals('0', $this->_watermark->getYPercentage());
    }

    function testReplaceImage() {
	$this->_replaceImageTest('test/file');
    }

    function testReplaceImageWrongType() {
	$this->_replaceImageTest('test/blah', 'zzz');
    }

    function _replaceImageTest($postMimeType, $ext='yyy') {
	global $gallery;
	$platform =& $gallery->getPlatform();

	list ($ret, $item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($item);
	list ($ret, $derivative) = $this->_createDerivative($item, $item->getId(),
		DERIVATIVE_TYPE_IMAGE_RESIZE, 'test-operation|400', 'test/file',
		array('postFilterOperations' => 'composite|plugins_data/modules/watermark/'
		    . $this->_watermark->getFileName() . ',params'));
	if ($ret) {
	    return $ret;
	}
	list ($ret, $derivativeFile) = $derivative->fetchPath();
	if ($ret) {
	    return $ret;
	}
	if (!GalleryUtilities::guaranteeDirExists(dirname($derivativeFile))) {
	    return GalleryCoreApi::error(ERROR_PLATFORM_FAILURE);
	}
	if (!$platform->copy(__FILE__, $derivativeFile)) {
	    return GalleryCoreApi::error(ERROR_PLATFORM_FAILURE);
	}
	$ret = GalleryCoreApi::addMimeType('yyy', 'test/file', false);
	if ($ret) {
	    return $ret;
	}

	$sourceFile = dirname(dirname(__FILE__)) . '/data/UserWatermarkControllerTestFile.' . $ext;
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[watermarkName]', $this->_watermark->getName());
	GalleryUtilities::putRequestVariable('form[xPercentage]', '50.00');
	GalleryUtilities::putRequestVariable('form[yPercentage]', '80.00');
	GalleryUtilities::putRequestVariable('form[whichDerivative][thumbnail]', 'on');
	GalleryUtilities::putRequestVariable('form[tmp_name][1]', $sourceFile);
	GalleryUtilities::putRequestVariable('form[type][1]', $postMimeType);
	GalleryUtilities::putRequestVariable('form[name][1]', 'file.class');

	$results = $this->handleRequest();
	$expected = ($postMimeType == 'test/file')
	    ? array('redirect' => array('view' => 'core.SiteAdmin',
					'subView' => 'watermark.WatermarkSiteAdmin'),
		    'status' => array('saved' => 1),
		    'error' => array())
	    : array('delegate' => array('view' => 'core.SiteAdmin',
					'subView' => 'watermark.WatermarkSiteAdminEdit'),
		    'status' => array(),
		    'error' => array('form[error][mimeType][mismatch]'));
	$this->assertEquals($expected, $results);

	$ret = GalleryCoreApi::removeMimeType(array('extension' => 'yyy'));
	if ($ret) {
	    return ($ret);
	}

	/* Verify the watermark */
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret) {
	    return $ret;
	}

	$expected = ($postMimeType == 'test/file')
	    ? array('50', '80', $platform->filesize($sourceFile), false)
	    : array('100', '100', $platform->filesize(__FILE__), true);
	$this->assertEquals($expected[0], $this->_watermark->getXPercentage(), 'x');
	$this->assertEquals($expected[1], $this->_watermark->getYPercentage(), 'y');
	$this->assertEquals($expected[2], $this->_watermark->getSize(), 'size');
	$this->assertEquals($expected[3], $platform->file_exists($derivativeFile),
			    'derivative cache');
    }
}
?>
