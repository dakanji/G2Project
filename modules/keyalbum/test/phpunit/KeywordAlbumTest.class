<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test KeywordAlbum view and module
 *
 * @package KeyAlbum
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class KeywordAlbumTest extends GalleryTestCase {
	public function __construct($methodName) {
		parent::__construct($methodName);
	}

	public function setUp($x1 = null) {
		$ret = parent::setUp();

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_album) = $this->_createRandomAlbum(
			$this->_getRootId(),
			array(
				'keywords' => 'abc test&amp;key def',
			)
		);

		if ($ret) {
			return $ret;
		}
		$this->_markForCleanup($this->_album);

		list($ret, $this->_item) = $this->_createRandomDataItem(
			$this->_album->getId(),
			'test/item',
			array(
				'keywords' => 'test&amp;key;foo,fun,time',
			)
		);

		if ($ret) {
			return $ret;
		}

		list($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', 'keyalbum');

		if ($ret) {
			return $ret;
		}
		list($ret, $this->_view) = GalleryView::doStatic()->loadView('keyalbum.KeywordAlbum');

		if ($ret) {
			return $ret;
		}

		$ret = $this->_markPluginParametersForCleanup('module', 'keyalbum');

		if ($ret) {
			return $ret;
		}
		$ret = $this->_module->setParameter('split', ';,\s');

		if ($ret) {
			return $ret;
		}

		GalleryCoreApi::requireOnce('modules/core/classes/GalleryTemplate.class');
		$this->_template = new GalleryTemplate(dirname(dirname(dirname(dirname(__DIR__)))));
	}

	public function testLoadThemeAndSettingsForAlbum() {
		$ret = $this->_markPluginParametersForCleanup('module', 'keyalbum');

		if ($ret) {
			return $ret;
		}
		$ret = GalleryCoreApi::setPluginParameter('module', 'keyalbum', 'description', 'desc');

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('keyword', 'testkey');

		list($ret, $theme, $params, $item) = $this->_view->loadThemeAndParameters();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(GalleryUtilities::isA($theme, 'GalleryTheme'), 'theme');
		$this->assertTrue(is_array($params), 'theme settings');
		$this->assertTrue(GalleryUtilities::isA($item, 'GalleryDynamicAlbum'), 'item');
		$this->assertTrue(!isset($item->parent), 'item parent');
		$this->assertEquals('desc', $item->getDescription(), 'description');
	}

	public function testLoadThemeAndSettingsForItem() {
		GalleryUtilities::putRequestVariable('keyword', 'testkey');
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());

		list($ret, $theme, $params, $item) = $this->_view->loadThemeAndParameters();

		if ($ret) {
			return $ret;
		}

		$this->assertTrue(GalleryUtilities::isA($theme, 'GalleryTheme'), 'theme');
		$this->assertTrue(is_array($params), 'theme settings');
		$this->assertTrue(GalleryUtilities::isA($item, 'GalleryDataItem'), 'item');
		$this->assertTrue(isset($item->parent), 'item parent');
		$this->assertTrue(GalleryUtilities::isA($item->parent, 'GalleryDynamicAlbum'), 'parent type');
		$this->assertEquals(
			array('KeywordAlbumView', 'getChildIds'),
			$item->parent->getChildrenFunction,
			'get children function'
		);
	}

	public function testLoadTemplateForAlbum() {
		global $gallery;
		$theme                 =& $this->_template->getVariableByReference('theme');
		$theme['actingUserId'] = $gallery->getActiveUserId();

		GalleryUtilities::putRequestVariable('keyword', 'test&key');

		$form               = array();
		list($ret, $result) = $this->_view->loadTemplate($this->_template, $form);

		if ($ret) {
			return $ret;
		}

		// Keyword param should be unsanitized as it will be resanitized when URL is used
		$this->assertEquals(
			array(
				'view'    => 'keyalbum.KeywordAlbum',
				'keyword' => 'test&key',
			),
			$theme['pageUrl'],
			'page url'
		);
		$this->assertTrue(in_array($this->_album->getId(), $theme['allChildIds']), 'album id');
		$this->assertTrue(in_array($this->_item->getId(), $theme['allChildIds']), 'item id');
	}

	public function testLoadTemplateForAlbumMultiKeyword() {
		global $gallery;
		$theme                 =& $this->_template->getVariableByReference('theme');
		$theme['actingUserId'] = $gallery->getActiveUserId();

		// Query for items with both testkey and fun keywords
		GalleryUtilities::putRequestVariable('keyword', 'test&key,fun');

		$form               = array();
		list($ret, $result) = $this->_view->loadTemplate($this->_template, $form);

		if ($ret) {
			return $ret;
		}

		$this->assertEquals(
			array(
				'view'    => 'keyalbum.KeywordAlbum',
				'keyword' => 'test&key,fun',
			),
			$theme['pageUrl'],
			'page url'
		);
		$this->assertTrue(!in_array($this->_album->getId(), $theme['allChildIds']), 'album id');
		$this->assertTrue(in_array($this->_item->getId(), $theme['allChildIds']), 'item id');
	}

	public function testLoadTemplateForItem() {
		list($ret, $count) = GalleryCoreApi::fetchItemViewCount($this->_item->getId());

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(0, $count, 'count before');

		GalleryUtilities::putRequestVariable('keyword', 'testkey');
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());

		$form               = array();
		list($ret, $result) = $this->_view->loadTemplate($this->_template, $form);

		if ($ret) {
			return $ret;
		}

		$theme =& $this->_template->getVariableByReference('theme');
		$this->assertEquals(
			array(
				'view'    => 'keyalbum.KeywordAlbum',
				'keyword' => 'testkey',
			),
			$theme['pageUrl'],
			'page url'
		);

		list($ret, $count) = GalleryCoreApi::fetchItemViewCount($this->_item->getId());

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(1, $count, 'count after');
	}

	public function testLoadTemplateForItemNoPermission() {
		$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());

		if ($ret) {
			return $ret;
		}
		$ret = $this->_becomeGuestUser();

		if ($ret) {
			return $ret;
		}

		GalleryUtilities::putRequestVariable('keyword', 'testkey');
		GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());

		$form               = array();
		list($ret, $result) = $this->_view->loadTemplate($this->_template, $form);

		if ($ret) {
			$this->assertTrue($ret->getErrorCode() & ERROR_MISSING_OBJECT, 'wrong error code');

			if (!($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
				return $ret;
			}
		} else {
			$this->fail('expected error');
		}
	}

	public function testItemSummaries() {
		$itemList    = array($this->_album, $this->_item);
		$idList      = array($this->_album->getId(), $this->_item->getId());
		$permissions = array();
		$ret         = $this->_module->setParameter('summaryLinks', 'all');

		if ($ret) {
			return $ret;
		}
		GalleryUtilities::putRequestVariable('view', 'test.TestView');

		$unused                = null;
		list($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions, $unused);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals($idList, array_keys($summaries), 'all');
		$this->assertEquals(3, substr_count($summaries[$idList[0]], '<a href'), '3 album keywords');
		$this->assertEquals(4, substr_count($summaries[$idList[1]], '<a href'), '4 item keywords');

		$ret = $this->_module->setParameter('summaryLinks', 'none');

		if ($ret) {
			return $ret;
		}
		GalleryUtilities::putRequestVariable('view', 'keyalbum.KeywordAlbum');

		list($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions, $unused);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(array(), $summaries, 'none');

		$ret = $this->_module->setParameter('split', ',');

		if ($ret) {
			return $ret;
		}
		$ret = $this->_module->setParameter('summaryLinks', 'key');

		if ($ret) {
			return $ret;
		}

		list($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions, $unused);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals($idList, array_keys($summaries), 'key');
		$this->assertEquals(1, substr_count($summaries[$idList[0]], '<a href'), '1 album keyword');
		$this->assertEquals(3, substr_count($summaries[$idList[1]], '<a href'), '3 item keywords');

		GalleryUtilities::putRequestVariable('view', 'core.ShowItem');
		list($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions, $unused);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(array(), $summaries, 'key not');

		$ret = $this->_module->setParameter('split', ';\s');

		if ($ret) {
			return $ret;
		}
		$ret = $this->_module->setParameter('summaryLinks', 'album');

		if ($ret) {
			return $ret;
		}

		list($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions, $unused);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals($idList, array_keys($summaries), 'album');
		$this->assertEquals(3, substr_count($summaries[$idList[0]], '<a href'), 'album keywords');
		$this->assertEquals(2, substr_count($summaries[$idList[1]], '<a href'), '2 item keywords');

		GalleryUtilities::putRequestVariable('view', 'keyalbum.KeywordAlbum');
		list($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions, $unused);

		if ($ret) {
			return $ret;
		}
		$this->assertEquals(array(), $summaries, 'album not');
	}
}
