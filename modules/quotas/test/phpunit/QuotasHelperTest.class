<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/quotas/classes/GalleryQuotasHelper.class');
GalleryCoreApi::requireOnce('modules/core/classes/GallerySmarty.class');
GalleryCoreApi::requireOnce('modules/quotas/Callbacks.inc');

/**
 * Test Quotas functionality
 * @package Quotas
 * @subpackage PHPUnit
 * @author Robert Balousek <volksport@users.sf.net>
 * @version $Revision: 17580 $
 */
class QuotasHelperTest extends GalleryTestCase {

    function QuotasHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	/* Create a container album for any data items we create */
	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_album);

	/* Create a dummy user */
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_user);

	/* Create dummy group */
	list ($ret, $this->_group) = $this->_createRandomGroup();
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_group);

	/* Save/clear quotas for All Users,Everybody groups so they won't interfere with tests */
	$this->_saveQuota = array();
	foreach (array('allUserGroup', 'everybodyGroup') as $groupName) {
	    list ($ret, $groupId) =
		GalleryCoreApi::getPluginParameter('module', 'core', 'id.' . $groupName);
	    if ($ret) {
		return $ret;
	    }
	    list ($ret, $hasQuota, $quota) = GalleryQuotasHelper::fetchGroupQuota($groupId);
	    if ($ret) {
		return $ret;
	    }
	    if ($hasQuota) {
		$this->_saveQuota[$groupId] = $quota;
		$ret = GalleryCoreApi::removeMapEntry(
		    'QuotasMap', array('userOrGroupId' => $groupId));
		if ($ret) {
		    return $ret;
		}
	    }
	}

	list ($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', 'quotas');
	if ($ret) {
	    return $ret;
	}
	$this->_KB = $this->_module->translate('KB');
	$this->_MB = $this->_module->translate('MB');
	$this->_GB = $this->_module->translate('GB');
    }

    function tearDown() {
	foreach ($this->_saveQuota as $groupId => $quota) {
	    $ret = GalleryCoreApi::addMapEntry(
		'QuotasMap',
		array('userOrGroupId' => $groupId, 'quotaSize' => $quota['quota']));
	    if ($ret) {
		return $ret;
	    }
	}
	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}
    }

    function testGetUserDiskUsage() {

	/* check the user's usage, it should be zero */
	list ($ret, $userDiskUsage) = GalleryQuotasHelper::getUserDiskUsage($this->_user->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(0, $userDiskUsage, 'User\'s disk usage is incorrect!');

	/* Create 3 dummy items */
	$this->_item = array();
	for ($j = 0; $j < 3; $j++) {
	    list ($ret, $this->_item[$j]) =
		$this->_createRandomDataItem($this->_album->getId(),
					     'application/unknown',
					     array('ownerId' => $this->_user->getId(),
						   'size' => 102400 + ($j * 1024)));
	    if ($ret) {
		return $ret;
	    }
	}

	/* check the user's usage after adding 3 items, loop as itemaddoption would require */
	$expectedUsage = 0;
	for ($j = 0; $j < count($this->_item); $j++) {
	    $excludeIds = array();
	    for ($i = count($this->_item) - 1; $i > $j; $i--) {
		$excludeIds[$i] = $this->_item[$i]->getId();
	    }
	    list ($ret, $userDiskUsage) =
		GalleryQuotasHelper::getUserDiskUsage($this->_user->getId(),
						      $excludeIds);
	    if ($ret) {
		return $ret;
	    }
	    $expectedUsage += (($j * 1024) + 102400) / 1024;
	    $this->assert($userDiskUsage == $expectedUsage,
			  'User\'s disk usage is incorrect! Item ' . $j);
	}
    }

    function testGetUserLargeDiskUsage() {
	/* check the user's usage, it should be zero */
	list ($ret, $userDiskUsage) =
	    GalleryQuotasHelper::getUserDiskUsage($this->_user->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(0, $userDiskUsage, 'User\'s disk usage is incorrect!');

	/* Create 3 dummy items */
	$this->_item = array();
	for ($j = 0; $j < 3; $j++) {
	    list ($ret, $this->_item[$j]) =
		$this->_createRandomDataItem($this->_album->getId(),
					     'application/unknown',
					     array('ownerId' => $this->_user->getId(),
						   'size' => 1073741824));
	    if ($ret) {
		return $ret;
	    }
	}

	/* check the user's usage after adding 3 items, loop as itemaddoption would require */
	$expectedUsage = 0;
	for ($j = 0; $j < count($this->_item); $j++) {
	    $excludeIds = array();
	    for ($i = count($this->_item) - 1; $i > $j; $i--) {
		$excludeIds[$i] = $this->_item[$i]->getId();
	    }
	    list ($ret, $userDiskUsage) =
		GalleryQuotasHelper::getUserDiskUsage($this->_user->getId(),
						      $excludeIds);
	    if ($ret) {
		return $ret;
	    }
	    $expectedUsage += 1048576;
	    $this->assertEquals($expectedUsage, $userDiskUsage,
				'User\'s disk usage is incorrect! Item ' . $j);
	}
    }

    function testGetUserDiskQuota() {
	/* user doesn't have a quota yet */
	list ($ret, $quotaExists, $userDiskQuota) =
	    GalleryQuotasHelper::getUserDiskQuota($this->_user->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assert($quotaExists == false, 'A quota should not exist');

	/* give the user a user quota of 1MB */
	$this->_addMapEntry(array('userOrGroupId' => $this->_user->getId(),
				  'quotaSize' => 1024));

	/* user has a user quota */
	list ($ret, $quotaExists, $userDiskQuota) =
	    GalleryQuotasHelper::getUserDiskQuota($this->_user->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assert($quotaExists == true, 'A user quota should exist for this user');
	$this->assert($userDiskQuota == 1024, 'The user quota should be 1024 KB for this user');

	/* Add our dummy user to our dummy group, dummy */
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $this->_group->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryDataCache::reset();

	/* user has a user quota, and is in a group with no quota */
	list ($ret, $quotaExists, $userDiskQuota) =
	    GalleryQuotasHelper::getUserDiskQuota($this->_user->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assert($quotaExists == true, 'A user quota should exist for this user');
	$this->assert($userDiskQuota == 1024, 'The user quota should be 1024 KB for this user');

	/* add a group quota of 2MB for the new group that our user is in */
	$this->_addMapEntry(array('userOrGroupId' => $this->_group->getId(),
				  'quotaSize' => 2048));

	/* user has a user & group quota */
	list ($ret, $quotaExists, $userDiskQuota) =
	    GalleryQuotasHelper::getUserDiskQuota($this->_user->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assert($quotaExists == true, 'A user quota should exist for this user');
	$this->assert($userDiskQuota == 1024, 'The user quota should be 1024 KB for this user');

	/* remove the user quota */
	$this->_removeMapEntry(array('userOrGroupId' => $this->_user->getId()));

	/* user has a group quota(s) and no user quota */
	list ($ret, $quotaExists, $userDiskQuota) =
	    GalleryQuotasHelper::getUserDiskQuota($this->_user->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assert($quotaExists == true, 'A group quota should exist for this user');
	$this->assert($userDiskQuota == 2048, 'The group quota should be 2048 KB for this user');

	/* remove our group quota */
	$this->_removeMapEntry(array('userOrGroupId' => $this->_group->getId()));

	/* user doesn't have any quotas anymore */
	list ($ret, $quotaExists, $userDiskQuota) =
	    GalleryQuotasHelper::getUserDiskQuota($this->_user->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assert($quotaExists == false, 'A quota should not exist');
    }

    function testFetchHighestGroupQuota () {
	/* Add our dummy user to our dummy group, dummy */
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $this->_group->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryDataCache::reset();

	/* get the highest group quota */
	list ($ret, $groupQuotaExists, $groupQuotaInfo) =
	    GalleryQuotasHelper::fetchHighestGroupQuota($this->_user->getId());
	if ($ret) {
	    return $ret;
	}

	$this->assert($groupQuotaExists == false, 'A quota should not exist');

	/* add a group quota of 4KB for the new group that our user is in */
	$this->_addMapEntry(array('userOrGroupId' => $this->_group->getId(),
				  'quotaSize' => 4));

	/* get the highest group quota perhaps our new one is highest? */
	list ($ret, $groupQuotaExists, $groupQuotaInfo) =
	    GalleryQuotasHelper::fetchHighestGroupQuota($this->_user->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assert($groupQuotaExists == true, 'Quota existance failure');

	$this->assert($groupQuotaInfo['quota'] == 4, 'The group quota should be 4 KB');

	$this->_removeMapEntry(array('userOrGroupId' => $this->_group->getId()));
    }

    function testHumanReadableFromKilobytes() {
	$conversion = array('1024' => array(1.00, $this->_MB),
			    '2048' => array(2.00, $this->_MB),
			    '2.00' => array(2.00, $this->_KB),
			    '2097152.00' => array(2.00, $this->_GB),
			    '2147483648' => array(2048.00, $this->_GB),
			    '46464' => array(45.38, $this->_MB),
			    '46463' => array(45.37, $this->_MB));
	foreach ($conversion as $key => $value) {
	    list ($ret, $humanReadable, $units) =
		GalleryQuotasHelper::humanReadableFromKilobytes($key);
	    if ($ret) {
		return $ret;
	    }
	    $this->assertEquals((string)$value[0], $humanReadable, 'Incorrect value');
	    $this->assertEquals($value[1], $units, 'Incorrect units');
	}
    }

    function testFetchQuotaGroupIdList() {
	/* get the actual number of group quotas there is */
	list ($ret, $groupCount) = GalleryQuotasHelper::fetchQuotaGroupCount();
	if ($ret) {
	    return $ret;
	}
	/* now we use that as the count (+1 for good measure) */
	list ($ret, $groupIdList) = GalleryQuotasHelper::fetchQuotaGroupIdList($groupCount + 1);
	if ($ret) {
	    return $ret;
	}
	$this->assert($groupCount == count($groupIdList), 'Group count is incorrect');
	/* add a quota of 105 KB to this group */
	$this->_addMapEntry(array('userOrGroupId' => $this->_group->getId(),
				  'quotaSize' => 105));
	/* now we use that as the count (+1 for good measure) */
	list ($ret, $groupIdList) = GalleryQuotasHelper::fetchQuotaGroupIdList($groupCount + 1);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals($groupCount + 1, count($groupIdList), 'New group count is incorrect');
	$this->assertEquals(array('quota' => 105, 'name' => $this->_group->getGroupName()),
			    $groupIdList[$this->_group->getId()],
			    'New group quota doesn\'t match up');
	$this->_removeMapEntry(array('userOrGroupId' => $this->_group->getId()));
    }

    function testFetchQuotaGroupCount() {
	list ($ret, $preGroupCount) = GalleryQuotasHelper::fetchQuotaGroupCount();
	if ($ret) {
	    return $ret;
	}
	/* add a quota of 99 KB to this group */
	$this->_addMapEntry(array('userOrGroupId' => $this->_group->getId(),
				  'quotaSize' => 99));
	list ($ret, $postGroupCount) = GalleryQuotasHelper::fetchQuotaGroupCount();
	if ($ret) {
	    return $ret;
	}
	$this->assert($postGroupCount = $preGroupCount + 1, 'Group Counts do not match up');
	$this->_removeMapEntry(array('userOrGroupId' => $this->_group->getId()));
    }

    function testFetchQuotaUserIdList() {
	/* get the actual number of User quotas there is */
	list ($ret, $userCount) = GalleryQuotasHelper::fetchQuotaUserCount();
	if ($ret) {
	    return $ret;
	}
	/* now we use that as the count (+1 for good measure) */
	list ($ret, $userIdList) = GalleryQuotasHelper::fetchQuotaUserIdList($userCount + 1);
	if ($ret) {
	    return $ret;
	}
	$this->assert($userCount == count($userIdList), 'User count is incorrect');
	/* add a quota of 467 KB to this user */
	$this->_addMapEntry(array('userOrGroupId' => $this->_user->getId(),
				  'quotaSize' => 467));
	/* now we use that as the count (+1 for good measure) */
	list ($ret, $userIdList) = GalleryQuotasHelper::fetchQuotaUserIdList($userCount + 1);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals($userCount + 1, count($userIdList), 'New User count is incorrect');
	$this->assertEquals(array('quota' => 467, 'name' => $this->_user->getUserName()),
			    $userIdList[$this->_user->getId()],
			    'New User quota doesn\'t match up');
	$this->_removeMapEntry(array('userOrGroupId' => $this->_user->getId()));
    }

    function testFetchQuotaUserCount() {
	list ($ret, $preUserCount) = GalleryQuotasHelper::fetchQuotaUserCount();
	if ($ret) {
	    return $ret;
	}
	/* add a quota of 86 KB to this user */
	$this->_addMapEntry(array('userOrGroupId' => $this->_user->getId(),
				  'quotaSize' => 86));
	list ($ret, $postUserCount) = GalleryQuotasHelper::fetchQuotaUserCount();
	if ($ret) {
	    return $ret;
	}
	$this->assert($postUserCount = $preUserCount + 1, 'User Counts do not match up');
	$this->_removeMapEntry(array('userOrGroupId' => $this->_user->getId()));
    }

    function testFetchGroupQuota() {
	list ($ret, $quotaExists, $groupQuotaInfo) =
	    GalleryQuotasHelper::FetchGroupQuota($this->_group->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assert($quotaExists == false, 'Quota should not exist for this group');
	$this->assert(empty($groupQuotaInfo), 'Group should have no quota information');

	/* add a quota of 47KB for this group */
	$this->_addMapEntry(array('userOrGroupId' => $this->_group->getId(),
				  'quotaSize' => 47));

	list ($ret, $quotaExists, $groupQuotaInfo) =
	    GalleryQuotasHelper::FetchGroupQuota($this->_group->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assert($quotaExists == true, 'Quota should exist for this group');
	$this->assertEquals(array('id' => $this->_group->getId(), 'quota' => 47,
				  'name' =>$this->_group->getGroupName()),
			    $groupQuotaInfo,
			    'Group should have quota information');
	$this->_removeMapEntry(array('userOrGroupId' => $this->_group->getId()));
    }

    function testFetchUserQuota() {
	list ($ret, $quotaExists, $userQuotaInfo) =
	    GalleryQuotasHelper::FetchUserQuota($this->_user->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assert($quotaExists == false, 'Quota should not exist for this user');
	$this->assert(empty($userQuotaInfo), 'User should have no quota information');

	/* add a quota of 86 KB to this user */
	$this->_addMapEntry(array('userOrGroupId' => $this->_user->getId(),
				  'quotaSize' => 86));

	list ($ret, $quotaExists, $userQuotaInfo) =
	    GalleryQuotasHelper::fetchUserQuota($this->_user->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assert($quotaExists == true, 'Quota should exist for this user');
	$this->assertEquals(array('id' => $this->_user->getId(), 'quota' => 86,
				  'name' =>$this->_user->getUserName()),
			    $userQuotaInfo,
			    'User should have quota information');
	$this->_removeMapEntry(array('userOrGroupId' => $this->_user->getId()));
    }

    /* Test the Callback function */
    function testLoadQuotasCallbacksNoQuotaNoItems() {
	global $gallery;
	$session =& $gallery->getSession();

	$smarty = new GallerySmarty();

	/* Execute the method under test */
	$callback = new QuotasCallbacks;
	$ret = $callback->callback(array(), $smarty, 'LoadQuotas', $this->_user->getId());
	if ($ret) {
	    return $ret;
	}

	/* Verify the results */
	$data = $smarty->_tpl_vars['block']['quotas']['LoadQuotas'];
	$this->assertEquals('0', $data['quotaValue'], 'No quota value should exist for this user');
	$this->assert(!$data['quotaExists'], 'No quota should exist for this user');
	$this->assertEquals($this->_KB, $data['quotaValueUnit'], 'No quota (lowest unit is KB)');
	$this->assertEquals('0', $data['currentUsage'], 'User should have no usage yet');
	$this->assertEquals($this->_KB, $data['currentUsageUnit'], 'No usage (lowest unit is KB)');
	$this->assert(!isset($data['currentUsagePercent']), 'Usage percent should not be set');
	$this->assert(!isset($data['currentUnusedPerfcent']), 'Unused percent should not be set');
    }

    function testLoadQuotasCallbacksNoQuotaItems() {
	global $gallery;
	$session =& $gallery->getSession();

	$smarty = new GallerySmarty();

	/* Create 3 dummy items */
	$this->_item = array();
	for ($j = 0; $j < 3; $j++) {
	    list ($ret, $this->_item[$j]) =
		$this->_createRandomDataItem($this->_album->getId(),
					     'application/unknown',
					     array('ownerId' => $this->_user->getId(),
						   'size' => 102400 + ($j * 1024)));
	    if ($ret) {
		return $ret;
	    }
	}

	/* Check users quota Callback, he has 3 items */
	$callback = new QuotasCallbacks;
	$ret = $callback->callback(array(), $smarty, 'LoadQuotas', $this->_user->getId());
	if ($ret) {
	    return $ret;
	}

	/* Verify the results */
	$data = $smarty->_tpl_vars['block']['quotas']['LoadQuotas'];
	$this->assertEquals('0', $data['quotaValue'], 'No quota value should exist for this user');
	$this->assert(!$data['quotaExists'], 'No quota should exist for this user');
	$this->assertEquals($this->_KB, $data['quotaValueUnit'], 'No quota (lowest unit is KB)');
	$this->assertEquals((string)303, $data['currentUsage'],
			    'User should be using 303 KB');
	$this->assertEquals($this->_KB, $data['currentUsageUnit'],
			    'is using less than 1MB (should be KB)');
	$this->assert(!isset($data['currentUsagePercent']), 'Usage percent should not be set');
	$this->assert(!isset($data['currentUnusedPerfcent']), 'Unused percent should not be set');
    }

    function testLoadQuotasCallbacksGroupQuotaItems() {
	global $gallery;
	$session =& $gallery->getSession();

	$smarty = new GallerySmarty();

	/* Create 3 dummy items */
	$this->_item = array();
	for ($j = 0; $j < 3; $j++) {
	    list ($ret, $this->_item[$j]) =
		$this->_createRandomDataItem($this->_album->getId(),
					     'application/unknown',
					     array('ownerId' => $this->_user->getId(),
						   'size' => 102400 + ($j * 1024)));
	    if ($ret) {
		return $ret;
	    }
	}

	/* Add our dummy user to our dummy group, dummy */
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $this->_group->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryDataCache::reset();

	/* add a quota of 501KB for this group */
	$this->_addMapEntry(array('userOrGroupId' => $this->_group->getId(),
				  'quotaSize' => 501));

	/* Check users quota Callback, he is in a group that has a quota */
	$callback = new QuotasCallbacks;
	$ret = $callback->callback(array(), $smarty, 'LoadQuotas', $this->_user->getId());
	if ($ret) {
	    return $ret;
	}

	/* Verify the results */
	$data = $smarty->_tpl_vars['block']['quotas']['LoadQuotas'];
	$this->assertEquals('501', $data['quotaValue'], 'Quota value should exist for this user');
	$this->assert($data['quotaExists'], 'Quota should exist for this user');
	$this->assertEquals($this->_KB, $data['quotaValueUnit'],
			    'has quota < 1MB (lowest unit is KB)');
	$this->assertEquals((string)303, $data['currentUsage'],
			    'User should be using 303 KB');
	$this->assertEquals($this->_KB, $data['currentUsageUnit'], 'No quota (lowest unit is KB)');
	$this->assertEquals(60, $data['currentUsagePercent'], 'Incorrect Usage percent');
	$this->assertEquals(40, $data['currentUnusedPercent'], 'Incorrect Unused percent');
    }

    function testLoadQuotasCallbacksUserQuotaItems() {
	global $gallery;
	$session =& $gallery->getSession();

	$smarty = new GallerySmarty();

	/* Create 3 dummy items */
	$this->_item = array();
	for ($j = 0; $j < 3; $j++) {
	    list ($ret, $this->_item[$j]) =
		$this->_createRandomDataItem($this->_album->getId(),
					     'application/unknown',
					     array('ownerId' => $this->_user->getId(),
						   'size' => 102400 + ($j * 1024)));
	    if ($ret) {
		return $ret;
	    }
	}

	/* add a quota of 401KB for this user */
	$this->_addMapEntry(array('userOrGroupId' => $this->_user->getId(),
				  'quotaSize' => 401));

	/* Check users quota again, now that she has a user quota of 401KB */
	$callback = new QuotasCallbacks;
	$ret = $callback->callback(array(), $smarty, 'LoadQuotas', $this->_user->getId());
	if ($ret) {
	    return $ret;
	}

	/* Verify the results */
	$data = $smarty->_tpl_vars['block']['quotas']['LoadQuotas'];
	$this->assertEquals('401', $data['quotaValue'], 'Quota value should exist for this user');
	$this->assert($data['quotaExists'], 'Quota should exist for this user');
	$this->assertEquals($this->_KB, $data['quotaValueUnit'],
			    'has quota < 1MB (lowest unit is KB)');
	$this->assertEquals((string)303, $data['currentUsage'],
			    'User should be using 303 KB');
	$this->assertEquals($this->_KB, $data['currentUsageUnit'], 'No quota (lowest unit is KB)');
	$this->assertEquals(76, $data['currentUsagePercent'], 'Incorrect Usage percent');
	$this->assertEquals(24, $data['currentUnusedPercent'], 'Incorrect Unused percent');
    }

    function _removeMapEntry($remove) {
	$ret = GalleryCoreApi::removeMapEntry('QuotasMap', $remove);
	if ($ret) {
	    return ($ret);
	}
    }

    function _addMapEntry($add) {
	$ret = GalleryCoreApi::addMapEntry('QuotasMap', $add);
	if ($ret) {
	    return ($ret);
	}
    }
}
?>
