<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * AdminGetid3 controller tests
 * @package Getid3
 * @subpackage PHPUnit
 * @author Don Willingham <donwillingham@users.sf.net>
 * @version $Revision: 17580 $
 */
class AdminGetid3ControllerTest extends GalleryControllerTestCase {

    function AdminGetid3ControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'getid3:AdminGetid3');
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	GalleryCoreApi::requireOnce('modules/getid3/classes/Getid3Helper.class');
	list ($ret, $this->_save['summary']) = Getid3Helper::getProperties(GETID3_SUMMARY);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $this->_save['detailed']) = Getid3Helper::getProperties(GETID3_DETAILED);
	if ($ret) {
	    return $ret;
	}
	$ret = Getid3Helper::setDefaultProperties(GETID3_SUMMARY);
	if ($ret) {
	    return $ret;
	}

	$ret = Getid3Helper::setDefaultProperties(GETID3_DETAILED);
	if ($ret) {
	    return $ret;
	}
    }

    function tearDown() {
	global $gallery;
	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}

	$ret = Getid3Helper::setProperties(GETID3_SUMMARY, $this->_save['summary']);
	if ($ret) {
	    return $ret;
	}

	$ret = Getid3Helper::setProperties(GETID3_DETAILED, $this->_save['detailed']);
	if ($ret) {
	    return $ret;
	}
    }

    function testSaveAvailableToSummary() {
	GalleryUtilities::putRequestVariable('form[available][0]', 'Genre');
	GalleryUtilities::putRequestVariable('form[available][1]', 'Year');
	GalleryUtilities::putRequestVariable('form[action][availableToSummary]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array('added' => array('summary' => 2)),
				  'error' => array()),
			    $results);

	/* Make sure they're there */
	list ($ret, $properties) = Getid3Helper::getProperties(GETID3_SUMMARY);
	if ($ret) {
	    return $ret;
	}

	$this->assert(in_array('Genre', $properties));
	$this->assert(in_array('Year', $properties));
    }

    function testRemoveFromSummary() {
	GalleryUtilities::putRequestVariable('form[summary][0]', 'Artist');
	GalleryUtilities::putRequestVariable('form[summary][1]', 'Title');
	GalleryUtilities::putRequestVariable('form[action][removeFromSummary]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array('removed' => array('summary' => 2)),
				  'error' => array()),
			    $results);

	/* Make sure they're gone */
	list ($ret, $properties) = Getid3Helper::getProperties(GETID3_SUMMARY);
	if ($ret) {
	    return $ret;
	}

	$this->assert(!in_array('Artist', $properties));
	$this->assert(!in_array('Title', $properties));
    }

    function testRemoveFromSummaryMissing() {
	GalleryUtilities::putRequestVariable('form[action][removeFromSummary]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array(),
				  'error' => array('form[error][summary][missing]')),
			    $results);
    }

    function testMoveUpSummary() {
	GalleryUtilities::putRequestVariable('form[summary][0]', 'Album');
	GalleryUtilities::putRequestVariable('form[summary][1]', 'Track');
	GalleryUtilities::putRequestVariable('form[action][moveUpSummary]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array('movedUp' => array('summary' => 2)),
				  'error' => array()),
			    $results);

	/* Verify the new positions */
	list ($ret, $properties) = Getid3Helper::getProperties(GETID3_SUMMARY);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('Album',  $properties[0]);
	$this->assertEquals('Track',  $properties[1]);
	$this->assertEquals('Artist', $properties[2]);
	$this->assertEquals('Title',  $properties[3]);
    }

    function testMoveUpSummaryMissing() {
	GalleryUtilities::putRequestVariable('form[action][moveUpSummary]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array(),
				  'error' => array('form[error][summary][missing]')),
			    $results);
    }

    function testMoveDownSummary() {
	GalleryUtilities::putRequestVariable('form[summary][0]', 'Album');
	GalleryUtilities::putRequestVariable('form[summary][1]', 'Track');
	GalleryUtilities::putRequestVariable('form[action][moveDownSummary]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array('movedDown' => array('summary' => 2)),
				  'error' => array()),
			    $results);

	/* Verify the new positions */
	list ($ret, $properties) = Getid3Helper::getProperties(GETID3_SUMMARY);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('Artist', $properties[0]);
	$this->assertEquals('Album',  $properties[1]);
	$this->assertEquals('Track',  $properties[2]);
	$this->assertEquals('Title',  $properties[3]);
    }

    function testMoveDownSummaryMissing() {
	GalleryUtilities::putRequestVariable('form[action][moveDownSummary]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array(),
				  'error' => array('form[error][summary][missing]')),
			    $results);
    }

    function testResetSummary() {
	/* Remove all properties */
	$ret = Getid3Helper::setProperties(GETID3_SUMMARY, array());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('form[action][resetSummary]', 1);
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array('restored' => array('summary' => 1)),
				  'error' => array()),
			    $results);

	/* Make sure they're all back again */
	list ($ret, $properties) = Getid3Helper::getProperties(GETID3_SUMMARY);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(5, sizeof($properties));
	$this->assertEquals('Artist', $properties[0]);
	$this->assertEquals('Title', $properties[3]);
	$this->assertEquals('DateTime', $properties[4]);
    }

    function testSaveAvailableToDetailed() {
	GalleryUtilities::putRequestVariable('form[available][0]', 'Playtime (Seconds)');
	GalleryUtilities::putRequestVariable('form[available][1]', 'Playtime');
	GalleryUtilities::putRequestVariable('form[action][availableToDetailed]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array('added' => array('detailed' => 2)),
				  'error' => array()),
			    $results);

	/* Make sure they're there */
	list ($ret, $properties) = Getid3Helper::getProperties(GETID3_DETAILED);
	if ($ret) {
	    return $ret;
	}

	$this->assert(in_array('Playtime (Seconds)', $properties));
	$this->assert(in_array('Playtime', $properties));
    }

    function testRemoveFromDetailed() {
	GalleryUtilities::putRequestVariable('form[detailed][0]', 'Artist');
	GalleryUtilities::putRequestVariable('form[detailed][1]', 'Album');
	GalleryUtilities::putRequestVariable('form[action][removeFromDetailed]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array('removed' => array('detailed' => 2)),
				  'error' => array()),
			    $results);

	/* Make sure they're gone */
	list ($ret, $properties) = Getid3Helper::getProperties(GETID3_DETAILED);
	if ($ret) {
	    return $ret;
	}

	$this->assert(!in_array('Artist', $properties));
	$this->assert(!in_array('Album', $properties));
    }

    function testRemoveFromDetailedMissing() {
	GalleryUtilities::putRequestVariable('form[action][removeFromDetailed]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array(),
				  'error' => array('form[error][detailed][missing]')),
			    $results);
    }

    function testMoveUpDetailed() {
	GalleryUtilities::putRequestVariable('form[detailed][0]', 'Album');
	GalleryUtilities::putRequestVariable('form[detailed][1]', 'Genre');
	GalleryUtilities::putRequestVariable('form[detailed][2]', 'ChannelMode');
	GalleryUtilities::putRequestVariable('form[action][moveUpDetailed]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array('movedUp' => array('detailed' => 3)),
				  'error' => array()),
			    $results);

	/* Verify the new positions */
	list ($ret, $properties) = Getid3Helper::getProperties(GETID3_DETAILED);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('Album', $properties[0]);
	$this->assertEquals('Genre', $properties[3]);
	$this->assertEquals('AudioChannels', $properties[9]);
    }

    function testMoveUpDetailedMissing() {
	GalleryUtilities::putRequestVariable('form[action][moveUpDetailed]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array(),
				  'error' => array('form[error][detailed][missing]')),
			    $results);
    }

    function testMoveDownDetailed() {
	GalleryUtilities::putRequestVariable('form[detailed][0]', 'Artist');
	GalleryUtilities::putRequestVariable('form[detailed][1]', 'Year');
	GalleryUtilities::putRequestVariable('form[detailed][2]', 'AudioChannels');
	GalleryUtilities::putRequestVariable('form[action][moveDownDetailed]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array('movedDown' => array('detailed' => 3)),
				  'error' => array()),
			    $results);

	/* Verify the new positions */
	list ($ret, $properties) = Getid3Helper::getProperties(GETID3_DETAILED);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('Artist', $properties[1]);
	$this->assertEquals('Year', $properties[6]);
	$this->assertEquals('AudioChannels', $properties[10]);
    }

    function testMoveDownDetailedMissing() {
	GalleryUtilities::putRequestVariable('form[action][moveDownDetailed]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array(),
				  'error' => array('form[error][detailed][missing]')),
			    $results);
    }

    function testResetDetailed() {
	/* Remove all properties */
	$ret = Getid3Helper::setProperties(GETID3_DETAILED, array());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('form[action][resetDetailed]', 1);
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'getid3.AdminGetid3'),
				  'status' => array('restored' => array('detailed' => 1)),
				  'error' => array()),
			    $results);

	/* Make sure they're all back again */
	list ($ret, $properties) = Getid3Helper::getProperties(GETID3_DETAILED);
	if ($ret) {
	    return $ret;
	}

	/* Spot check */
	$this->assertEquals(15, sizeof($properties));
	$this->assertEquals('Artist', $properties[0]);
	$this->assertEquals('Title', $properties[3]);
	$this->assertEquals('AudioCodec', $properties[10]);
    }
}
?>
