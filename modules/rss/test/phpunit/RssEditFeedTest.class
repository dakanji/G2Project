<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/rss/classes/RssMapHelper.class');

/**
 * EditFeed controller tests
 *
 * @package Rss
 * @subpackage PHPUnit
 * @author Jonatan Heyman <http://heyman.info>
 * @author Pierre-Luc Paour
 * @author Daniel Grund <http://www.photogrund.nl>
 * @version $Revision: 17580 $
 */
class RssEditFeedTest extends GalleryControllerTestCase {

    var $_feedsToDelete;

    function RssEditFeedTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'rss.EditFeed');
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	$ret = $this->_markPluginParametersForCleanup('module', 'rss');
	if ($ret) {
	    return $ret;
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'rss', 'allowConfigurableFeed', 1);
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'rss', 'allowAlbums', 1);
	if ($ret) {
	    return $ret;
	}
    }

    function tearDown() {
	if (!empty($this->_feedsToDelete)) {
	    foreach ($this->_feedsToDelete as $name) {
		$ret = RssMapHelper::deleteFeed($name);
		if ($ret) {
		    return $ret;
		}
	    }
	}

	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}
    }

    function testRssEditFeedCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', '1');
	GalleryUtilities::putRequestVariable('form[itemId]', $this->_getRootId());
	GalleryUtilities::putRequestVariable('form[mode]', 'edit');

	$results = $this->handleRequest();
	$this->assertEquals(array(
	    'status' => array(),
	    'error' => array(),
	    'redirect' => array(
		'view' => 'core.ItemAdmin',
		'subView' => 'rss.EditFeed',
		'itemId' => $this->_getRootId(),
		'mode' => 'list',
		'form' => array(
		    'action' => array('cancel' => '1'),
		    'mode' => 'edit',
		    'itemId' => (string) $this->_getRootId()))),
	    $results);
    }

    function testRssEditFeed() {
	$name = 'feed' .rand();
	GalleryUtilities::putRequestVariable('form[action][create]', '1');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');
	GalleryUtilities::putRequestVariable('form[mode]', 'new');

	$values = array(
	    'itemId' => (string) $this->_getRootId(),
	    'mode' => 'edit',
	    'feedType' => 'photosRecursive',
	    'photosRecursiveLimit'=> '0',
	    'feedName' => $name,
	    'version' => '2.0',
	    'count' => '10',
	    'copyright' => 'me',
	    'description' => 'description',
	    'useImage' => '1',
	    'usePubDate' => '1',
	    'useEnclosure' => '1',
	    'useCategory' => '1',
	    'useCloud' => '1',
	    'cloudDomain' => 'Gallery',
	    'cloudPort' => '202',
	    'cloudPath' => 'rss',
	    'cloudRegisterProcedure' => 'register',
	    'cloudProtocol' => 'tcp',
	    'useTtl' => '1',
	    'ttl' => '60',
	    'category' => 'photo',
	    'useItemCategory' => '1',
	    'language' => 'en-us',
	    'feedDate' => 'updated');

	foreach ($values as $key => $value) {
	    GalleryUtilities::putRequestVariable('form['.$key.']', $value);
	}

	$results = $this->handleRequest();

	$this->assertEquals(array(
	    'status' => array('saved' => 1),
	    'error' => array(),
	    'redirect' => array(
		'view' => 'core.ItemAdmin',
		'subView' => 'rss.EditFeed',
		'itemId' => $this->_getRootId(),
		'mode' => 'edit',
		'form' => array_merge(array(
		    'action' => array('save' => '1', 'create' => '1'),
		    'mode' => 'new',
		    ), $values))),
	    $results);

	/* remember to delete this new feed */
	$this->_feedsToDelete[] = $name;

	/* check the feed values */
	list ($ret, $feed) = RssMapHelper::fetchFeed($name);
	if ($ret) {
	    return $ret;
	}
    }

    function testRssUpdateFeed() {
	$name = 'feed' .rand();

	/* create feed we're going to edit */
	$params = array('itemId' => $this->_getRootId());
	$ret = RssMapHelper::createFeed($name, $params);
	if ($ret) {
	    return $ret;
	}

	/* remember to delete this new feed */
	$this->_feedsToDelete[] = $name;

	GalleryUtilities::putRequestVariable('form[action][update]', '1');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');
	GalleryUtilities::putRequestVariable('form[mode]', 'edit');

	$values = array(
	    'itemId' => (string) $this->_getRootId(),
	    'mode' => 'edit',
	    'feedType' => 'photosRecursive',
	    'photosRecursiveLimit'=> '0',
	    'feedName' => $name,
	    'version' => '2.0',
	    'count' => '10',
	    'copyright' => 'me',
	    'description' => 'description',
	    'useImage' => '1',
	    'usePubDate' => '1',
	    'useEnclosure' => '1',
	    'useCategory' => '1',
	    'useCloud' => '1',
	    'cloudDomain' => 'Gallery',
	    'cloudPort' => '202',
	    'cloudPath' => 'rss',
	    'cloudRegisterProcedure' => 'register',
	    'cloudProtocol' => 'tcp',
	    'useTtl' => '1',
	    'ttl' => '60',
	    'category' => 'photo',
	    'useItemCategory' => '1',
	    'language' => 'en-us',
	    'feedDate' => 'updated');

	foreach ($values as $key => $value) {
	    GalleryUtilities::putRequestVariable('form['.$key.']', $value);
	}

	$results = $this->handleRequest();

	$this->assertEquals(array(
	    'status' => array('saved' => 1),
	    'error' => array(),
	    'redirect' => array(
		'view' => 'core.ItemAdmin',
		'subView' => 'rss.EditFeed',
		'itemId' => $this->_getRootId(),
		'mode' => 'edit',
		'form' => array_merge(array(
		    'action' => array('save' => '1', 'update' => '1'),
		    'mode' => 'edit',
		    ), $values))),
	    $results);

	/* check the feed values */
	list ($ret, $feed) = RssMapHelper::fetchFeed($name);
	if ($ret) {
	    return $ret;
	}
    }

    function testRssUpdateFeedNew() {
	$name = 'feed' .rand();

	GalleryUtilities::putRequestVariable('form[action][update]', '1');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');
	GalleryUtilities::putRequestVariable('form[mode]', 'edit');

	$values = array(
	    'itemId' => (string) $this->_getRootId(),
	    'mode' => 'edit',
	    'feedType' => 'photosRecursive',
	    'photosRecursiveLimit'=> '0',
	    'feedName' => $name,
	    'version' => '2.0',
	    'count' => '10',
	    'copyright' => 'me',
	    'description' => 'description',
	    'useImage' => '1',
	    'usePubDate' => '1',
	    'useEnclosure' => '1',
	    'useCategory' => '1',
	    'useCloud' => '1',
	    'cloudDomain' => 'Gallery',
	    'cloudPort' => '202',
	    'cloudPath' => 'rss',
	    'cloudRegisterProcedure' => 'register',
	    'cloudProtocol' => 'tcp',
	    'useTtl' => '1',
	    'ttl' => '60',
	    'category' => 'photo',
	    'useItemCategory' => '1',
	    'language' => 'en-us',
	    'feedDate' => 'updated');

	foreach ($values as $key => $value) {
	    GalleryUtilities::putRequestVariable('form['.$key.']', $value);
	}

	$results = $this->handleRequest();

	$this->assertEquals(array(
	    'status' => array('saved' => 1),
	    'error' => array(),
	    'redirect' => array(
		'view' => 'core.ItemAdmin',
		'subView' => 'rss.EditFeed',
		'itemId' => $this->_getRootId(),
		'mode' => 'edit',
		'form' => array_merge(array(
		    'action' => array('save' => '1', 'update' => '1'),
		    'mode' => 'edit',
		    ), $values))),
	    $results);
    }

    function testDeleteFeed() {
	$name = 'feed' .rand();

	/* Create feed that we're going to delete */
	$params = array('itemId' => $this->_getRootId());
	$ret = RssMapHelper::createFeed($name, $params);
	if ($ret) {
	    return $ret;
	}
	/* Cleanup if things go wrong */
	$this->_feedsToDelete[] = $name;
	
	GalleryUtilities::putRequestVariable('form[action][delete]', $name);
	GalleryUtilities::putRequestVariable('itemId', $this->_getRootId());
	GalleryUtilities::putRequestVariable('controller', 'rss.EditFeed');
	
	$results = $this->handleRequest();

	$this->assertEquals(array(
	    'status' => array('deleted' => 1),
	    'error' => array(),
	    'redirect' => array(
		'view' => 'core.ItemAdmin',
		'subView' => 'rss.EditFeed',
		'itemId' => $this->_getRootId(),
		'mode' => 'list',
		'form' => array('action' => array('delete' => $name))
		)),
	    $results);
    }
}
?>
