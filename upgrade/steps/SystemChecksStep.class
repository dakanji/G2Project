<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * System checks
 * @package Upgrade
 */
class SystemChecksStep extends UpgradeStep {
	public function stepName() {
		return 'System Checks';
	}

	/*
	 * Returns the exact bytes value from a php.ini setting
	 * Copied from PHP.net's manual entry for ini_get()
	 * Applied fix from https://stackoverflow.com/a/45648879/891636
	 */
	public function _getBytes($val) {
		$val  = substr(trim($val), 0, -1);
		$last = substr($val, -1);

		switch ($last) {
			case 'g':
			case 'G':
				$val *= 1024;
				// Fall Through
			case 'm':
			case 'M':
				$val *= 1024;
				// Fall Through
			case 'k':
			case 'K':
				$val *= 1024;
		}

		return $val;
	}

	public function processRequest() {
		// Target PHP Version
		$prefPHP = 'Use PHP Version 7.3.x for the best performance.';

		// Zend test
		if (!empty($_GET['zendtest'])) {
			header('Content-Type: text/plain');
			header('Content-Length: 8');
			$x = array(new stdclass());
			// v-- This may cause PHP to crash!
			$x = $x[0];
			echo "SUCCESS\n";

			return false;
		}

		if (!empty($_GET['downloadCleanupScript'])) {
			$statusMonitor = null;
			$manifest      = SystemChecksStep::CheckManifest(
				$statusMonitor,
				function_exists('set_time_limit')
			);

			$removeList = array();
			$base       = dirname(dirname(__DIR__)) . '/';

			foreach ($manifest['shouldRemove'] as $file) {
				$removeList[$file] = is_dir($base . $file);
			}

			// Reverse sort it by key so that directories are last
			krsort($removeList);

			$isWindows = !strncasecmp(PHP_OS, 'win', 3);
			$fileName  = $isWindows ? 'cleanup.bat' : 'cleanup.sh';

			header('Content-Type: application/data');
			header('Content-Disposition: attachment; filename=' . $fileName);

			include __DIR__ . '/../templates/ManifestCleanupScript.html';

			return false;
		}

		// Normal request
		global $gallery;
		$failCount             = 0;
		$suggestedHtaccess     = array();
		$setTimeLimitAvailable = false;

		$template = new StatusTemplate();
		$template->renderHeader(true);
		$template->renderStatusMessage('Performing system checks', '', 0);

		// assert compatible version of PHP, we accept 5.3.3+ but prefer 7.1.0+
		if (version_compare(PHP_VERSION, '5.3.3', '<')) {
			$templateData['check'][] = array(
				'title'  => 'PHP version &gt;= v5.3.3',
				'error'  => true,
				'notice' => sprintf('Error: Gallery 2 has an absolute mimimum requirement of PHP Version 5.3.3 but you have PHP Version %s installed. Please update to PHP Version 5.3.3, as an absolute mimimum, to use this version of Gallery 2. %s', PHP_VERSION, $prefPHP),
			);
			$failCount++;
		} elseif (version_compare(PHP_VERSION, '5.6.0', '<')) {
			$templateData['check'][] = array(
				'title'   => 'PHP version &gt;= v5.6.0',
				'warning' => true,
				'notice'  => sprintf('Warning: Gallery  2 has an acceptable mimimum requirement of PHP Version 5.6.0 but you have PHP Version %s installed. Gallery 2 should function with your version of PHP but will be slower and will require additional server resources. %s', PHP_VERSION, $prefPHP),
			);
		} elseif (version_compare(PHP_VERSION, '7.1.0', '<')) {
			$templateData['check'][] = array(
				'title'   => 'PHP Version &gt;= v7.1.0',
				'warning' => true,
				'notice'  => sprintf('Warning: Gallery  2 has a desirable mimimum requirement of PHP Version 7.1.x but you have PHP Version %s installed. Gallery 2 will function with your version of PHP but may be slower and require additional server resources. %s', PHP_VERSION, $prefPHP),
			);
		} elseif (version_compare(PHP_VERSION, '7.3.99', '>')) {
			$templateData['check'][] = array(
				'title'   => 'PHP Version &gt;= v7.4.0',
				'warning' => true,
				'notice'  => sprintf('Warning: Gallery 2 has NOT been tested on PHP Version 7.4.0 or newer but you have PHP Version %s installed. Gallery 2 MAY still function with your version of PHP. %s', PHP_VERSION, $prefPHP),
			);
		} else {
			$templateData['check'][] = array(
				'title'   => 'PHP Version &gt;= v7.1.0',
				'success' => true,
			);
		}

		// assert that __FILE__ works correctly
		if (!self::CheckFileDirective()) {
			$templateData['check'][] = array(
				'title'  => 'FILE directive supported',
				'error'  => true,
				'notice' => 'Error: your PHP __FILE__ directive is not functioning correctly. Please file a support request with your webserver administrator or in the Gallery Support Forum.',
			);
			$failCount++;
		} else {
			$templateData['check'][] = array(
				'title'   => 'FILE Directive',
				'success' => true,
			);
		}

		// Make sure that safe mode is not enabled
		if (GalleryUtilities::getPhpIniBool('safe_mode')) {
			$templateData['check'][] = array(
				'title'  => 'Safe mode disabled',
				'error'  => true,
				'notice' => 'Error: Your version of PHP is configured with safe mode enabled. You must disable safe mode before Gallery will run.',
			);
			$failCount++;
		} else {
			$templateData['check'][] = array(
				'title'   => 'Safe Mode',
				'success' => true,
			);
		}

		// Make sure we have PCRE support
		if (!function_exists('preg_match') || !function_exists('preg_replace')) {
			$templateData['check'][] = array(
				'title'  => 'Regular expressions',
				'error'  => true,
				'notice' => sprintf('Error: Your PHP is configured without support for %sPerl Compatible Regular Expressions%s. You must enable these functions before Gallery will run.', '<a href="http://php.net/pcre">', '</a>'),
			);
			$failCount++;
		}
		// skip showing 'success' for this one

		// Warning when exec() is disabled
		if (in_array('exec', preg_split('/,\s*/', ini_get('disable_functions')))) {
			$templateData['check'][] = array(
				'title'   => 'exec() allowed',
				'warning' => true,
				'notice'  => 'Warning: The exec() function is disabled in your PHP by the <b>disabled_functions</b> parameter in php.ini. You will not be able to use modules that require external binaries (e.g. ImageMagick, NetPBM or Ffmpeg). This can only be set server-wide, so you will need to change it in the global php.ini.',
			);
		} else {
			$templateData['check'][] = array(
				'title'   => 'exec() allowed',
				'success' => true,
			);
		}

		// Warning when set_time_limit() is disabled
		if (in_array('set_time_limit', preg_split('/,\s*/', ini_get('disable_functions')))) {
			$timeLimit               = ini_get('max_execution_time');
			$templateData['check'][] = array(
				'title'   => 'set_time_limit() allowed',
				'warning' => true,
				'notice'  => sprintf('Warning: The set_time_limit() function is disabled in your PHP by the <b>disabled_functions</b> parameter in php.ini. Gallery can function with this setting, but it will not operate reliably. Any operation that takes longer than %d seconds will fail (and in some cases just return a blank page) possibly leading to data corruption.', $timeLimit),
			);
		} else {
			$templateData['check'][] = array(
				'title'   => 'set_time_limit() allowed',
				'success' => true,
			);

			// Set the time limit large enough for the remaining checks (slow systems)
			set_time_limit(180);
			$setTimeLimitAvailable = true;
		}

		$template->renderStatusMessage('Performing system checks', '', 0.02);

		// Make sure filesystem operations are allowed
		$missingFilesystemFunctions = array();

		foreach (array(
			'fopen',
			'fclose',
			'fread',
			'fwrite',
			'file',
			'copy',
			'rename',
			'readfile',
			'file_get_contents',
			'copy',
			'move_uploaded_file',
			'file_exists',
			'tempnam',
			'glob',
			'closedir',
			'stat',
			'unlink',
			'rmdir',
			'mkdir',
			'getcwd',
			'chdir',
			'opendir',
			'readdir',
			'chmod',
		) as $function) {
			if (!function_exists($function)) {
				$missingFilesystemFunctions[] = $function;
			}
		}

		if (!empty($missingFilesystemFunctions)) {
			$templateData['check'][] = array(
				'title'  => 'Filesystem Operations',
				'error'  => true,
				'notice' => sprintf('Error: Essential filesystem operations are disabled in your PHP by the <b>disabled_functions</b> parameter in php.ini. You must allow these functions before Gallery will run. These functions are missing: %s.', implode(', ', $missingFilesystemFunctions)),
			);
			$failCount++;
		}
		// skip showing 'success' for this one

		// Warning if file_uploads are not allowed
		if (!GalleryUtilities::getPhpIniBool('file_uploads')) {
			$templateData['check'][] = array(
				'title'   => 'File Uploads Allowed',
				'warning' => true,
				'notice'  => 'Warning: Your PHP is configured not to allow file uploads (<b>file_uploads</b> parameter in php.ini). You will need to enable this option if you want to upload files to your Gallery with a web browser.',
			);
			$suggestedHtaccess[]     = 'php_flag file_uploads on';
		} else {
			$templateData['check'][] = array(
				'title'   => 'File Uploads Allowed',
				'success' => true,
			);
		}

		// Warning if upload_max_filesize is less than 2M
		$uploadLimit       = ini_get('upload_max_filesize');
		$uploadValue       = substr(trim($uploadLimit), 0, -1);
		$minimumUploadSize = 4;
		$title             = sprintf('%s %sMb', 'Maximum Upload Size &gt;=', $minimumUploadSize);
		$uploadLimitValue  = $this->_getBytes($uploadLimit);

		if ($uploadLimitValue < $minimumUploadSize) {
			$templateData['check'][] = array(
				'title'   => $title,
				'warning' => true,
				'notice'  => sprintf('Warning: Your PHP is configured to limit the size of file uploads to a maximum of %sb (<b>upload_max_filesize</b> parameter in php.ini). You should raise this limit to allow uploading bigger files.', ini_get('upload_max_filesize')),
			);
			$suggestedHtaccess[]     = sprintf('php_value upload_max_filesize %sM', $minimumUploadSize);
		} else {
			$templateData['check'][] = array(
				'title'   => $title,
				'success' => true,
			);
		}

		// Warning if post_max_size is less than 2M
		$postLimit       = ini_get('post_max_size');
		$postValue       = substr(trim($postLimit), 0, -1);
		$minimumPostSize = 4;
		$title           = sprintf('%s %sMb', 'Maximum Post Size &gt;=', $minimumPostSize);
		$postLimitValue  = $this->_getBytes($postLimit);

		if ($postLimitValue < $minimumPostSize) {
			$templateData['check'][] = array(
				'title'   => $title,
				'warning' => true,
				'notice'  => sprintf('Warning: Your PHP is configured to limit post data to a maximum of %sb (<b>post_max_size</b> parameter in php.ini). You should raise this limit to allow uploading bigger files.', ini_get('post_max_size')),
			);
			$suggestedHtaccess[]     = sprintf('php_value post_max_size %sM', $minimumPostSize);
		} else {
			$templateData['check'][] = array(
				'title'   => $title,
				'success' => true,
			);
		}

		// Warning if memory_limit is set and is too low
		$memoryLimit             = ini_get('memory_limit');
		$memoryValue             = substr(trim($memoryLimit), 0, -1);
		$minimumMemoryLimit      = 16;
		$title                   = sprintf('%s %sMb', 'Memory Limit &gt;=', $minimumMemoryLimit);
		$minimumMemoryLimitValue = 1024 * 1024;
		$memoryLimitValue        = $this->_getBytes($memoryLimit) / (1024 * 1024);

		if ($memoryValue != ($memoryLimitValue < $minimumMemoryLimitValue)) {
			$templateData['check'][] = array(
				'title'   => $title,
				'warning' => true,
				'notice'  => sprintf('Warning: Your PHP is configured to limit the memory to %sb (<b>memory_limit</b> parameter in php.ini). You should raise this limit to at least <b>%sMb</b> for proper Gallery operation.', $memoryLimit, $minimumMemoryLimit),
			);
			$suggestedHtaccess[]     = sprintf('php_value memory_limit %sM', $minimumMemoryLimit);
		} else {
			$templateData['check'][] = array(
				'title'   => $title,
				'success' => true,
			);
		}

		// Check for gettext support
		$title = 'Translation support';

		if (!function_exists('dgettext')) {
			$templateData['check'][] = array(
				'title'   => $title,
				'warning' => true,
				'notice'  => sprintf('Your webserver does not support localization. To enable support for additional languages please instruct your system administrator to reconfigure PHP with the %sgettext%s option enabled.', '<a href="http://php.net/gettext">', '</a>'),
			);
		} elseif (!function_exists('bind_textdomain_codeset')) {
			$templateData['check'][] = array(
				'title'   => $title,
				'warning' => true,
				'notice'  => sprintf('Your PHP is missing the function %sbind_textdomain_codeset%s. This means Gallery may display extended characters for some languages incorrectly.', '<a href="http://php.net/bind_textdomain_codeset">', '</a>'),
			);
		} elseif (!function_exists('dngettext')) {
			$templateData['check'][] = array(
				'title'   => $title,
				'warning' => true,
				'notice'  => sprintf('Your PHP is missing the function %sdngettext%s. This means Gallery will be unable to translate plural forms.', '<a href="http://php.net/dngettext">', '</a>'),
			);
		} else {
			$templateData['check'][] = array(
				'title'   => $title,
				'success' => true,
			);
		}

		// $x=$x[0] <--(an object) can crash PHP with zend.ze1_compatibility_mode ON
		if (GalleryUtilities::getPhpIniBool('zend.ze1_compatibility_mode')) {
			$templateData['check'][] = array(
				'title'   => 'Zend compatibility mode',
				'warning' => true,
				'notice'  => sprintf('Warning: Your PHP is configured with Zend ze1_compatibility_mode which can cause PHP to crash.  Click %shere%s to test your PHP.  If you see "SUCCESS" then your PHP is ok.  If you get an error or no response then you must turn off ze1_compatibility_mode before proceeding.', sprintf('<a href="%s">', INDEX_PHP . '?step=' . $this->_stepNumber . '&amp;zendtest=1'), '</a>'),
			);
		}
		// skip showing 'success' for this one

		// Warning if putenv is disabled
		if (in_array('putenv', preg_split('/,\s*/', ini_get('disable_functions')))) {
			$templateData['check'][] = array(
				'title'   => 'putenv() allowed',
				'warning' => true,
				'notice'  => 'Warning: The putenv() function is disabled in your PHP by the <b>disabled_functions</b> parameter in php.ini.  Gallery can function with this setting, but on some rare systems Gallery will be unable to run in other languages than the system language and English.',
			);
		}
		// skip showing 'success' for this one

		// Warning if output_buffering / handlers are enabled
		$outputBuffers = array();

		foreach (array(
			'output_buffering',
			'zlib.output_compression',
		) as $outputFunction) {
			if (GalleryUtilities::getPhpIniBool($outputFunction) || (int)ini_get($outputFunction) > 0) {
				$outputBuffers[] = $outputFunction;
			}
		}

		foreach (array(
			'output_handler',
			'zlib.output_handler',
		) as $outputHandler) {
			if (($value = ini_get($outputHandler)) && !empty($value)) {
				$outputBuffers[] = $outputHandler;
			}
		}

		if (!empty($outputBuffers)) {
			$templateData['check'][] = array(
				'title'   => 'Output Buffering Disabled',
				'warning' => true,
				'notice'  => sprintf('Warning: Output buffering is enabled in your PHP by the <b>%s</b> parameter(s) in php.ini.  Gallery can function with this setting - downloading files is even faster - but Gallery might be unable to serve large files (e.g. large videos) and run into the memory limit. Also, some features like the progress bars might not work correctly if output buffering is enabled unless ini_set() is allowed.', implode(', ', $outputBuffers)),
			);
		}
		// skip showing 'success' for this one

		$template->renderStatusMessage('Performing system checks', '', 0.06);

		// Check if the files and dirs in the storage dir are (still) writeable
		$title = 'Storage Directory Permissions';

		if (!$fileDirectiveWorks || !empty($missingFilesystemFunctions)) {
			$templateData['check'][] = array(
				'title'   => $title,
				'warning' => true,
				'notice'  => 'Test skipped due to other errors.',
			);
		} else {
			$storageFiles = SystemChecksStep::CheckStorageDirectory();

			if (!empty($storageFiles)) {
				$notice = sprintf(
					'Error: Some files and or directories in your storage directory are ' .
					'not writeable by the webserver user. Run chown -R webserverUser ' .
					'%s OR run chmod -R 777 %s.',
					$gallery->getConfig('data.gallery.base'),
					$gallery->getConfig('data.gallery.base')
				);

				$heading = sprintf('Inaccessible or missing  files (%d)', count($storageFiles));
				$message = $this->renderFileList($storageFiles, 'storagefiles', $heading, $notice);

				$templateData['check'][] = array(
					'title'  => $title,
					'error'  => true,
					'notice' => $message,
				);
				$failCount++;
			} else {
				$templateData['check'][] = array(
					'title'   => $title,
					'success' => true,
				);
			}
		}

		$template->renderStatusMessage('Performing system checks', '', 0.07);

		// Check all files against MANIFEST
		$title = 'Gallery file integrity';

		if (!$fileDirectiveWorks || !empty($missingFilesystemFunctions)) {
			$templateData['check'][] = array(
				'title'   => $title,
				'warning' => true,
				'notice'  => 'Test skipped due to other errors.',
			);
		} else {
			$isSvnInstall = file_exists(__DIR__ . '/.svn');
			$manifest     = SystemChecksStep::CheckManifest($template, $setTimeLimitAvailable);

			if (!isset($manifest)) {
				$templateData['check'][]   = array(
					'title'   => $title,
					'warning' => true,
					'notice'  => 'Manifest missing or inaccessible.',
				);
				$_SESSION['fileintegrity'] = 'Manifest missing or inaccessible';
			} elseif (empty($manifest['missing']) && empty($manifest['modified'])
				&& empty($manifest['shouldRemove'])
			) {
				$templateData['check'][]   = array(
					'title'   => $title,
					'success' => true,
				);
				$_SESSION['fileintegrity'] = 'Ok';
			} else {
				global $currentStep; // needed for ManifestSystemCheck.html

				$message = $notice = '';

				if (!empty($manifest['missing'])) {
					if ($isSvnInstall) {
						$notice = 'Note: You are running Gallery from SVN, so recently removed files may appear here.'
						. 'It might be safe to ignore these.';
					}
					$heading  = sprintf('Missing files (%d)', count($manifest['missing']));
					$message .= $this->renderFileList(
						$manifest['missing'],
						'missing',
						$heading,
						$notice
					);
				}

				if (!empty($manifest['missing']) && !empty($manifest['modified'])) {
					$message .= '<br /> <br />';
				}

				if (!empty($manifest['modified'])) {
					if ($isSvnInstall) {
						$notice = 'Note: You\'re running Gallery from SVN, so some modified ' .
						'files are to be expected.  You can probably ignore these, but to be ' .
						'safe you should make sure that you do \'svn update\' before ' .
						'continuing.';
					}
					$heading  = sprintf('Modified files (%d)', count($manifest['modified']));
					$message .= $this->renderFileList(
						$manifest['modified'],
						'modified',
						$heading,
						$notice
					);
				}

				if ((!empty($manifest['modified']) || !empty($manifest['missing']))
					&& !empty($manifest['shouldRemove'])
				) {
					$message .= '<br /> <br />';
				}

				if (!empty($manifest['shouldRemove'])) {
					$notice   = sprintf(
						'These files are no longer part of Gallery. They probably' .
						' would not cause any problems but it is a good idea to remove them to keep ' .
						'your install clean.  Gallery cannot remove these files for you, but you ' .
						'can download and run %sthis script%s in your gallery2 directory to ' .
						'delete them for you.',
						sprintf(
							'<a href="%s">',
							generateUrl(
								'index.php?step=' . $currentStep->getStepNumber()
								. '&amp;downloadCleanupScript=1',
								false
							)
						),
						'</a>'
					);
					$heading  = sprintf('Old files (%d)', count($manifest['shouldRemove']));
					$message .= $this->renderFileList(
						$manifest['shouldRemove'],
						'shouldRemove',
						$heading,
						$notice
					);
				}

				$templateData['check'][]   = array(
					'title'   => $title,
					'warning' => true,
					'notice'  => $message,
				);
				$_SESSION['fileintegrity'] = (empty($manifest['missing']) && empty($manifest['modified'])) ? 'There are some old files' : 'There are missing/modified files!';
			}
		}

		// Check if the db user has (all?) required db privileges to finish the upgrader
		$title = 'Database permissions';

		if (!$fileDirectiveWorks || !empty($missingFilesystemFunctions)) {
			$templateData['check'][] = array(
				'title'   => $title,
				'warning' => true,
				'notice'  => 'Test skipped due to other errors.',
			);
		} else {
			list($ret, $error) = $this->_testPrivileges();

			if ($ret === false) {
				$message                 = 'Error: The configured database user does not have the required database privileges to perform the upgrade.' . '<br/>'
					. $error;
				$templateData['check'][] = array(
					'title'  => $title,
					'error'  => true,
					'notice' => $message,
				);
				$failCount++;
			} else {
				$templateData['check'][] = array(
					'title'   => $title,
					'success' => true,
				);
			}
		}

		$template->renderStatusMessage('Performing system checks', '', 1);
		$template->hideStatusBlock();

		$templateData['suggestedHtaccess'] = join("\n", $suggestedHtaccess);
		$templateData['bodyFile']          = 'SystemChecks.html';
		$this->setComplete($failCount == 0);
		$this->setInError($failCount > 0);
		$template->renderBodyAndFooter($templateData);

		return false;
	}

	public function CheckFileDirective() {
		if (strstr(__FILE__, 'upgrade/steps/SystemChecksStep.class')
			|| strstr(__FILE__, '\\upgrade\\steps\\SystemChecksStep.class')
		) {
			return true;
		}

		return false;
	}

	// Check if the files / dirs in the storage directory are writeable
	public function CheckStorageDirectory() {
		global $gallery;

		$storagePath = $gallery->getConfig('data.gallery.base');
		$platform    =& $gallery->getPlatform();

		if (empty($storagePath)) {
			return array(
				sprintf(
					'The storage folder path is not defined in config.php (%s)',
					'data.gallery.base'
				),
			);
		}

		if ($storagePath[strlen($storagePath) - 1] != $platform->getDirectorySeparator()) {
			$storagePath .= $platform->getDirectorySeparator();
		}

		// An exhaustive test would take too long, test a few dirs / files
		foreach (array('', 'versions.dat', 'albums') as $path) {
			$path = $storagePath . $path;

			if (!$platform->file_exists($path) || !$platform->is_readable($path)
				|| !$platform->is_writeable($path)
			) {
				return array($path);
			}
		}

		// Check up to 400 other files
		$tested      = 0;
		$max         = 400;
		$storagePath = substr($storagePath, 0, strlen($storagePath) - 1);

		return SystemChecksStep::_checkStorageSubDirectory($storagePath, $tested, $max);
	}

	/**
	 * Check up to $max files / dirs in a directory tree if they are still read/writeable
	 *
	 * @param string $dirname directory
	 * @param int $tested number of already tested files / dirs
	 * @param int $max max files/dirs to check
	 * @return array a list of files with insufficient permissions
	 */
	public function _checkStorageSubDirectory($dirname, &$tested, $max) {
		global $gallery;
		$platform =& $gallery->getPlatform();

		$storageFiles = array();

		if (!($fd = $platform->opendir($dirname))) {
			$storageFiles[] = $dirname;

			return $storageFiles;
		}

		while (($filename = $platform->readdir($fd)) !== false && $tested < $max) {
			if (!strcmp($filename, '.') || !strcmp($filename, '..')) {
				continue;
			}

			$tested++;
			$path = $dirname . $platform->getDirectorySeparator() . $filename;

			if (!$platform->is_link($path)
				&& (!$platform->is_writeable($path) || !$platform->is_readable($path))
			) {
				$storageFiles[] = $path;
			}

			if ($platform->is_dir($path) && $tested < $max) {
				// Threshold not yet reached, check subdirectory tree
				$storageFiles = array_merge(
					$storageFiles,
					SystemChecksStep::_checkStorageSubDirectory($path, $tested, $max)
				);
			}
		}
		$platform->closedir($fd);

		return $storageFiles;
	}

	public function CheckManifest(&$statusMonitor, $useSetTimeLimit) {
		$base = realpath(__DIR__ . '/../..') . '/';

		if ($useSetTimeLimit) {
			set_time_limit(180);
		}
		$manifest = GalleryUtilities::readManifest();

		if (empty($manifest)) {
			return null;
		}

		if (isset($statusMonitor)) {
			$statusMonitor->renderStatusMessage('Performing system checks', '', 0.1);
		}

		if ($useSetTimeLimit) {
			set_time_limit(180);
		}

		$missing  = $modified = $shouldRemove = array();
		$stepSize = max((int)(count($manifest) / 22), 1);
		$i        = 0;

		foreach ($manifest as $file => $info) {
			$i++;

			if ($file == 'MANIFEST') {
				continue;
			}
			$path = $base . $file;

			if ($i % $stepSize == 0) {
				if (isset($statusMonitor)) {
					$statusMonitor->renderStatusMessage(
						'Performing system checks',
						'',
						0.12 + $i / $stepSize * 0.04
					);
				}

				if ($useSetTimeLimit) {
					set_time_limit(180);
				}
			}

			if (!empty($info['removed'])) {
				if (file_exists($path)) {
					$shouldRemove[] = $file;
				}
			} elseif (!file_exists($path)) {
				$missing[] = $file;
			} else {
				/*
				 * Use size comparison instead of checksum for speed.  We have
				 * two sizes, one calculated with unix eols, one with windows eols.
				 */
				$actualSize = filesize($path);

				if ($actualSize != $info['size'] && $actualSize != $info['size_crlf']) {
					// This can be useful debug info
					if (false) {
						printf(
							'%s (expected: %s/%s, actual: %s)<br/>',
							$file,
							$info['size'],
							$info['size_crlf'],
							$actualSize
						);
					}
					$modified[] = $file;
				}
			}
		}

		return array(
			'missing'      => $missing,
			'modified'     => $modified,
			'shouldRemove' => $shouldRemove,
		);
	}

	/**
	 * Render a file-list in a minimizable block with a heading and an optional notice text.
	 * @param array $files
	 * @param string $blockId The HTML id for the block toggle mechanism
	 * @param string $heading Heading for the block
	 * @param string $notice (optional) A longer notice to be shown on top of the file list
	 */
	public function renderFileList($files, $blockId, $heading, $notice = null) {
		ob_start();

		include __DIR__ . '/../templates/SystemCheckFileList.html';
		$html = ob_get_contents();
		ob_end_clean();

		return $html;
	}

	/**
	 * Check if the user has the most basic database privileges required to finish the upgrade
	 * steps successfully. Check:
	 *      - CREATE TABLE, ALTER TABLE, DROP TABLE
	 *      - CREATE INDEX, DROP INDEX
	 *      - CREATE SEQUENCE, DROP SEQUENCE
	 *
	 * @return array (boolean success, string errors)
	 */
	public function _testPrivileges() {
		global $gallery;
		$storage       =& $gallery->getStorage();
		$storageExtras = $storage->_getExtras();

		// We might have lost our database connection (timeout) so check and reconnect
		$ret = $storage->validateConnection();

		if ($ret) {
			$gallery->debug($ret->getAsHtml());

			return array(
				false,
				'Database permission test failed. Could not connect to database.',
			);
		}

		$gallery->startRecordingDebugSnippet();
		list($ret, $metatables) = $storageExtras->_metaTables();
		$snippet                = $gallery->stopRecordingDebugSnippet();

		if ($ret) {
			$gallery->debug($ret->getAsHtml());

			return array(
				false,
				'Database permission test failed. Could not acquire database information.'
				. "\n" . $snippet,
			);
		}

		/*
		 * Execute T_InstallerTest_1.sql through T_InstallerTest_4.sql.  These create, alter and
		 * drop a table, and create and drop index.  Because our .xml transforms (MySQL.xsl,...)
		 * always updates the Schema table for all table create, alter, drops, we use here a test
		 * table which also has the name and the structure of the Schema table, just with another
		 * tablePrefix.
		 *
		 * Set an unused tablePrefix such that we can play with create/drop table in an
		 * unused database "namespace". Try a few prefices, don't try to drop!
		 */
		$ok = false;

		for ($i = 0; $i < 10; $i++) {
			$tablePrefix = 'gtst' . $i;

			if (!in_array(GalleryUtilities::strToLower($tablePrefix . 'Schema'), $metatables)) {
				$ok = true;

				break;
			}
		}

		if (!$ok) {
			return array(
				false,
				sprintf(
					'Could not find an unused table prefix similar to "%s".',
					$tablePrefix
				),
			);
		}

		$moduleSql = $storageExtras->getModuleSql('core');

		if (empty($moduleSql['test'])) {
			return array(
				false,
				'Database permission test failed due to corrupted file integrity.',
			);
		}

		for ($i = 1; $i <= 4; $i++) {
			list($success, $error) = $this->_executeSql($moduleSql['test']['InstallerTest'][$i], $tablePrefix);

			if (!$success) {
				return array(
					false,
					'Failed to create, alter or drop a database test table. ' . $error,
				);
			}
		}

		// Check CREATE and DROP SEQUENCE privileges
		$gallery->startRecordingDebugSnippet();
		$storage->_traceStart();
		$sequenceId = 'g2privtestseq';
		$ret        = $storage->_db->CreateSequence($tablePrefix . $sequenceId);
		$storage->_traceStop();
		$snippet = $gallery->stopRecordingDebugSnippet();

		if (!$ret) {
			return array(
				false,
				'Failed to create a database test sequence. '
				. 'Check the returned error message and README.html '
				. 'for missing privileges and clean up the database.' . "\n" . $snippet,
			);
		}
		$gallery->startRecordingDebugSnippet();
		$storage->_traceStart();
		$ret = $storage->_db->DropSequence($tablePrefix . $sequenceId);
		$storage->_traceStop();
		$snippet = $gallery->stopRecordingDebugSnippet();

		if (!$ret) {
			return array(
				false,
				'Test failed to drop a database test sequence. '
				. 'Check the returned error message and README.html '
				. 'for missing privileges and clean up the database.' . "\n" . $snippet,
			);
		}

		return array(true, null);
	}

	/**
	 * Execute a series of SQL statements.
	 * @param string $buffer the SQL statements
	 * @param string $tablePrefix prefix for table names
	 * @return array(boolean success, string error message)
	 */
	public function _executeSql($buffer, $tablePrefix) {
		global $gallery;
		$storage =& $gallery->getStorage();

		if (empty($buffer)) {
			return array(false, 'Missing SQL statements');
		}
		/*
		 * Split the file where semicolons are followed by a blank line..
		 * PL/SQL blocks will have other semicolons, so we can't split on every one.
		 * But first, remove that last semicolon such that all statements have no semicolon
		 * (required for oracle)
		 */
		if ($pos = strrpos($buffer, ';')) {
			$buffer = substr($buffer, 0, $pos);
		}
		$statements    = preg_split('/; *\r?\n *\r?\n/s', $buffer);
		$storageConfig = $gallery->getConfig('storage.config');
		$columnPrefix  = $storageConfig['columnPrefix'];

		foreach ($statements as $query) {
			$query = trim($query);

			if (!empty($query)) {
				$query = str_replace('DB_TABLE_PREFIX', $tablePrefix, $query);
				$query = str_replace('DB_COLUMN_PREFIX', $columnPrefix, $query);
				// For mysql, another replacement is required
				$query = str_replace('DB_TABLE_TYPE', '', $query);

				$gallery->startRecordingDebugSnippet();
				$ret     = $storage->execute($query, array());
				$snippet = $gallery->stopRecordingDebugSnippet();

				if ($ret) {
					return array(
						false,
						'Check the returned error message and README.html '
						. 'for missing privileges and clean up the database.' . "\n" . $snippet,
					);
				}
			}
		}

		return array(true, null);
	}
}
