<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

require_once __DIR__ . '/../../../modules/core/classes/GalleryView.class';

require_once __DIR__ . '/../../../modules/core/classes/GalleryController.class';

require_once __DIR__ . '/../../../modules/core/ItemEdit.inc';

/**
 * An ItemEditOption specific version of GalleryTestCase
 * @package Gallery
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision: 17580 $
 */
class ItemEditOptionTestCase extends GalleryTestCase {
	/**
	 * The option instance
	 * @access protected
	 */
	public $_option;

	/**
	 * immediate status view
	 * @access private
	 */
	public $_statusMonitor;

	public function __construct($methodName, $moduleName, $optionName) {
		parent::__construct($methodName);

		list($ret, $this->_option) = GalleryCoreApi::newFactoryInstanceById('ItemEditOption', $optionName);

		if ($ret) {
			return $ret;
		}

		if (!isset($this->_option)) {
			return GalleryCoreApi::error(ERROR_MISSING_OBJECT);
		}

		list($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', $moduleName);

		if ($ret) {
			return $ret;
		}
		$this->_statusMonitor = new ItemEditOptionTestImmediateStatusView();
	}

	public function _handleRequestAfterEdit($form, &$item, $errorCode = null) {
		list($ret, $preferred) = GalleryCoreApi::fetchPreferredsByItemIds(array($item->getId()));

		if ($ret) {
			return array($ret, null);
		}
		$preferred = empty($preferred) ? null : array_shift($preferred);

		list($ret, $error, $warning) = $this->_option->handleRequestAfterEdit(
			$form,
			$item,
			$preferred,
			$this->_statusMonitor
		);

		if (isset($errorCode)) {
			if (!$ret || ($ret->getErrorCode() & $errorCode) != $errorCode) {
				$this->fail(
					sprintf(
						'Expected error code (%s) but received (%s)',
						implode(' | ', GalleryStatus::doStatic()->getErrorCodeConstants($errorCode)),
						$ret ? implode(
							' | ',
							GalleryStatus::doStatic()->getErrorCodeConstants($ret->getErrorCode())
						) : 'success'
					)
				);
			}
		} elseif ($ret) {
			return $ret;
		} else {
			// Check to make sure we got back everything we want
			$this->assertTrue(isset($error) && is_array($error), 'option error results missing');

			// Check to make sure we got back everything we want
			$this->assertTrue(isset($warning) && is_array($warning), 'option warning results missing');
		}

		return array($error, $warning);
	}

	public function _translate($message) {
		return $this->_module->translate($message);
	}
}

/**
 * Test ImmediateStatusView implementation
 */
class ItemEditOptionTestImmediateStatusView extends GalleryView {
	public function doLoadImmediateTemplate() {
		$this->_l10Domain = 'test';
		$this->_template  = 'test';

		return null;
	}

	public function renderHeader() {
		return null;
	}

	public function renderStatusMessage($statusMessage) {
		return null;
	}

	public function renderRedirect($redirectUrl) {
		return null;
	}

	public function renderFooter() {
		return null;
	}

	public function setMain($main) {
		return null;
	}
}
