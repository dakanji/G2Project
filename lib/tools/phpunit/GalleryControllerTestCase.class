<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2008 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * A controller specific version of GalleryTestCase
 * @package Gallery
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision: 17590 $
 */
class GalleryControllerTestCase extends GalleryTestCase {
	/**
	 * The controller instance
	 * @access protected
	 */
	public $_controller;

	public function __construct($methodName, $controllerName) {
		parent::__construct($methodName);

		GalleryCoreApi::requireOnce('modules/core/classes/GalleryController.class');
		list($ret, $this->_controller) = GalleryController::loadController($controllerName);

		if ($ret) {
			$this->fail($ret->getAsHtml());
		}
	}

	public function setUp($setup = null) {
		$ret = parent::setUp($setup);

		if ($ret) {
			return $ret;
		}
		global $gallery;

		$gallery->_session->put('session.siteAdminActivityTimestamp', time());
	}

	public function handleRequest($errorCode = null) {
		// Get our form variables
		$form = GalleryUtilities::getFormVariables('form');

		list($ret, $results) = $this->_controller->handleRequest($form);

		if (isset($errorCode)) {
			if ($ret) {
				if (($ret->getErrorCode() & $errorCode) != $errorCode) {
					$this->fail(
						sprintf(
							'Expected error code (%s) but received (%s)',
							implode(
								' | ',
								GalleryStatus::doStatic()->getErrorCodeConstants(
									$errorCode
								)
							),
							implode(
								' | ',
								GalleryStatus::doStatic()->getErrorCodeConstants(
									$ret->getErrorCode()
								)
							)
						)
					);
				}
			} else {
				$this->fail(
					sprintf(
						'Expected error code (%s) but test was successful',
						implode(
							' | ',
							GalleryStatus::doStatic()->getErrorCodeConstants(
								$errorCode
							)
						)
					)
				);
			}
		} elseif ($ret) {
			$this->fail($ret->getAsHtml());

			return array();
		} else {
			// Check to make sure we got back everything we want
			$this->assertTrue(
				isset($results['status']),
				'controller results missing status'
			);
			$this->assertTrue(
				isset($results['error']),
				'controller results missing error'
			);
			$this->assertTrue(
				isset($results['redirect']) || isset($results['delegate']) || isset($results['return']),
				'controller results needs one of (redirect, delegate)'
			);
		}

		return $results;
	}
}
